{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isERC721",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOrNftIdToReceiver",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "increaseTotalAmountClaimable",
          "type": "uint256"
        }
      ],
      "name": "CallbackReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "currency",
          "type": "address"
        }
      ],
      "name": "ERC20CurrencyAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "currency",
          "type": "address"
        }
      ],
      "name": "ERC20CurrencyRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldOpeningFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newOpeningFee",
          "type": "uint256"
        }
      ],
      "name": "OpeningFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldPriceFeedAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPriceFeedAddress",
          "type": "address"
        }
      ],
      "name": "PriceFeedUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetRaffled",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "raffleOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum MockMainnetEscrow.RaffleType",
          "name": "raffleType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "nftIdOrAmount",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "paymentcurrency",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "pricePerTicket",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "numberOfTotalTickets",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "minimumTicketsSold",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "endTimestamp",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fairRaffleFee",
          "type": "uint256"
        }
      ],
      "name": "RaffleCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldRelayerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newRelayerAddress",
          "type": "address"
        }
      ],
      "name": "RelayerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FAIR_RAFFLE_FEE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FAIR_RAFFLE_FEE_NUMERATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPENING_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ERC20TokenAddressPolygon",
          "type": "address"
        }
      ],
      "name": "blacklistCurrency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "_amount",
          "type": "uint128"
        },
        {
          "internalType": "address",
          "name": "_currencyInPolygon",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "_pricePerTicket",
          "type": "uint128"
        },
        {
          "internalType": "uint64",
          "name": "_numberOfTickets",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_minimumTicketsSold",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_durationInSeconds",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "createERC20Raffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nftCollection",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "_nftId",
          "type": "uint128"
        },
        {
          "internalType": "address",
          "name": "_currencyInPolygon",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "_pricePerTicket",
          "type": "uint128"
        },
        {
          "internalType": "uint64",
          "name": "_numberOfTickets",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_minimumTicketsSold",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_durationInSeconds",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "createERC721Raffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currencyPriceFeed",
      "outputs": [
        {
          "internalType": "contract ICurrencyPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "_amount",
          "type": "uint128"
        },
        {
          "internalType": "address",
          "name": "_currencyInPolygon",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "_pricePerTicket",
          "type": "uint128"
        },
        {
          "internalType": "uint64",
          "name": "_numberOfTickets",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_minimumTicketsSold",
          "type": "uint64"
        }
      ],
      "name": "fairRaffleFeeERC20",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_currencyInPolygon",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "_pricePerTicket",
          "type": "uint128"
        },
        {
          "internalType": "uint64",
          "name": "_minimumTicketsSold",
          "type": "uint64"
        }
      ],
      "name": "fairRaffleFeeERC721",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_relayer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceFeedContract",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_erc20Token",
          "type": "address"
        }
      ],
      "name": "isCurrencyWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "assetContract",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isERC721",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "amountOrNftIdToReceiver",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "increaseTotalAmountClaimable",
              "type": "uint256"
            }
          ],
          "internalType": "struct MockMainnetEscrow.CallbackInfo[]",
          "name": "callbackArr",
          "type": "tuple[]"
        }
      ],
      "name": "polygonCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "polygonTokenToMainnetAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeedsEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_openingFee",
          "type": "uint256"
        }
      ],
      "name": "setOpeningFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_currencyPriceFeed",
          "type": "address"
        }
      ],
      "name": "setPriceFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_relayer",
          "type": "address"
        }
      ],
      "name": "setRelayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "togglePause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "togglePriceFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalAmountClaimable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ERC20TokenAddressPolygon",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ERC20TokenAddressMainnet",
          "type": "address"
        }
      ],
      "name": "whitelistCurrency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelistedCurrencies",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokenAddress",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "0": "/home/ctrlc3/.brownie/packages/OpenZeppelin/openzeppelin-contracts-upgradeable@4.6.0/contracts/access/OwnableUpgradeable.sol",
    "1": "/home/ctrlc3/.brownie/packages/OpenZeppelin/openzeppelin-contracts-upgradeable@4.6.0/contracts/proxy/utils/Initializable.sol",
    "11": "/home/ctrlc3/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.0.0/contracts/token/ERC721/IERC721.sol",
    "15": "/home/ctrlc3/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.0.0/contracts/utils/Address.sol",
    "2": "/home/ctrlc3/.brownie/packages/OpenZeppelin/openzeppelin-contracts-upgradeable@4.6.0/contracts/security/PausableUpgradeable.sol",
    "20": "/home/ctrlc3/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.0.0/contracts/utils/introspection/IERC165.sol",
    "32": "contracts/interfaces/IWETH.sol",
    "36": "contracts/mocks/MockMainnetEscrowNoAccessControl.sol",
    "5": "/home/ctrlc3/.brownie/packages/OpenZeppelin/openzeppelin-contracts-upgradeable@4.6.0/contracts/utils/ContextUpgradeable.sol",
    "8": "/home/ctrlc3/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.0.0/contracts/token/ERC20/IERC20.sol",
    "9": "/home/ctrlc3/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.0.0/contracts/token/ERC20/utils/SafeERC20.sol"
  },
  "ast": {
    "absolutePath": "contracts/mocks/MockMainnetEscrowNoAccessControl.sol",
    "exportedSymbols": {
      "Address": [
        11182
      ],
      "AddressUpgradeable": [
        12002
      ],
      "ContextUpgradeable": [
        10886
      ],
      "ICurrencyPriceFeed": [
        3966
      ],
      "IERC165": [
        11194
      ],
      "IERC20": [
        8647
      ],
      "IERC20Extented": [
        3974
      ],
      "IERC721": [
        8987
      ],
      "IWETH": [
        9002
      ],
      "Initializable": [
        10844
      ],
      "MockMainnetEscrow": [
        5182
      ],
      "OwnableUpgradeable": [
        8458
      ],
      "PausableUpgradeable": [
        8569
      ],
      "SafeERC20": [
        8871
      ]
    },
    "id": 5183,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 3951,
        "literals": [
          "solidity",
          "0.8",
          ".14"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:23:36"
      },
      {
        "absolutePath": "/home/ctrlc3/.brownie/packages/OpenZeppelin/openzeppelin-contracts-upgradeable@4.6.0/contracts/access/OwnableUpgradeable.sol",
        "file": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
        "id": 3952,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 5183,
        "sourceUnit": 8459,
        "src": "678:75:36",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/ctrlc3/.brownie/packages/OpenZeppelin/openzeppelin-contracts-upgradeable@4.6.0/contracts/security/PausableUpgradeable.sol",
        "file": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol",
        "id": 3953,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 5183,
        "sourceUnit": 8570,
        "src": "754:78:36",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/ctrlc3/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.0.0/contracts/token/ERC721/IERC721.sol",
        "file": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
        "id": 3954,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 5183,
        "sourceUnit": 8988,
        "src": "833:58:36",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/ctrlc3/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.0.0/contracts/token/ERC20/IERC20.sol",
        "file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
        "id": 3955,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 5183,
        "sourceUnit": 8648,
        "src": "892:56:36",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/ctrlc3/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.0.0/contracts/token/ERC20/utils/SafeERC20.sol",
        "file": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
        "id": 3956,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 5183,
        "sourceUnit": 8872,
        "src": "949:65:36",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/interfaces/IWETH.sol",
        "file": "../interfaces/IWETH.sol",
        "id": 3958,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 5183,
        "sourceUnit": 9003,
        "src": "1015:46:36",
        "symbolAliases": [
          {
            "foreign": {
              "id": 3957,
              "name": "IWETH",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 9002,
              "src": "1023:5:36",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "ICurrencyPriceFeed",
        "contractDependencies": [],
        "contractKind": "interface",
        "fullyImplemented": false,
        "id": 3966,
        "linearizedBaseContracts": [
          3966
        ],
        "name": "ICurrencyPriceFeed",
        "nameLocation": "1073:18:36",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "functionSelector": "a4b943fb",
            "id": 3965,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getUsdPriceOfToken",
            "nameLocation": "1107:18:36",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3961,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3960,
                  "mutability": "mutable",
                  "name": "token_",
                  "nameLocation": "1134:6:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 3965,
                  "src": "1126:14:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3959,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1126:7:36",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1125:16:36"
            },
            "returnParameters": {
              "id": 3964,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3963,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3965,
                  "src": "1165:7:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3962,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1165:7:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1164:9:36"
            },
            "scope": 3966,
            "src": "1098:76:36",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 5183,
        "src": "1063:113:36",
        "usedErrors": []
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 3967,
              "name": "IERC20",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 8647,
              "src": "1206:6:36"
            },
            "id": 3968,
            "nodeType": "InheritanceSpecifier",
            "src": "1206:6:36"
          }
        ],
        "canonicalName": "IERC20Extented",
        "contractDependencies": [],
        "contractKind": "interface",
        "fullyImplemented": false,
        "id": 3974,
        "linearizedBaseContracts": [
          3974,
          8647
        ],
        "name": "IERC20Extented",
        "nameLocation": "1188:14:36",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "functionSelector": "313ce567",
            "id": 3973,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "decimals",
            "nameLocation": "1228:8:36",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3969,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1236:2:36"
            },
            "returnParameters": {
              "id": 3972,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3971,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3973,
                  "src": "1262:5:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 3970,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "1262:5:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1261:7:36"
            },
            "scope": 3974,
            "src": "1219:50:36",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 5183,
        "src": "1178:93:36",
        "usedErrors": []
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 3975,
              "name": "Initializable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 10844,
              "src": "1303:13:36"
            },
            "id": 3976,
            "nodeType": "InheritanceSpecifier",
            "src": "1303:13:36"
          },
          {
            "baseName": {
              "id": 3977,
              "name": "OwnableUpgradeable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 8458,
              "src": "1318:18:36"
            },
            "id": 3978,
            "nodeType": "InheritanceSpecifier",
            "src": "1318:18:36"
          },
          {
            "baseName": {
              "id": 3979,
              "name": "PausableUpgradeable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 8569,
              "src": "1338:19:36"
            },
            "id": 3980,
            "nodeType": "InheritanceSpecifier",
            "src": "1338:19:36"
          }
        ],
        "canonicalName": "MockMainnetEscrow",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 5182,
        "linearizedBaseContracts": [
          5182,
          8569,
          8458,
          10886,
          10844
        ],
        "name": "MockMainnetEscrow",
        "nameLocation": "1282:17:36",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "global": false,
            "id": 3984,
            "libraryName": {
              "id": 3981,
              "name": "SafeERC20",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 8871,
              "src": "1370:9:36"
            },
            "nodeType": "UsingForDirective",
            "src": "1364:27:36",
            "typeName": {
              "id": 3983,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 3982,
                "name": "IERC20",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 8647,
                "src": "1384:6:36"
              },
              "referencedDeclaration": 8647,
              "src": "1384:6:36",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IERC20_$8647",
                "typeString": "contract IERC20"
              }
            }
          },
          {
            "canonicalName": "MockMainnetEscrow.RaffleType",
            "id": 3987,
            "members": [
              {
                "id": 3985,
                "name": "ERC721",
                "nameLocation": "1423:6:36",
                "nodeType": "EnumValue",
                "src": "1423:6:36"
              },
              {
                "id": 3986,
                "name": "ERC20",
                "nameLocation": "1439:5:36",
                "nodeType": "EnumValue",
                "src": "1439:5:36"
              }
            ],
            "name": "RaffleType",
            "nameLocation": "1402:10:36",
            "nodeType": "EnumDefinition",
            "src": "1397:53:36"
          },
          {
            "canonicalName": "MockMainnetEscrow.CallbackInfo",
            "id": 3998,
            "members": [
              {
                "constant": false,
                "id": 3989,
                "mutability": "mutable",
                "name": "receiver",
                "nameLocation": "1543:8:36",
                "nodeType": "VariableDeclaration",
                "scope": 3998,
                "src": "1535:16:36",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 3988,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "1535:7:36",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 3991,
                "mutability": "mutable",
                "name": "assetContract",
                "nameLocation": "1664:13:36",
                "nodeType": "VariableDeclaration",
                "scope": 3998,
                "src": "1656:21:36",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 3990,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "1656:7:36",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 3993,
                "mutability": "mutable",
                "name": "isERC721",
                "nameLocation": "1756:8:36",
                "nodeType": "VariableDeclaration",
                "scope": 3998,
                "src": "1751:13:36",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "typeName": {
                  "id": 3992,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "1751:4:36",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 3995,
                "mutability": "mutable",
                "name": "amountOrNftIdToReceiver",
                "nameLocation": "1830:23:36",
                "nodeType": "VariableDeclaration",
                "scope": 3998,
                "src": "1822:31:36",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 3994,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "1822:7:36",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 3997,
                "mutability": "mutable",
                "name": "increaseTotalAmountClaimable",
                "nameLocation": "1925:28:36",
                "nodeType": "VariableDeclaration",
                "scope": 3998,
                "src": "1917:36:36",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 3996,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "1917:7:36",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "CallbackInfo",
            "nameLocation": "1463:12:36",
            "nodeType": "StructDefinition",
            "scope": 5182,
            "src": "1456:504:36",
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "436cc138",
            "id": 4002,
            "mutability": "mutable",
            "name": "whitelistedCurrencies",
            "nameLocation": "2037:21:36",
            "nodeType": "VariableDeclaration",
            "scope": 5182,
            "src": "2005:53:36",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
              "typeString": "mapping(address => bool)"
            },
            "typeName": {
              "id": 4001,
              "keyType": {
                "id": 3999,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "2013:7:36",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "2005:24:36",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                "typeString": "mapping(address => bool)"
              },
              "valueType": {
                "id": 4000,
                "name": "bool",
                "nodeType": "ElementaryTypeName",
                "src": "2024:4:36",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": true,
            "id": 4008,
            "mutability": "constant",
            "name": "WETH",
            "nameLocation": "2088:4:36",
            "nodeType": "VariableDeclaration",
            "scope": 5182,
            "src": "2065:79:36",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_IWETH_$9002",
              "typeString": "contract IWETH"
            },
            "typeName": {
              "id": 4004,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 4003,
                "name": "IWETH",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 9002,
                "src": "2065:5:36"
              },
              "referencedDeclaration": 9002,
              "src": "2065:5:36",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IWETH_$9002",
                "typeString": "contract IWETH"
              }
            },
            "value": {
              "arguments": [
                {
                  "hexValue": "307843303261614133396232323346453844304130653543344632376541443930383343373536436332",
                  "id": 4006,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "2101:42:36",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "value": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                ],
                "id": 4005,
                "name": "IWETH",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 9002,
                "src": "2095:5:36",
                "typeDescriptions": {
                  "typeIdentifier": "t_type$_t_contract$_IWETH_$9002_$",
                  "typeString": "type(contract IWETH)"
                }
              },
              "id": 4007,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "typeConversion",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "2095:49:36",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IWETH_$9002",
                "typeString": "contract IWETH"
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "functionSelector": "2bf78dd8",
            "id": 4010,
            "mutability": "mutable",
            "name": "OPENING_FEE",
            "nameLocation": "2165:11:36",
            "nodeType": "VariableDeclaration",
            "scope": 5182,
            "src": "2150:26:36",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 4009,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "2150:7:36",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "public"
          },
          {
            "constant": true,
            "functionSelector": "4e4d58bb",
            "id": 4013,
            "mutability": "constant",
            "name": "FAIR_RAFFLE_FEE_NUMERATOR",
            "nameLocation": "2259:25:36",
            "nodeType": "VariableDeclaration",
            "scope": 5182,
            "src": "2235:55:36",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 4011,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "2235:7:36",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "353030",
              "id": 4012,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "2287:3:36",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_500_by_1",
                "typeString": "int_const 500"
              },
              "value": "500"
            },
            "visibility": "public"
          },
          {
            "constant": true,
            "functionSelector": "66998e50",
            "id": 4016,
            "mutability": "constant",
            "name": "FAIR_RAFFLE_FEE_DENOMINATOR",
            "nameLocation": "2320:27:36",
            "nodeType": "VariableDeclaration",
            "scope": 5182,
            "src": "2296:59:36",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 4014,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "2296:7:36",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "3130303030",
              "id": 4015,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "2350:5:36",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_10000_by_1",
                "typeString": "int_const 10000"
              },
              "value": "10000"
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "documentation": {
              "id": 4017,
              "nodeType": "StructuredDocumentation",
              "src": "2361:123:36",
              "text": "Token address => Amount that owners of the contract can claim as fee rewards\naddress(0) = Ether"
            },
            "functionSelector": "a21afc76",
            "id": 4021,
            "mutability": "mutable",
            "name": "totalAmountClaimable",
            "nameLocation": "2524:20:36",
            "nodeType": "VariableDeclaration",
            "scope": 5182,
            "src": "2489:55:36",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
              "typeString": "mapping(address => uint256)"
            },
            "typeName": {
              "id": 4020,
              "keyType": {
                "id": 4018,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "2497:7:36",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "2489:27:36",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                "typeString": "mapping(address => uint256)"
              },
              "valueType": {
                "id": 4019,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "2508:7:36",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "8406c079",
            "id": 4023,
            "mutability": "mutable",
            "name": "relayer",
            "nameLocation": "2646:7:36",
            "nodeType": "VariableDeclaration",
            "scope": 5182,
            "src": "2631:22:36",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 4022,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "2631:7:36",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "7b631da5",
            "id": 4026,
            "mutability": "mutable",
            "name": "currencyPriceFeed",
            "nameLocation": "2777:17:36",
            "nodeType": "VariableDeclaration",
            "scope": 5182,
            "src": "2751:43:36",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_ICurrencyPriceFeed_$3966",
              "typeString": "contract ICurrencyPriceFeed"
            },
            "typeName": {
              "id": 4025,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 4024,
                "name": "ICurrencyPriceFeed",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 3966,
                "src": "2751:18:36"
              },
              "referencedDeclaration": 3966,
              "src": "2751:18:36",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ICurrencyPriceFeed_$3966",
                "typeString": "contract ICurrencyPriceFeed"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "95e3d9ab",
            "id": 4030,
            "mutability": "mutable",
            "name": "polygonTokenToMainnetAddress",
            "nameLocation": "2924:28:36",
            "nodeType": "VariableDeclaration",
            "scope": 5182,
            "src": "2889:63:36",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_address_$",
              "typeString": "mapping(address => address)"
            },
            "typeName": {
              "id": 4029,
              "keyType": {
                "id": 4027,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "2897:7:36",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "2889:27:36",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_address_$",
                "typeString": "mapping(address => address)"
              },
              "valueType": {
                "id": 4028,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "2908:7:36",
                "stateMutability": "nonpayable",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "697ca930",
            "id": 4032,
            "mutability": "mutable",
            "name": "priceFeedsEnabled",
            "nameLocation": "3043:17:36",
            "nodeType": "VariableDeclaration",
            "scope": 5182,
            "src": "3031:29:36",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 4031,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "3031:4:36",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 4036,
            "mutability": "mutable",
            "name": "__gap",
            "nameLocation": "3128:5:36",
            "nodeType": "VariableDeclaration",
            "scope": 5182,
            "src": "3108:25:36",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_uint256_$20_storage",
              "typeString": "uint256[20]"
            },
            "typeName": {
              "baseType": {
                "id": 4033,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "3108:7:36",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "id": 4035,
              "length": {
                "hexValue": "3230",
                "id": 4034,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "3116:2:36",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_20_by_1",
                  "typeString": "int_const 20"
                },
                "value": "20"
              },
              "nodeType": "ArrayTypeName",
              "src": "3108:11:36",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_uint256_$20_storage_ptr",
                "typeString": "uint256[20]"
              }
            },
            "visibility": "private"
          },
          {
            "anonymous": false,
            "eventSelector": "b26c0bf32d8d3eff0d0561d0b30f4bf8962a18678833b276fcbbe06c48e9eaaa",
            "id": 4061,
            "name": "RaffleCreated",
            "nameLocation": "3146:13:36",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 4060,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4038,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "assetRaffled",
                  "nameLocation": "3177:12:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 4061,
                  "src": "3169:20:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4037,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3169:7:36",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4040,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "raffleOwner",
                  "nameLocation": "3207:11:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 4061,
                  "src": "3199:19:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4039,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3199:7:36",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4043,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "raffleType",
                  "nameLocation": "3239:10:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 4061,
                  "src": "3228:21:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_RaffleType_$3987",
                    "typeString": "enum MockMainnetEscrow.RaffleType"
                  },
                  "typeName": {
                    "id": 4042,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 4041,
                      "name": "RaffleType",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 3987,
                      "src": "3228:10:36"
                    },
                    "referencedDeclaration": 3987,
                    "src": "3228:10:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_RaffleType_$3987",
                      "typeString": "enum MockMainnetEscrow.RaffleType"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4045,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "nftIdOrAmount",
                  "nameLocation": "3267:13:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 4061,
                  "src": "3259:21:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint128",
                    "typeString": "uint128"
                  },
                  "typeName": {
                    "id": 4044,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "3259:7:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint128",
                      "typeString": "uint128"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4047,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "paymentcurrency",
                  "nameLocation": "3299:15:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 4061,
                  "src": "3291:23:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4046,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3291:7:36",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4049,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "pricePerTicket",
                  "nameLocation": "3333:14:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 4061,
                  "src": "3325:22:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint128",
                    "typeString": "uint128"
                  },
                  "typeName": {
                    "id": 4048,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "3325:7:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint128",
                      "typeString": "uint128"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4051,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "numberOfTotalTickets",
                  "nameLocation": "3365:20:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 4061,
                  "src": "3358:27:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 4050,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "3358:6:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4053,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "minimumTicketsSold",
                  "nameLocation": "3403:18:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 4061,
                  "src": "3396:25:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 4052,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "3396:6:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4055,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "endTimestamp",
                  "nameLocation": "3439:12:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 4061,
                  "src": "3432:19:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 4054,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "3432:6:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4057,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "merkleRoot",
                  "nameLocation": "3470:10:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 4061,
                  "src": "3462:18:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 4056,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3462:7:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4059,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "fairRaffleFee",
                  "nameLocation": "3498:13:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 4061,
                  "src": "3490:21:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4058,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3490:7:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3159:358:36"
            },
            "src": "3140:378:36"
          },
          {
            "anonymous": false,
            "eventSelector": "5c6cf68a9d7e416d0eee740661627dd794257920f1c63ddae6c6af81d02d12ea",
            "id": 4065,
            "name": "ERC20CurrencyAdded",
            "nameLocation": "3529:18:36",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 4064,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4063,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "currency",
                  "nameLocation": "3556:8:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 4065,
                  "src": "3548:16:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4062,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3548:7:36",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3547:18:36"
            },
            "src": "3523:43:36"
          },
          {
            "anonymous": false,
            "eventSelector": "0dc0548bc90523a9e943ea77d199875fdc1e4f8a419b6d53a595b5e6671480e5",
            "id": 4069,
            "name": "ERC20CurrencyRemoved",
            "nameLocation": "3577:20:36",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 4068,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4067,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "currency",
                  "nameLocation": "3606:8:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 4069,
                  "src": "3598:16:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4066,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3598:7:36",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3597:18:36"
            },
            "src": "3571:45:36"
          },
          {
            "anonymous": false,
            "eventSelector": "fdf87137985fce097c2059f7e3bd28b9104995cad66709fdecbaa5e8e48da9af",
            "id": 4081,
            "name": "CallbackReceived",
            "nameLocation": "3627:16:36",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 4080,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4071,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "receiver",
                  "nameLocation": "3661:8:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 4081,
                  "src": "3653:16:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4070,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3653:7:36",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4073,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "assetContract",
                  "nameLocation": "3687:13:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 4081,
                  "src": "3679:21:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4072,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3679:7:36",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4075,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "isERC721",
                  "nameLocation": "3715:8:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 4081,
                  "src": "3710:13:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 4074,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3710:4:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4077,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "amountOrNftIdToReceiver",
                  "nameLocation": "3741:23:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 4081,
                  "src": "3733:31:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4076,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3733:7:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4079,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "increaseTotalAmountClaimable",
                  "nameLocation": "3782:28:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 4081,
                  "src": "3774:36:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4078,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3774:7:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3643:173:36"
            },
            "src": "3621:196:36"
          },
          {
            "anonymous": false,
            "eventSelector": "605ca4e43489fb38b91aa63dd9147cd3847957694b080b9285ec898b34269f0c",
            "id": 4087,
            "name": "RelayerUpdated",
            "nameLocation": "3828:14:36",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 4086,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4083,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "oldRelayerAddress",
                  "nameLocation": "3851:17:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 4087,
                  "src": "3843:25:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4082,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3843:7:36",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4085,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "newRelayerAddress",
                  "nameLocation": "3878:17:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 4087,
                  "src": "3870:25:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4084,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3870:7:36",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3842:54:36"
            },
            "src": "3822:75:36"
          },
          {
            "anonymous": false,
            "eventSelector": "a8abe0398416476db5b05737cd4da3b3cbde5012d978a6a6c3fd49d321753536",
            "id": 4093,
            "name": "PriceFeedUpdated",
            "nameLocation": "3908:16:36",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 4092,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4089,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "oldPriceFeedAddress",
                  "nameLocation": "3933:19:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 4093,
                  "src": "3925:27:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4088,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3925:7:36",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4091,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "newPriceFeedAddress",
                  "nameLocation": "3962:19:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 4093,
                  "src": "3954:27:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4090,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3954:7:36",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3924:58:36"
            },
            "src": "3902:81:36"
          },
          {
            "anonymous": false,
            "eventSelector": "9dc2340c6769757c8d7dfe3a65a3f1e297ed8f919bed31501223ac8aa85dc63d",
            "id": 4099,
            "name": "OpeningFeeUpdated",
            "nameLocation": "3994:17:36",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 4098,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4095,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "oldOpeningFee",
                  "nameLocation": "4020:13:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 4099,
                  "src": "4012:21:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4094,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4012:7:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4097,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "newOpeningFee",
                  "nameLocation": "4043:13:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 4099,
                  "src": "4035:21:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4096,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4035:7:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4011:46:36"
            },
            "src": "3988:70:36"
          },
          {
            "body": {
              "id": 4147,
              "nodeType": "Block",
              "src": "4149:480:36",
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 4108,
                      "name": "__Ownable_init",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 8361,
                      "src": "4159:14:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 4109,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4159:16:36",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4110,
                  "nodeType": "ExpressionStatement",
                  "src": "4159:16:36"
                },
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 4111,
                      "name": "__Pausable_init",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 8489,
                      "src": "4185:15:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 4112,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4185:17:36",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4113,
                  "nodeType": "ExpressionStatement",
                  "src": "4185:17:36"
                },
                {
                  "expression": {
                    "id": 4116,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 4114,
                      "name": "relayer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4023,
                      "src": "4213:7:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 4115,
                      "name": "_relayer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4101,
                      "src": "4223:8:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "4213:18:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 4117,
                  "nodeType": "ExpressionStatement",
                  "src": "4213:18:36"
                },
                {
                  "expression": {
                    "id": 4122,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 4118,
                      "name": "currencyPriceFeed",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4026,
                      "src": "4241:17:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_ICurrencyPriceFeed_$3966",
                        "typeString": "contract ICurrencyPriceFeed"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 4120,
                          "name": "_priceFeedContract",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4103,
                          "src": "4280:18:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 4119,
                        "name": "ICurrencyPriceFeed",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3966,
                        "src": "4261:18:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_ICurrencyPriceFeed_$3966_$",
                          "typeString": "type(contract ICurrencyPriceFeed)"
                        }
                      },
                      "id": 4121,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4261:38:36",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_ICurrencyPriceFeed_$3966",
                        "typeString": "contract ICurrencyPriceFeed"
                      }
                    },
                    "src": "4241:58:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ICurrencyPriceFeed_$3966",
                      "typeString": "contract ICurrencyPriceFeed"
                    }
                  },
                  "id": 4123,
                  "nodeType": "ExpressionStatement",
                  "src": "4241:58:36"
                },
                {
                  "expression": {
                    "id": 4126,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 4124,
                      "name": "priceFeedsEnabled",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4032,
                      "src": "4309:17:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 4125,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "4329:4:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "4309:24:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 4127,
                  "nodeType": "ExpressionStatement",
                  "src": "4309:24:36"
                },
                {
                  "expression": {
                    "id": 4132,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 4128,
                        "name": "whitelistedCurrencies",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4002,
                        "src": "4378:21:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        }
                      },
                      "id": 4130,
                      "indexExpression": {
                        "hexValue": "307837636542323366443662433061644435394536326163323535373832373063466631623966363139",
                        "id": 4129,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4400:42:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619"
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "4378:65:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 4131,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "4446:4:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "4378:72:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 4133,
                  "nodeType": "ExpressionStatement",
                  "src": "4378:72:36"
                },
                {
                  "expression": {
                    "id": 4141,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 4134,
                        "name": "polygonTokenToMainnetAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4030,
                        "src": "4500:28:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_address_$",
                          "typeString": "mapping(address => address)"
                        }
                      },
                      "id": 4136,
                      "indexExpression": {
                        "hexValue": "307837636542323366443662433061644435394536326163323535373832373063466631623966363139",
                        "id": 4135,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4529:42:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "value": "0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619"
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "4500:72:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 4139,
                          "name": "WETH",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4008,
                          "src": "4583:4:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IWETH_$9002",
                            "typeString": "contract IWETH"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_contract$_IWETH_$9002",
                            "typeString": "contract IWETH"
                          }
                        ],
                        "id": 4138,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "4575:7:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_$",
                          "typeString": "type(address)"
                        },
                        "typeName": {
                          "id": 4137,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4575:7:36",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 4140,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4575:13:36",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "4500:88:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 4142,
                  "nodeType": "ExpressionStatement",
                  "src": "4500:88:36"
                },
                {
                  "expression": {
                    "id": 4145,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 4143,
                      "name": "OPENING_FEE",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4010,
                      "src": "4598:11:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "302e3033",
                      "id": 4144,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "4612:10:36",
                      "subdenomination": "ether",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_30000000000000000_by_1",
                        "typeString": "int_const 30000000000000000"
                      },
                      "value": "0.03"
                    },
                    "src": "4598:24:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 4146,
                  "nodeType": "ExpressionStatement",
                  "src": "4598:24:36"
                }
              ]
            },
            "functionSelector": "485cc955",
            "id": 4148,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 4106,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 4105,
                  "name": "initializer",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 10746,
                  "src": "4137:11:36"
                },
                "nodeType": "ModifierInvocation",
                "src": "4137:11:36"
              }
            ],
            "name": "initialize",
            "nameLocation": "4073:10:36",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4104,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4101,
                  "mutability": "mutable",
                  "name": "_relayer",
                  "nameLocation": "4092:8:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 4148,
                  "src": "4084:16:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4100,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4084:7:36",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4103,
                  "mutability": "mutable",
                  "name": "_priceFeedContract",
                  "nameLocation": "4110:18:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 4148,
                  "src": "4102:26:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4102,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4102:7:36",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4083:46:36"
            },
            "returnParameters": {
              "id": 4107,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4149:0:36"
            },
            "scope": 5182,
            "src": "4064:565:36",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 4159,
              "nodeType": "Block",
              "src": "4656:73:36",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 4154,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 4151,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "4674:3:36",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 4152,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "4674:10:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 4153,
                          "name": "relayer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4023,
                          "src": "4688:7:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "4674:21:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4f6e6c7952656c61796572",
                        "id": 4155,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4697:13:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_fb59d85d0023f926819a2b0cc435a89c2c9fd24b01ad767f56a4424f316af093",
                          "typeString": "literal_string \"OnlyRelayer\""
                        },
                        "value": "OnlyRelayer"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_fb59d85d0023f926819a2b0cc435a89c2c9fd24b01ad767f56a4424f316af093",
                          "typeString": "literal_string \"OnlyRelayer\""
                        }
                      ],
                      "id": 4150,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4666:7:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4156,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4666:45:36",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4157,
                  "nodeType": "ExpressionStatement",
                  "src": "4666:45:36"
                },
                {
                  "id": 4158,
                  "nodeType": "PlaceholderStatement",
                  "src": "4721:1:36"
                }
              ]
            },
            "id": 4160,
            "name": "onlyRelayer",
            "nameLocation": "4644:11:36",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 4149,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4656:0:36"
            },
            "src": "4635:94:36",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 4301,
              "nodeType": "Block",
              "src": "6023:1419:36",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 4191,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 4183,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "6041:3:36",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 4184,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "6041:10:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "arguments": [
                            {
                              "id": 4189,
                              "name": "_nftId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4165,
                              "src": "6087:6:36",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint128",
                                "typeString": "uint128"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint128",
                                "typeString": "uint128"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 4186,
                                  "name": "_nftCollection",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4163,
                                  "src": "6063:14:36",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 4185,
                                "name": "IERC721",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 8987,
                                "src": "6055:7:36",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_IERC721_$8987_$",
                                  "typeString": "type(contract IERC721)"
                                }
                              },
                              "id": 4187,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "6055:23:36",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC721_$8987",
                                "typeString": "contract IERC721"
                              }
                            },
                            "id": 4188,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "ownerOf",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 8920,
                            "src": "6055:31:36",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_address_$",
                              "typeString": "function (uint256) view external returns (address)"
                            }
                          },
                          "id": 4190,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6055:39:36",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "6041:53:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "596f7520646f206e6f74206f776e2074686973204e4654",
                        "id": 4192,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6096:25:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_ea429e64dc8be3b9b81e5ef4dd1edcbaa9ded156548c2a1a1b36d78d2dc3b9af",
                          "typeString": "literal_string \"You do not own this NFT\""
                        },
                        "value": "You do not own this NFT"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_ea429e64dc8be3b9b81e5ef4dd1edcbaa9ded156548c2a1a1b36d78d2dc3b9af",
                          "typeString": "literal_string \"You do not own this NFT\""
                        }
                      ],
                      "id": 4182,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6033:7:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4193,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6033:89:36",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4194,
                  "nodeType": "ExpressionStatement",
                  "src": "6033:89:36"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "baseExpression": {
                          "id": 4196,
                          "name": "whitelistedCurrencies",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4002,
                          "src": "6140:21:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                            "typeString": "mapping(address => bool)"
                          }
                        },
                        "id": 4198,
                        "indexExpression": {
                          "id": 4197,
                          "name": "_currencyInPolygon",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4167,
                          "src": "6162:18:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "6140:41:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "546869732063757272656e6379206973206e6f742077686974656c6973746564",
                        "id": 4199,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6183:34:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_e6e79c33916e338d6d55620301a9b8b688543376846a0ab9b39c2c41eb09d772",
                          "typeString": "literal_string \"This currency is not whitelisted\""
                        },
                        "value": "This currency is not whitelisted"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_e6e79c33916e338d6d55620301a9b8b688543376846a0ab9b39c2c41eb09d772",
                          "typeString": "literal_string \"This currency is not whitelisted\""
                        }
                      ],
                      "id": 4195,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6132:7:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4200,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6132:86:36",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4201,
                  "nodeType": "ExpressionStatement",
                  "src": "6132:86:36"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        "id": 4205,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 4203,
                          "name": "_numberOfTickets",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4171,
                          "src": "6236:16:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "hexValue": "31",
                          "id": 4204,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "6255:1:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1_by_1",
                            "typeString": "int_const 1"
                          },
                          "value": "1"
                        },
                        "src": "6236:20:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "526166666c6573206d7573742068617665206174206c656173742032207469636b657473",
                        "id": 4206,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6258:38:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_7660643d80dd9192ee623d00569baaf2c967faabaa847adee71041e77f41d86e",
                          "typeString": "literal_string \"Raffles must have at least 2 tickets\""
                        },
                        "value": "Raffles must have at least 2 tickets"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_7660643d80dd9192ee623d00569baaf2c967faabaa847adee71041e77f41d86e",
                          "typeString": "literal_string \"Raffles must have at least 2 tickets\""
                        }
                      ],
                      "id": 4202,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6228:7:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4207,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6228:69:36",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4208,
                  "nodeType": "ExpressionStatement",
                  "src": "6228:69:36"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        "id": 4212,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 4210,
                          "name": "_minimumTicketsSold",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4173,
                          "src": "6315:19:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<=",
                        "rightExpression": {
                          "id": 4211,
                          "name": "_numberOfTickets",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4171,
                          "src": "6338:16:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "src": "6315:39:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5f6d696e696d756d5469636b657473536f6c642073686f756c64203c3d205f6e756d6265724f665469636b657473",
                        "id": 4213,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6356:48:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_ac4d16b3d913981722bd2cab2e368bba364c7e45d84c336bacc6c435f110deeb",
                          "typeString": "literal_string \"_minimumTicketsSold should <= _numberOfTickets\""
                        },
                        "value": "_minimumTicketsSold should <= _numberOfTickets"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_ac4d16b3d913981722bd2cab2e368bba364c7e45d84c336bacc6c435f110deeb",
                          "typeString": "literal_string \"_minimumTicketsSold should <= _numberOfTickets\""
                        }
                      ],
                      "id": 4209,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6307:7:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4214,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6307:98:36",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4215,
                  "nodeType": "ExpressionStatement",
                  "src": "6307:98:36"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        "id": 4219,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 4217,
                          "name": "_durationInSeconds",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4175,
                          "src": "6423:18:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "hexValue": "3433323030",
                          "id": 4218,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "6445:5:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_43200_by_1",
                            "typeString": "int_const 43200"
                          },
                          "value": "43200"
                        },
                        "src": "6423:27:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4d696e696d756d206475726174696f6e20697320313220686f757273",
                        "id": 4220,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6452:30:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_f6ecce682c7d2f371b2ac2285c9d5506451577dde58a239feb6bcc18a09cb625",
                          "typeString": "literal_string \"Minimum duration is 12 hours\""
                        },
                        "value": "Minimum duration is 12 hours"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_f6ecce682c7d2f371b2ac2285c9d5506451577dde58a239feb6bcc18a09cb625",
                          "typeString": "literal_string \"Minimum duration is 12 hours\""
                        }
                      ],
                      "id": 4216,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6415:7:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4221,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6415:68:36",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4222,
                  "nodeType": "ExpressionStatement",
                  "src": "6415:68:36"
                },
                {
                  "assignments": [
                    4224
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4224,
                      "mutability": "mutable",
                      "name": "FAIR_RAFFLE_FEE",
                      "nameLocation": "6587:15:36",
                      "nodeType": "VariableDeclaration",
                      "scope": 4301,
                      "src": "6579:23:36",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 4223,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "6579:7:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 4230,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 4226,
                        "name": "_currencyInPolygon",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4167,
                        "src": "6625:18:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 4227,
                        "name": "_pricePerTicket",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4169,
                        "src": "6645:15:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        }
                      },
                      {
                        "id": 4228,
                        "name": "_minimumTicketsSold",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4173,
                        "src": "6662:19:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        },
                        {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      ],
                      "id": 4225,
                      "name": "fairRaffleFeeERC721",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5181,
                      "src": "6605:19:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$_t_uint128_$_t_uint64_$returns$_t_uint256_$",
                        "typeString": "function (address,uint128,uint64) view returns (uint256)"
                      }
                    },
                    "id": 4229,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6605:77:36",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6579:103:36"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 4238,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 4232,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "6701:3:36",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 4233,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "src": "6701:9:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "components": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 4236,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 4234,
                                "name": "OPENING_FEE",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4010,
                                "src": "6715:11:36",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "+",
                              "rightExpression": {
                                "id": 4235,
                                "name": "FAIR_RAFFLE_FEE",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4224,
                                "src": "6729:15:36",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "6715:29:36",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "id": 4237,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "6714:31:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "6701:44:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "496e636f727265637420666565732073656e74",
                        "id": 4239,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6747:21:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_ecfcb372796e10e3e3235af9350c84c2e9f43065bee6b8ef2766eba6fc5fe099",
                          "typeString": "literal_string \"Incorrect fees sent\""
                        },
                        "value": "Incorrect fees sent"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_ecfcb372796e10e3e3235af9350c84c2e9f43065bee6b8ef2766eba6fc5fe099",
                          "typeString": "literal_string \"Incorrect fees sent\""
                        }
                      ],
                      "id": 4231,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6693:7:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4240,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6693:76:36",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4241,
                  "nodeType": "ExpressionStatement",
                  "src": "6693:76:36"
                },
                {
                  "expression": {
                    "id": 4249,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 4242,
                        "name": "totalAmountClaimable",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4021,
                        "src": "6779:20:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 4247,
                      "indexExpression": {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 4245,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "6808:1:36",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 4244,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "6800:7:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 4243,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "6800:7:36",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 4246,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6800:10:36",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "6779:32:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "id": 4248,
                      "name": "OPENING_FEE",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4010,
                      "src": "6815:11:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "6779:47:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 4250,
                  "nodeType": "ExpressionStatement",
                  "src": "6779:47:36"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 4255,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "6923:3:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 4256,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "6923:10:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "id": 4259,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -28,
                            "src": "6943:4:36",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_MockMainnetEscrow_$5182",
                              "typeString": "contract MockMainnetEscrow"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_MockMainnetEscrow_$5182",
                              "typeString": "contract MockMainnetEscrow"
                            }
                          ],
                          "id": 4258,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "6935:7:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 4257,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "6935:7:36",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 4260,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6935:13:36",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 4261,
                        "name": "_nftId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4165,
                        "src": "6950:6:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "id": 4252,
                            "name": "_nftCollection",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4163,
                            "src": "6894:14:36",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 4251,
                          "name": "IERC721",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 8987,
                          "src": "6886:7:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_IERC721_$8987_$",
                            "typeString": "type(contract IERC721)"
                          }
                        },
                        "id": 4253,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6886:23:36",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC721_$8987",
                          "typeString": "contract IERC721"
                        }
                      },
                      "id": 4254,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "transferFrom",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 8940,
                      "src": "6886:36:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256) external"
                      }
                    },
                    "id": 4262,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6886:71:36",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4263,
                  "nodeType": "ExpressionStatement",
                  "src": "6886:71:36"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 4275,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "arguments": [
                            {
                              "id": 4267,
                              "name": "this",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -28,
                              "src": "6983:4:36",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_MockMainnetEscrow_$5182",
                                "typeString": "contract MockMainnetEscrow"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_MockMainnetEscrow_$5182",
                                "typeString": "contract MockMainnetEscrow"
                              }
                            ],
                            "id": 4266,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "6975:7:36",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 4265,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "6975:7:36",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 4268,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6975:13:36",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "arguments": [
                            {
                              "id": 4273,
                              "name": "_nftId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4165,
                              "src": "7024:6:36",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint128",
                                "typeString": "uint128"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint128",
                                "typeString": "uint128"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 4270,
                                  "name": "_nftCollection",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4163,
                                  "src": "7000:14:36",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 4269,
                                "name": "IERC721",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 8987,
                                "src": "6992:7:36",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_IERC721_$8987_$",
                                  "typeString": "type(contract IERC721)"
                                }
                              },
                              "id": 4271,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "6992:23:36",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC721_$8987",
                                "typeString": "contract IERC721"
                              }
                            },
                            "id": 4272,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "ownerOf",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 8920,
                            "src": "6992:31:36",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_address_$",
                              "typeString": "function (uint256) view external returns (address)"
                            }
                          },
                          "id": 4274,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6992:39:36",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "6975:56:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5472616e73666572206661696c6564",
                        "id": 4276,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7033:17:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51",
                          "typeString": "literal_string \"Transfer failed\""
                        },
                        "value": "Transfer failed"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51",
                          "typeString": "literal_string \"Transfer failed\""
                        }
                      ],
                      "id": 4264,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6967:7:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4277,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6967:84:36",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4278,
                  "nodeType": "ExpressionStatement",
                  "src": "6967:84:36"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 4280,
                        "name": "_nftCollection",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4163,
                        "src": "7094:14:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "expression": {
                          "id": 4281,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "7122:3:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 4282,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "7122:10:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "expression": {
                          "id": 4283,
                          "name": "RaffleType",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3987,
                          "src": "7146:10:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_RaffleType_$3987_$",
                            "typeString": "type(enum MockMainnetEscrow.RaffleType)"
                          }
                        },
                        "id": 4284,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberName": "ERC721",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 3985,
                        "src": "7146:17:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_RaffleType_$3987",
                          "typeString": "enum MockMainnetEscrow.RaffleType"
                        }
                      },
                      {
                        "id": 4285,
                        "name": "_nftId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4165,
                        "src": "7177:6:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        }
                      },
                      {
                        "id": 4286,
                        "name": "_currencyInPolygon",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4167,
                        "src": "7198:18:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 4287,
                        "name": "_pricePerTicket",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4169,
                        "src": "7231:15:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        }
                      },
                      {
                        "id": 4288,
                        "name": "_numberOfTickets",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4171,
                        "src": "7261:16:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      {
                        "id": 4289,
                        "name": "_minimumTicketsSold",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4173,
                        "src": "7292:19:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 4295,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "id": 4292,
                                "name": "block",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -4,
                                "src": "7333:5:36",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_block",
                                  "typeString": "block"
                                }
                              },
                              "id": 4293,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "timestamp",
                              "nodeType": "MemberAccess",
                              "src": "7333:15:36",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "+",
                            "rightExpression": {
                              "id": 4294,
                              "name": "_durationInSeconds",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4175,
                              "src": "7351:18:36",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint64",
                                "typeString": "uint64"
                              }
                            },
                            "src": "7333:36:36",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 4291,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "7326:6:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_uint64_$",
                            "typeString": "type(uint64)"
                          },
                          "typeName": {
                            "id": 4290,
                            "name": "uint64",
                            "nodeType": "ElementaryTypeName",
                            "src": "7326:6:36",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 4296,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "7326:44:36",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      {
                        "id": 4297,
                        "name": "_merkleRoot",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4177,
                        "src": "7385:11:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 4298,
                        "name": "FAIR_RAFFLE_FEE",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4224,
                        "src": "7410:15:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_enum$_RaffleType_$3987",
                          "typeString": "enum MockMainnetEscrow.RaffleType"
                        },
                        {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        },
                        {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 4279,
                      "name": "RaffleCreated",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4061,
                      "src": "7067:13:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_enum$_RaffleType_$3987_$_t_uint128_$_t_address_$_t_uint128_$_t_uint64_$_t_uint64_$_t_uint64_$_t_bytes32_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,enum MockMainnetEscrow.RaffleType,uint128,address,uint128,uint64,uint64,uint64,bytes32,uint256)"
                      }
                    },
                    "id": 4299,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7067:368:36",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4300,
                  "nodeType": "EmitStatement",
                  "src": "7062:373:36"
                }
              ]
            },
            "documentation": {
              "id": 4161,
              "nodeType": "StructuredDocumentation",
              "src": "4735:1030:36",
              "text": " @notice  Allows users to create a raffle of an ERC721 asset\n @param   _nftCollection Address of the NFT to raffle\n @param   _nftId NFTid of the _nftCollection\n @param   _currencyInPolygon Polygon ERC20 token address used to buy tickets. address(0) should be put here if the currency will be MATIC\n @param   _pricePerTicket Price per ticket. It can be zero in case of an \"airdrop\"\n @param   _numberOfTickets Number of tickets that will be sold as maximum in the raffle\n @param   _minimumTicketsSold Number of tickets that should be sold in order to be a success raffle. If this minimum amount is not\nreached the owner of the raffle will be able to cancel the raffle, returning the users their payment plus a little collateral to cover\nfor the gas fees. If this amount is reached, normal flow will be followed.\n @param   _durationInSeconds Duration in seconds of the raffle\n @param   _merkleRoot Used so only whitelisted users can buy raffle tickets"
            },
            "functionSelector": "23bbcb29",
            "id": 4302,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 4180,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 4179,
                  "name": "whenNotPaused",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 8520,
                  "src": "6009:13:36"
                },
                "nodeType": "ModifierInvocation",
                "src": "6009:13:36"
              }
            ],
            "name": "createERC721Raffle",
            "nameLocation": "5779:18:36",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4178,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4163,
                  "mutability": "mutable",
                  "name": "_nftCollection",
                  "nameLocation": "5806:14:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 4302,
                  "src": "5798:22:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4162,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5798:7:36",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4165,
                  "mutability": "mutable",
                  "name": "_nftId",
                  "nameLocation": "5830:6:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 4302,
                  "src": "5822:14:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint128",
                    "typeString": "uint128"
                  },
                  "typeName": {
                    "id": 4164,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "5822:7:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint128",
                      "typeString": "uint128"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4167,
                  "mutability": "mutable",
                  "name": "_currencyInPolygon",
                  "nameLocation": "5846:18:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 4302,
                  "src": "5838:26:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4166,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5838:7:36",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4169,
                  "mutability": "mutable",
                  "name": "_pricePerTicket",
                  "nameLocation": "5874:15:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 4302,
                  "src": "5866:23:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint128",
                    "typeString": "uint128"
                  },
                  "typeName": {
                    "id": 4168,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "5866:7:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint128",
                      "typeString": "uint128"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4171,
                  "mutability": "mutable",
                  "name": "_numberOfTickets",
                  "nameLocation": "5898:16:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 4302,
                  "src": "5891:23:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 4170,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "5891:6:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4173,
                  "mutability": "mutable",
                  "name": "_minimumTicketsSold",
                  "nameLocation": "5923:19:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 4302,
                  "src": "5916:26:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 4172,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "5916:6:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4175,
                  "mutability": "mutable",
                  "name": "_durationInSeconds",
                  "nameLocation": "5951:18:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 4302,
                  "src": "5944:25:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 4174,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "5944:6:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4177,
                  "mutability": "mutable",
                  "name": "_merkleRoot",
                  "nameLocation": "5979:11:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 4302,
                  "src": "5971:19:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 4176,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "5971:7:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5797:194:36"
            },
            "returnParameters": {
              "id": 4181,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6023:0:36"
            },
            "scope": 5182,
            "src": "5770:1672:36",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 4467,
              "nodeType": "Block",
              "src": "8773:1594:36",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "baseExpression": {
                          "id": 4325,
                          "name": "whitelistedCurrencies",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4002,
                          "src": "8791:21:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                            "typeString": "mapping(address => bool)"
                          }
                        },
                        "id": 4327,
                        "indexExpression": {
                          "id": 4326,
                          "name": "_currencyInPolygon",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4309,
                          "src": "8813:18:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "8791:41:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "546869732063757272656e6379206973206e6f742077686974656c6973746564",
                        "id": 4328,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8834:34:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_e6e79c33916e338d6d55620301a9b8b688543376846a0ab9b39c2c41eb09d772",
                          "typeString": "literal_string \"This currency is not whitelisted\""
                        },
                        "value": "This currency is not whitelisted"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_e6e79c33916e338d6d55620301a9b8b688543376846a0ab9b39c2c41eb09d772",
                          "typeString": "literal_string \"This currency is not whitelisted\""
                        }
                      ],
                      "id": 4324,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "8783:7:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4329,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8783:86:36",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4330,
                  "nodeType": "ExpressionStatement",
                  "src": "8783:86:36"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        "id": 4334,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 4332,
                          "name": "_numberOfTickets",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4313,
                          "src": "8887:16:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "hexValue": "31",
                          "id": 4333,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "8906:1:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1_by_1",
                            "typeString": "int_const 1"
                          },
                          "value": "1"
                        },
                        "src": "8887:20:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "526166666c6573206d7573742068617665206174206c656173742032207469636b657473",
                        "id": 4335,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8909:38:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_7660643d80dd9192ee623d00569baaf2c967faabaa847adee71041e77f41d86e",
                          "typeString": "literal_string \"Raffles must have at least 2 tickets\""
                        },
                        "value": "Raffles must have at least 2 tickets"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_7660643d80dd9192ee623d00569baaf2c967faabaa847adee71041e77f41d86e",
                          "typeString": "literal_string \"Raffles must have at least 2 tickets\""
                        }
                      ],
                      "id": 4331,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "8879:7:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4336,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8879:69:36",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4337,
                  "nodeType": "ExpressionStatement",
                  "src": "8879:69:36"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        "id": 4341,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 4339,
                          "name": "_minimumTicketsSold",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4315,
                          "src": "8966:19:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<=",
                        "rightExpression": {
                          "id": 4340,
                          "name": "_numberOfTickets",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4313,
                          "src": "8989:16:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "src": "8966:39:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5f6d696e696d756d5469636b657473536f6c642073686f756c64203c3d205f6e756d6265724f665469636b657473",
                        "id": 4342,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9007:48:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_ac4d16b3d913981722bd2cab2e368bba364c7e45d84c336bacc6c435f110deeb",
                          "typeString": "literal_string \"_minimumTicketsSold should <= _numberOfTickets\""
                        },
                        "value": "_minimumTicketsSold should <= _numberOfTickets"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_ac4d16b3d913981722bd2cab2e368bba364c7e45d84c336bacc6c435f110deeb",
                          "typeString": "literal_string \"_minimumTicketsSold should <= _numberOfTickets\""
                        }
                      ],
                      "id": 4338,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "8958:7:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4343,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8958:98:36",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4344,
                  "nodeType": "ExpressionStatement",
                  "src": "8958:98:36"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        "id": 4348,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 4346,
                          "name": "_durationInSeconds",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4317,
                          "src": "9074:18:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "hexValue": "3433323030",
                          "id": 4347,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "9096:5:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_43200_by_1",
                            "typeString": "int_const 43200"
                          },
                          "value": "43200"
                        },
                        "src": "9074:27:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4d696e696d756d206475726174696f6e20697320313220686f757273",
                        "id": 4349,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9103:30:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_f6ecce682c7d2f371b2ac2285c9d5506451577dde58a239feb6bcc18a09cb625",
                          "typeString": "literal_string \"Minimum duration is 12 hours\""
                        },
                        "value": "Minimum duration is 12 hours"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_f6ecce682c7d2f371b2ac2285c9d5506451577dde58a239feb6bcc18a09cb625",
                          "typeString": "literal_string \"Minimum duration is 12 hours\""
                        }
                      ],
                      "id": 4345,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "9066:7:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4350,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9066:68:36",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4351,
                  "nodeType": "ExpressionStatement",
                  "src": "9066:68:36"
                },
                {
                  "assignments": [
                    4353
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4353,
                      "mutability": "mutable",
                      "name": "FAIR_RAFFLE_FEE",
                      "nameLocation": "9161:15:36",
                      "nodeType": "VariableDeclaration",
                      "scope": 4467,
                      "src": "9153:23:36",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 4352,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "9153:7:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 4362,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 4355,
                        "name": "_tokenAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4305,
                        "src": "9199:13:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 4356,
                        "name": "_amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4307,
                        "src": "9214:7:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        }
                      },
                      {
                        "id": 4357,
                        "name": "_currencyInPolygon",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4309,
                        "src": "9223:18:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 4358,
                        "name": "_pricePerTicket",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4311,
                        "src": "9243:15:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        }
                      },
                      {
                        "id": 4359,
                        "name": "_numberOfTickets",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4313,
                        "src": "9260:16:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      {
                        "id": 4360,
                        "name": "_minimumTicketsSold",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4315,
                        "src": "9278:19:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        },
                        {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      ],
                      "id": 4354,
                      "name": "fairRaffleFeeERC20",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5121,
                      "src": "9179:18:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$_t_uint128_$_t_address_$_t_uint128_$_t_uint64_$_t_uint64_$returns$_t_uint256_$",
                        "typeString": "function (address,uint128,address,uint128,uint64,uint64) view returns (uint256)"
                      }
                    },
                    "id": 4361,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9179:119:36",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "9153:145:36"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 4368,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 4363,
                      "name": "_tokenAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4305,
                      "src": "9313:13:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [
                        {
                          "hexValue": "30",
                          "id": 4366,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "9338:1:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          }
                        ],
                        "id": 4365,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "9330:7:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_$",
                          "typeString": "type(address)"
                        },
                        "typeName": {
                          "id": 4364,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "9330:7:36",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 4367,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "9330:10:36",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "9313:27:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 4434,
                    "nodeType": "Block",
                    "src": "9438:483:36",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 4384,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 4381,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -15,
                                  "src": "9460:3:36",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 4382,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "value",
                                "nodeType": "MemberAccess",
                                "src": "9460:9:36",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "id": 4383,
                                "name": "OPENING_FEE",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4010,
                                "src": "9473:11:36",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "9460:24:36",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "496e636f7272656374204f50454e494e475f4645452073656e74",
                              "id": 4385,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "9486:28:36",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_88d52ce92e9a3502cac8d0d9c45eb1b673317ac442c36e0b7b9c6247976b21b9",
                                "typeString": "literal_string \"Incorrect OPENING_FEE sent\""
                              },
                              "value": "Incorrect OPENING_FEE sent"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_88d52ce92e9a3502cac8d0d9c45eb1b673317ac442c36e0b7b9c6247976b21b9",
                                "typeString": "literal_string \"Incorrect OPENING_FEE sent\""
                              }
                            ],
                            "id": 4380,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "9452:7:36",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 4386,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9452:63:36",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 4387,
                        "nodeType": "ExpressionStatement",
                        "src": "9452:63:36"
                      },
                      {
                        "assignments": [
                          4389
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 4389,
                            "mutability": "mutable",
                            "name": "balanceBefore",
                            "nameLocation": "9537:13:36",
                            "nodeType": "VariableDeclaration",
                            "scope": 4434,
                            "src": "9529:21:36",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 4388,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "9529:7:36",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 4399,
                        "initialValue": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 4396,
                                  "name": "this",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -28,
                                  "src": "9593:4:36",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_MockMainnetEscrow_$5182",
                                    "typeString": "contract MockMainnetEscrow"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_MockMainnetEscrow_$5182",
                                    "typeString": "contract MockMainnetEscrow"
                                  }
                                ],
                                "id": 4395,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "9585:7:36",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 4394,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "9585:7:36",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 4397,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "9585:13:36",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 4391,
                                  "name": "_tokenAddress",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4305,
                                  "src": "9560:13:36",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 4390,
                                "name": "IERC20",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 8647,
                                "src": "9553:6:36",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_IERC20_$8647_$",
                                  "typeString": "type(contract IERC20)"
                                }
                              },
                              "id": 4392,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "9553:21:36",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC20_$8647",
                                "typeString": "contract IERC20"
                              }
                            },
                            "id": 4393,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "balanceOf",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 8586,
                            "src": "9553:31:36",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                              "typeString": "function (address) view external returns (uint256)"
                            }
                          },
                          "id": 4398,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9553:46:36",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "9529:70:36"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 4404,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "9699:3:36",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 4405,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "9699:10:36",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "arguments": [
                                {
                                  "id": 4408,
                                  "name": "this",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -28,
                                  "src": "9719:4:36",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_MockMainnetEscrow_$5182",
                                    "typeString": "contract MockMainnetEscrow"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_MockMainnetEscrow_$5182",
                                    "typeString": "contract MockMainnetEscrow"
                                  }
                                ],
                                "id": 4407,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "9711:7:36",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 4406,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "9711:7:36",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 4409,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "9711:13:36",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 4410,
                              "name": "_amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4307,
                              "src": "9726:7:36",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint128",
                                "typeString": "uint128"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint128",
                                "typeString": "uint128"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 4401,
                                  "name": "_tokenAddress",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4305,
                                  "src": "9667:13:36",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 4400,
                                "name": "IERC20",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 8647,
                                "src": "9660:6:36",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_IERC20_$8647_$",
                                  "typeString": "type(contract IERC20)"
                                }
                              },
                              "id": 4402,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "9660:21:36",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC20_$8647",
                                "typeString": "contract IERC20"
                              }
                            },
                            "id": 4403,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "safeTransferFrom",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 8704,
                            "src": "9660:38:36",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$8647_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$8647_$",
                              "typeString": "function (contract IERC20,address,address,uint256)"
                            }
                          },
                          "id": 4411,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9660:74:36",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 4412,
                        "nodeType": "ExpressionStatement",
                        "src": "9660:74:36"
                      },
                      {
                        "assignments": [
                          4414
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 4414,
                            "mutability": "mutable",
                            "name": "balanceAfter",
                            "nameLocation": "9756:12:36",
                            "nodeType": "VariableDeclaration",
                            "scope": 4434,
                            "src": "9748:20:36",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 4413,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "9748:7:36",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 4424,
                        "initialValue": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 4421,
                                  "name": "this",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -28,
                                  "src": "9811:4:36",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_MockMainnetEscrow_$5182",
                                    "typeString": "contract MockMainnetEscrow"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_MockMainnetEscrow_$5182",
                                    "typeString": "contract MockMainnetEscrow"
                                  }
                                ],
                                "id": 4420,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "9803:7:36",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 4419,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "9803:7:36",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 4422,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "9803:13:36",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 4416,
                                  "name": "_tokenAddress",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4305,
                                  "src": "9778:13:36",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 4415,
                                "name": "IERC20",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 8647,
                                "src": "9771:6:36",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_IERC20_$8647_$",
                                  "typeString": "type(contract IERC20)"
                                }
                              },
                              "id": 4417,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "9771:21:36",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC20_$8647",
                                "typeString": "contract IERC20"
                              }
                            },
                            "id": 4418,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "balanceOf",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 8586,
                            "src": "9771:31:36",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                              "typeString": "function (address) view external returns (uint256)"
                            }
                          },
                          "id": 4423,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9771:46:36",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "9748:69:36"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 4430,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 4426,
                                "name": "_amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4307,
                                "src": "9839:7:36",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint128",
                                  "typeString": "uint128"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 4429,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 4427,
                                  "name": "balanceAfter",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4414,
                                  "src": "9850:12:36",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "-",
                                "rightExpression": {
                                  "id": 4428,
                                  "name": "balanceBefore",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4389,
                                  "src": "9865:13:36",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "9850:28:36",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "9839:39:36",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "455243323020746f6b656e207472616e73666572206661696c6564",
                              "id": 4431,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "9880:29:36",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_09d7cbc760a5fb9ceb7ce3a996d579f34d61d7bf70c73104e2b38c60f3738442",
                                "typeString": "literal_string \"ERC20 token transfer failed\""
                              },
                              "value": "ERC20 token transfer failed"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_09d7cbc760a5fb9ceb7ce3a996d579f34d61d7bf70c73104e2b38c60f3738442",
                                "typeString": "literal_string \"ERC20 token transfer failed\""
                              }
                            ],
                            "id": 4425,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "9831:7:36",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 4432,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9831:79:36",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 4433,
                        "nodeType": "ExpressionStatement",
                        "src": "9831:79:36"
                      }
                    ]
                  },
                  "id": 4435,
                  "nodeType": "IfStatement",
                  "src": "9309:612:36",
                  "trueBody": {
                    "id": 4379,
                    "nodeType": "Block",
                    "src": "9342:90:36",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 4375,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 4370,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -15,
                                  "src": "9364:3:36",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 4371,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "value",
                                "nodeType": "MemberAccess",
                                "src": "9364:9:36",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 4374,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 4372,
                                  "name": "_amount",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4307,
                                  "src": "9377:7:36",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint128",
                                    "typeString": "uint128"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "+",
                                "rightExpression": {
                                  "id": 4373,
                                  "name": "OPENING_FEE",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4010,
                                  "src": "9387:11:36",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "9377:21:36",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "9364:34:36",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "496e636f7272656374206665652073656e74",
                              "id": 4376,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "9400:20:36",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_d8aa68f6b196d979432cbf9187add9bff0d380590941734a82e3959e6f449500",
                                "typeString": "literal_string \"Incorrect fee sent\""
                              },
                              "value": "Incorrect fee sent"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_d8aa68f6b196d979432cbf9187add9bff0d380590941734a82e3959e6f449500",
                                "typeString": "literal_string \"Incorrect fee sent\""
                              }
                            ],
                            "id": 4369,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "9356:7:36",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 4377,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9356:65:36",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 4378,
                        "nodeType": "ExpressionStatement",
                        "src": "9356:65:36"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "id": 4443,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 4436,
                        "name": "totalAmountClaimable",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4021,
                        "src": "9931:20:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 4441,
                      "indexExpression": {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 4439,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "9960:1:36",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 4438,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "9952:7:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 4437,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "9952:7:36",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 4440,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "9952:10:36",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "9931:32:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "id": 4442,
                      "name": "OPENING_FEE",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4010,
                      "src": "9967:11:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "9931:47:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 4444,
                  "nodeType": "ExpressionStatement",
                  "src": "9931:47:36"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 4446,
                        "name": "_tokenAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4305,
                        "src": "10020:13:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "expression": {
                          "id": 4447,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "10047:3:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 4448,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "10047:10:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "expression": {
                          "id": 4449,
                          "name": "RaffleType",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3987,
                          "src": "10071:10:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_RaffleType_$3987_$",
                            "typeString": "type(enum MockMainnetEscrow.RaffleType)"
                          }
                        },
                        "id": 4450,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberName": "ERC20",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 3986,
                        "src": "10071:16:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_RaffleType_$3987",
                          "typeString": "enum MockMainnetEscrow.RaffleType"
                        }
                      },
                      {
                        "id": 4451,
                        "name": "_amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4307,
                        "src": "10101:7:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        }
                      },
                      {
                        "id": 4452,
                        "name": "_currencyInPolygon",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4309,
                        "src": "10123:18:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 4453,
                        "name": "_pricePerTicket",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4311,
                        "src": "10156:15:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        }
                      },
                      {
                        "id": 4454,
                        "name": "_numberOfTickets",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4313,
                        "src": "10186:16:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      {
                        "id": 4455,
                        "name": "_minimumTicketsSold",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4315,
                        "src": "10217:19:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 4461,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "id": 4458,
                                "name": "block",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -4,
                                "src": "10258:5:36",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_block",
                                  "typeString": "block"
                                }
                              },
                              "id": 4459,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "timestamp",
                              "nodeType": "MemberAccess",
                              "src": "10258:15:36",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "+",
                            "rightExpression": {
                              "id": 4460,
                              "name": "_durationInSeconds",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4317,
                              "src": "10276:18:36",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint64",
                                "typeString": "uint64"
                              }
                            },
                            "src": "10258:36:36",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 4457,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "10251:6:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_uint64_$",
                            "typeString": "type(uint64)"
                          },
                          "typeName": {
                            "id": 4456,
                            "name": "uint64",
                            "nodeType": "ElementaryTypeName",
                            "src": "10251:6:36",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 4462,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "10251:44:36",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      {
                        "id": 4463,
                        "name": "_merkleRoot",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4319,
                        "src": "10310:11:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 4464,
                        "name": "FAIR_RAFFLE_FEE",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4353,
                        "src": "10335:15:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_enum$_RaffleType_$3987",
                          "typeString": "enum MockMainnetEscrow.RaffleType"
                        },
                        {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        },
                        {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 4445,
                      "name": "RaffleCreated",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4061,
                      "src": "9993:13:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_enum$_RaffleType_$3987_$_t_uint128_$_t_address_$_t_uint128_$_t_uint64_$_t_uint64_$_t_uint64_$_t_bytes32_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,enum MockMainnetEscrow.RaffleType,uint128,address,uint128,uint64,uint64,uint64,bytes32,uint256)"
                      }
                    },
                    "id": 4465,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9993:367:36",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4466,
                  "nodeType": "EmitStatement",
                  "src": "9988:372:36"
                }
              ]
            },
            "documentation": {
              "id": 4303,
              "nodeType": "StructuredDocumentation",
              "src": "7448:1068:36",
              "text": " @notice  Allows users to create a raffle of an ERC20 asset\n @param   _tokenAddress Address of the token amount to raffle\n @param   _amount Quantity of tokens to be raffled\n @param   _currencyInPolygon Polygon ERC20 token address used to buy tickets. address(0) should be put here if the currency will be MATIC\n @param   _pricePerTicket Price per ticket. It can be zero in case of an \"airdrop\"\n @param   _numberOfTickets Number of tickets that will be sold as maximum in the raffle\n @param   _minimumTicketsSold Number of tickets that should be sold in order to be a success raffle. If this minimum amount is not\nreached the owner of the raffle will be able to cancel the raffle, returning the users their payment plus a little collateral to cover\nfor the gas fees. If this amount is reached, normal flow will be followed\n @param   _durationInSeconds Duration in seconds of the raffle\n @param   _merkleRoot Used so only whitelisted users can buy raffle tickets"
            },
            "functionSelector": "b3f8d40d",
            "id": 4468,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 4322,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 4321,
                  "name": "whenNotPaused",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 8520,
                  "src": "8759:13:36"
                },
                "nodeType": "ModifierInvocation",
                "src": "8759:13:36"
              }
            ],
            "name": "createERC20Raffle",
            "nameLocation": "8530:17:36",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4320,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4305,
                  "mutability": "mutable",
                  "name": "_tokenAddress",
                  "nameLocation": "8556:13:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 4468,
                  "src": "8548:21:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4304,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8548:7:36",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4307,
                  "mutability": "mutable",
                  "name": "_amount",
                  "nameLocation": "8579:7:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 4468,
                  "src": "8571:15:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint128",
                    "typeString": "uint128"
                  },
                  "typeName": {
                    "id": 4306,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "8571:7:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint128",
                      "typeString": "uint128"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4309,
                  "mutability": "mutable",
                  "name": "_currencyInPolygon",
                  "nameLocation": "8596:18:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 4468,
                  "src": "8588:26:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4308,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8588:7:36",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4311,
                  "mutability": "mutable",
                  "name": "_pricePerTicket",
                  "nameLocation": "8624:15:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 4468,
                  "src": "8616:23:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint128",
                    "typeString": "uint128"
                  },
                  "typeName": {
                    "id": 4310,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "8616:7:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint128",
                      "typeString": "uint128"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4313,
                  "mutability": "mutable",
                  "name": "_numberOfTickets",
                  "nameLocation": "8648:16:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 4468,
                  "src": "8641:23:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 4312,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "8641:6:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4315,
                  "mutability": "mutable",
                  "name": "_minimumTicketsSold",
                  "nameLocation": "8673:19:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 4468,
                  "src": "8666:26:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 4314,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "8666:6:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4317,
                  "mutability": "mutable",
                  "name": "_durationInSeconds",
                  "nameLocation": "8701:18:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 4468,
                  "src": "8694:25:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 4316,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "8694:6:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4319,
                  "mutability": "mutable",
                  "name": "_merkleRoot",
                  "nameLocation": "8729:11:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 4468,
                  "src": "8721:19:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 4318,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "8721:7:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8547:194:36"
            },
            "returnParameters": {
              "id": 4323,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8773:0:36"
            },
            "scope": 5182,
            "src": "8521:1846:36",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 4625,
              "nodeType": "Block",
              "src": "10535:1369:36",
              "statements": [
                {
                  "assignments": [
                    4477
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4477,
                      "mutability": "mutable",
                      "name": "len",
                      "nameLocation": "10553:3:36",
                      "nodeType": "VariableDeclaration",
                      "scope": 4625,
                      "src": "10545:11:36",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 4476,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "10545:7:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 4480,
                  "initialValue": {
                    "expression": {
                      "id": 4478,
                      "name": "callbackArr",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4473,
                      "src": "10559:11:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_struct$_CallbackInfo_$3998_memory_ptr_$dyn_memory_ptr",
                        "typeString": "struct MockMainnetEscrow.CallbackInfo memory[] memory"
                      }
                    },
                    "id": 4479,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "length",
                    "nodeType": "MemberAccess",
                    "src": "10559:18:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "10545:32:36"
                },
                {
                  "body": {
                    "id": 4623,
                    "nodeType": "Block",
                    "src": "10616:1282:36",
                    "statements": [
                      {
                        "condition": {
                          "expression": {
                            "baseExpression": {
                              "id": 4490,
                              "name": "callbackArr",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4473,
                              "src": "10633:11:36",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_CallbackInfo_$3998_memory_ptr_$dyn_memory_ptr",
                                "typeString": "struct MockMainnetEscrow.CallbackInfo memory[] memory"
                              }
                            },
                            "id": 4492,
                            "indexExpression": {
                              "id": 4491,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4482,
                              "src": "10645:1:36",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "10633:14:36",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_CallbackInfo_$3998_memory_ptr",
                              "typeString": "struct MockMainnetEscrow.CallbackInfo memory"
                            }
                          },
                          "id": 4493,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "isERC721",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 3993,
                          "src": "10633:23:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 4578,
                          "nodeType": "Block",
                          "src": "10918:482:36",
                          "statements": [
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                "id": 4535,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "baseExpression": {
                                      "id": 4527,
                                      "name": "callbackArr",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4473,
                                      "src": "10939:11:36",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_struct$_CallbackInfo_$3998_memory_ptr_$dyn_memory_ptr",
                                        "typeString": "struct MockMainnetEscrow.CallbackInfo memory[] memory"
                                      }
                                    },
                                    "id": 4529,
                                    "indexExpression": {
                                      "id": 4528,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4482,
                                      "src": "10951:1:36",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "10939:14:36",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_CallbackInfo_$3998_memory_ptr",
                                      "typeString": "struct MockMainnetEscrow.CallbackInfo memory"
                                    }
                                  },
                                  "id": 4530,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "receiver",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 3989,
                                  "src": "10939:23:36",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "!=",
                                "rightExpression": {
                                  "arguments": [
                                    {
                                      "hexValue": "30",
                                      "id": 4533,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "10974:1:36",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      }
                                    ],
                                    "id": 4532,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "10966:7:36",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 4531,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "10966:7:36",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 4534,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "10966:10:36",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "src": "10939:37:36",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 4577,
                              "nodeType": "IfStatement",
                              "src": "10936:450:36",
                              "trueBody": {
                                "id": 4576,
                                "nodeType": "Block",
                                "src": "10977:409:36",
                                "statements": [
                                  {
                                    "condition": {
                                      "commonType": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      },
                                      "id": 4544,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "expression": {
                                          "baseExpression": {
                                            "id": 4536,
                                            "name": "callbackArr",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 4473,
                                            "src": "11002:11:36",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_array$_t_struct$_CallbackInfo_$3998_memory_ptr_$dyn_memory_ptr",
                                              "typeString": "struct MockMainnetEscrow.CallbackInfo memory[] memory"
                                            }
                                          },
                                          "id": 4538,
                                          "indexExpression": {
                                            "id": 4537,
                                            "name": "i",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 4482,
                                            "src": "11014:1:36",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "nodeType": "IndexAccess",
                                          "src": "11002:14:36",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_CallbackInfo_$3998_memory_ptr",
                                            "typeString": "struct MockMainnetEscrow.CallbackInfo memory"
                                          }
                                        },
                                        "id": 4539,
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "assetContract",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 3991,
                                        "src": "11002:28:36",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "==",
                                      "rightExpression": {
                                        "arguments": [
                                          {
                                            "hexValue": "30",
                                            "id": 4542,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "kind": "number",
                                            "lValueRequested": false,
                                            "nodeType": "Literal",
                                            "src": "11042:1:36",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_rational_0_by_1",
                                              "typeString": "int_const 0"
                                            },
                                            "value": "0"
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": [
                                            {
                                              "typeIdentifier": "t_rational_0_by_1",
                                              "typeString": "int_const 0"
                                            }
                                          ],
                                          "id": 4541,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "lValueRequested": false,
                                          "nodeType": "ElementaryTypeNameExpression",
                                          "src": "11034:7:36",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_type$_t_address_$",
                                            "typeString": "type(address)"
                                          },
                                          "typeName": {
                                            "id": 4540,
                                            "name": "address",
                                            "nodeType": "ElementaryTypeName",
                                            "src": "11034:7:36",
                                            "typeDescriptions": {}
                                          }
                                        },
                                        "id": 4543,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "typeConversion",
                                        "lValueRequested": false,
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "11034:10:36",
                                        "tryCall": false,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      },
                                      "src": "11002:42:36",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "falseBody": {
                                      "id": 4574,
                                      "nodeType": "Block",
                                      "src": "11205:163:36",
                                      "statements": [
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "expression": {
                                                  "baseExpression": {
                                                    "id": 4564,
                                                    "name": "callbackArr",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 4473,
                                                    "src": "11281:11:36",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_array$_t_struct$_CallbackInfo_$3998_memory_ptr_$dyn_memory_ptr",
                                                      "typeString": "struct MockMainnetEscrow.CallbackInfo memory[] memory"
                                                    }
                                                  },
                                                  "id": 4566,
                                                  "indexExpression": {
                                                    "id": 4565,
                                                    "name": "i",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 4482,
                                                    "src": "11293:1:36",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_uint256",
                                                      "typeString": "uint256"
                                                    }
                                                  },
                                                  "isConstant": false,
                                                  "isLValue": true,
                                                  "isPure": false,
                                                  "lValueRequested": false,
                                                  "nodeType": "IndexAccess",
                                                  "src": "11281:14:36",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_struct$_CallbackInfo_$3998_memory_ptr",
                                                    "typeString": "struct MockMainnetEscrow.CallbackInfo memory"
                                                  }
                                                },
                                                "id": 4567,
                                                "isConstant": false,
                                                "isLValue": true,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "memberName": "receiver",
                                                "nodeType": "MemberAccess",
                                                "referencedDeclaration": 3989,
                                                "src": "11281:23:36",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_address",
                                                  "typeString": "address"
                                                }
                                              },
                                              {
                                                "expression": {
                                                  "baseExpression": {
                                                    "id": 4568,
                                                    "name": "callbackArr",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 4473,
                                                    "src": "11306:11:36",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_array$_t_struct$_CallbackInfo_$3998_memory_ptr_$dyn_memory_ptr",
                                                      "typeString": "struct MockMainnetEscrow.CallbackInfo memory[] memory"
                                                    }
                                                  },
                                                  "id": 4570,
                                                  "indexExpression": {
                                                    "id": 4569,
                                                    "name": "i",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 4482,
                                                    "src": "11318:1:36",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_uint256",
                                                      "typeString": "uint256"
                                                    }
                                                  },
                                                  "isConstant": false,
                                                  "isLValue": true,
                                                  "isPure": false,
                                                  "lValueRequested": false,
                                                  "nodeType": "IndexAccess",
                                                  "src": "11306:14:36",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_struct$_CallbackInfo_$3998_memory_ptr",
                                                    "typeString": "struct MockMainnetEscrow.CallbackInfo memory"
                                                  }
                                                },
                                                "id": 4571,
                                                "isConstant": false,
                                                "isLValue": true,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "memberName": "amountOrNftIdToReceiver",
                                                "nodeType": "MemberAccess",
                                                "referencedDeclaration": 3995,
                                                "src": "11306:38:36",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                }
                                              }
                                            ],
                                            "expression": {
                                              "argumentTypes": [
                                                {
                                                  "typeIdentifier": "t_address",
                                                  "typeString": "address"
                                                },
                                                {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                }
                                              ],
                                              "expression": {
                                                "arguments": [
                                                  {
                                                    "expression": {
                                                      "baseExpression": {
                                                        "id": 4558,
                                                        "name": "callbackArr",
                                                        "nodeType": "Identifier",
                                                        "overloadedDeclarations": [],
                                                        "referencedDeclaration": 4473,
                                                        "src": "11238:11:36",
                                                        "typeDescriptions": {
                                                          "typeIdentifier": "t_array$_t_struct$_CallbackInfo_$3998_memory_ptr_$dyn_memory_ptr",
                                                          "typeString": "struct MockMainnetEscrow.CallbackInfo memory[] memory"
                                                        }
                                                      },
                                                      "id": 4560,
                                                      "indexExpression": {
                                                        "id": 4559,
                                                        "name": "i",
                                                        "nodeType": "Identifier",
                                                        "overloadedDeclarations": [],
                                                        "referencedDeclaration": 4482,
                                                        "src": "11250:1:36",
                                                        "typeDescriptions": {
                                                          "typeIdentifier": "t_uint256",
                                                          "typeString": "uint256"
                                                        }
                                                      },
                                                      "isConstant": false,
                                                      "isLValue": true,
                                                      "isPure": false,
                                                      "lValueRequested": false,
                                                      "nodeType": "IndexAccess",
                                                      "src": "11238:14:36",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_struct$_CallbackInfo_$3998_memory_ptr",
                                                        "typeString": "struct MockMainnetEscrow.CallbackInfo memory"
                                                      }
                                                    },
                                                    "id": 4561,
                                                    "isConstant": false,
                                                    "isLValue": true,
                                                    "isPure": false,
                                                    "lValueRequested": false,
                                                    "memberName": "assetContract",
                                                    "nodeType": "MemberAccess",
                                                    "referencedDeclaration": 3991,
                                                    "src": "11238:28:36",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_address",
                                                      "typeString": "address"
                                                    }
                                                  }
                                                ],
                                                "expression": {
                                                  "argumentTypes": [
                                                    {
                                                      "typeIdentifier": "t_address",
                                                      "typeString": "address"
                                                    }
                                                  ],
                                                  "id": 4557,
                                                  "name": "IERC20",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 8647,
                                                  "src": "11231:6:36",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_type$_t_contract$_IERC20_$8647_$",
                                                    "typeString": "type(contract IERC20)"
                                                  }
                                                },
                                                "id": 4562,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "kind": "typeConversion",
                                                "lValueRequested": false,
                                                "names": [],
                                                "nodeType": "FunctionCall",
                                                "src": "11231:36:36",
                                                "tryCall": false,
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_contract$_IERC20_$8647",
                                                  "typeString": "contract IERC20"
                                                }
                                              },
                                              "id": 4563,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "memberName": "safeTransfer",
                                              "nodeType": "MemberAccess",
                                              "referencedDeclaration": 8678,
                                              "src": "11231:49:36",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$8647_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$8647_$",
                                                "typeString": "function (contract IERC20,address,uint256)"
                                              }
                                            },
                                            "id": 4572,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "kind": "functionCall",
                                            "lValueRequested": false,
                                            "names": [],
                                            "nodeType": "FunctionCall",
                                            "src": "11231:114:36",
                                            "tryCall": false,
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_tuple$__$",
                                              "typeString": "tuple()"
                                            }
                                          },
                                          "id": 4573,
                                          "nodeType": "ExpressionStatement",
                                          "src": "11231:114:36"
                                        }
                                      ]
                                    },
                                    "id": 4575,
                                    "nodeType": "IfStatement",
                                    "src": "10999:369:36",
                                    "trueBody": {
                                      "id": 4556,
                                      "nodeType": "Block",
                                      "src": "11045:134:36",
                                      "statements": [
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "expression": {
                                                  "baseExpression": {
                                                    "id": 4546,
                                                    "name": "callbackArr",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 4473,
                                                    "src": "11092:11:36",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_array$_t_struct$_CallbackInfo_$3998_memory_ptr_$dyn_memory_ptr",
                                                      "typeString": "struct MockMainnetEscrow.CallbackInfo memory[] memory"
                                                    }
                                                  },
                                                  "id": 4548,
                                                  "indexExpression": {
                                                    "id": 4547,
                                                    "name": "i",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 4482,
                                                    "src": "11104:1:36",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_uint256",
                                                      "typeString": "uint256"
                                                    }
                                                  },
                                                  "isConstant": false,
                                                  "isLValue": true,
                                                  "isPure": false,
                                                  "lValueRequested": false,
                                                  "nodeType": "IndexAccess",
                                                  "src": "11092:14:36",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_struct$_CallbackInfo_$3998_memory_ptr",
                                                    "typeString": "struct MockMainnetEscrow.CallbackInfo memory"
                                                  }
                                                },
                                                "id": 4549,
                                                "isConstant": false,
                                                "isLValue": true,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "memberName": "receiver",
                                                "nodeType": "MemberAccess",
                                                "referencedDeclaration": 3989,
                                                "src": "11092:23:36",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_address",
                                                  "typeString": "address"
                                                }
                                              },
                                              {
                                                "expression": {
                                                  "baseExpression": {
                                                    "id": 4550,
                                                    "name": "callbackArr",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 4473,
                                                    "src": "11117:11:36",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_array$_t_struct$_CallbackInfo_$3998_memory_ptr_$dyn_memory_ptr",
                                                      "typeString": "struct MockMainnetEscrow.CallbackInfo memory[] memory"
                                                    }
                                                  },
                                                  "id": 4552,
                                                  "indexExpression": {
                                                    "id": 4551,
                                                    "name": "i",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 4482,
                                                    "src": "11129:1:36",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_uint256",
                                                      "typeString": "uint256"
                                                    }
                                                  },
                                                  "isConstant": false,
                                                  "isLValue": true,
                                                  "isPure": false,
                                                  "lValueRequested": false,
                                                  "nodeType": "IndexAccess",
                                                  "src": "11117:14:36",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_struct$_CallbackInfo_$3998_memory_ptr",
                                                    "typeString": "struct MockMainnetEscrow.CallbackInfo memory"
                                                  }
                                                },
                                                "id": 4553,
                                                "isConstant": false,
                                                "isLValue": true,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "memberName": "amountOrNftIdToReceiver",
                                                "nodeType": "MemberAccess",
                                                "referencedDeclaration": 3995,
                                                "src": "11117:38:36",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                }
                                              }
                                            ],
                                            "expression": {
                                              "argumentTypes": [
                                                {
                                                  "typeIdentifier": "t_address",
                                                  "typeString": "address"
                                                },
                                                {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                }
                                              ],
                                              "id": 4545,
                                              "name": "_handleEtherTransfer",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 4683,
                                              "src": "11071:20:36",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                                                "typeString": "function (address,uint256)"
                                              }
                                            },
                                            "id": 4554,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "kind": "functionCall",
                                            "lValueRequested": false,
                                            "names": [],
                                            "nodeType": "FunctionCall",
                                            "src": "11071:85:36",
                                            "tryCall": false,
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_tuple$__$",
                                              "typeString": "tuple()"
                                            }
                                          },
                                          "id": 4555,
                                          "nodeType": "ExpressionStatement",
                                          "src": "11071:85:36"
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        },
                        "id": 4579,
                        "nodeType": "IfStatement",
                        "src": "10630:770:36",
                        "trueBody": {
                          "id": 4526,
                          "nodeType": "Block",
                          "src": "10657:244:36",
                          "statements": [
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                "id": 4502,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "baseExpression": {
                                      "id": 4494,
                                      "name": "callbackArr",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4473,
                                      "src": "10678:11:36",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_struct$_CallbackInfo_$3998_memory_ptr_$dyn_memory_ptr",
                                        "typeString": "struct MockMainnetEscrow.CallbackInfo memory[] memory"
                                      }
                                    },
                                    "id": 4496,
                                    "indexExpression": {
                                      "id": 4495,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4482,
                                      "src": "10690:1:36",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "10678:14:36",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_CallbackInfo_$3998_memory_ptr",
                                      "typeString": "struct MockMainnetEscrow.CallbackInfo memory"
                                    }
                                  },
                                  "id": 4497,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "receiver",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 3989,
                                  "src": "10678:23:36",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "!=",
                                "rightExpression": {
                                  "arguments": [
                                    {
                                      "hexValue": "30",
                                      "id": 4500,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "10713:1:36",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      }
                                    ],
                                    "id": 4499,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "10705:7:36",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 4498,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "10705:7:36",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 4501,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "10705:10:36",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "src": "10678:37:36",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 4525,
                              "nodeType": "IfStatement",
                              "src": "10675:212:36",
                              "trueBody": {
                                "id": 4524,
                                "nodeType": "Block",
                                "src": "10716:171:36",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "id": 4512,
                                              "name": "this",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": -28,
                                              "src": "10797:4:36",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_contract$_MockMainnetEscrow_$5182",
                                                "typeString": "contract MockMainnetEscrow"
                                              }
                                            }
                                          ],
                                          "expression": {
                                            "argumentTypes": [
                                              {
                                                "typeIdentifier": "t_contract$_MockMainnetEscrow_$5182",
                                                "typeString": "contract MockMainnetEscrow"
                                              }
                                            ],
                                            "id": 4511,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "lValueRequested": false,
                                            "nodeType": "ElementaryTypeNameExpression",
                                            "src": "10789:7:36",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_type$_t_address_$",
                                              "typeString": "type(address)"
                                            },
                                            "typeName": {
                                              "id": 4510,
                                              "name": "address",
                                              "nodeType": "ElementaryTypeName",
                                              "src": "10789:7:36",
                                              "typeDescriptions": {}
                                            }
                                          },
                                          "id": 4513,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "kind": "typeConversion",
                                          "lValueRequested": false,
                                          "names": [],
                                          "nodeType": "FunctionCall",
                                          "src": "10789:13:36",
                                          "tryCall": false,
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        },
                                        {
                                          "expression": {
                                            "baseExpression": {
                                              "id": 4514,
                                              "name": "callbackArr",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 4473,
                                              "src": "10804:11:36",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_array$_t_struct$_CallbackInfo_$3998_memory_ptr_$dyn_memory_ptr",
                                                "typeString": "struct MockMainnetEscrow.CallbackInfo memory[] memory"
                                              }
                                            },
                                            "id": 4516,
                                            "indexExpression": {
                                              "id": 4515,
                                              "name": "i",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 4482,
                                              "src": "10816:1:36",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "nodeType": "IndexAccess",
                                            "src": "10804:14:36",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_struct$_CallbackInfo_$3998_memory_ptr",
                                              "typeString": "struct MockMainnetEscrow.CallbackInfo memory"
                                            }
                                          },
                                          "id": 4517,
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "receiver",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 3989,
                                          "src": "10804:23:36",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        },
                                        {
                                          "expression": {
                                            "baseExpression": {
                                              "id": 4518,
                                              "name": "callbackArr",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 4473,
                                              "src": "10829:11:36",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_array$_t_struct$_CallbackInfo_$3998_memory_ptr_$dyn_memory_ptr",
                                                "typeString": "struct MockMainnetEscrow.CallbackInfo memory[] memory"
                                              }
                                            },
                                            "id": 4520,
                                            "indexExpression": {
                                              "id": 4519,
                                              "name": "i",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 4482,
                                              "src": "10841:1:36",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "nodeType": "IndexAccess",
                                            "src": "10829:14:36",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_struct$_CallbackInfo_$3998_memory_ptr",
                                              "typeString": "struct MockMainnetEscrow.CallbackInfo memory"
                                            }
                                          },
                                          "id": 4521,
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "amountOrNftIdToReceiver",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 3995,
                                          "src": "10829:38:36",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          },
                                          {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          },
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        ],
                                        "expression": {
                                          "arguments": [
                                            {
                                              "expression": {
                                                "baseExpression": {
                                                  "id": 4504,
                                                  "name": "callbackArr",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 4473,
                                                  "src": "10746:11:36",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_array$_t_struct$_CallbackInfo_$3998_memory_ptr_$dyn_memory_ptr",
                                                    "typeString": "struct MockMainnetEscrow.CallbackInfo memory[] memory"
                                                  }
                                                },
                                                "id": 4506,
                                                "indexExpression": {
                                                  "id": 4505,
                                                  "name": "i",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 4482,
                                                  "src": "10758:1:36",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                  }
                                                },
                                                "isConstant": false,
                                                "isLValue": true,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "nodeType": "IndexAccess",
                                                "src": "10746:14:36",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_struct$_CallbackInfo_$3998_memory_ptr",
                                                  "typeString": "struct MockMainnetEscrow.CallbackInfo memory"
                                                }
                                              },
                                              "id": 4507,
                                              "isConstant": false,
                                              "isLValue": true,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "memberName": "assetContract",
                                              "nodeType": "MemberAccess",
                                              "referencedDeclaration": 3991,
                                              "src": "10746:28:36",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_address",
                                                "typeString": "address"
                                              }
                                            }
                                          ],
                                          "expression": {
                                            "argumentTypes": [
                                              {
                                                "typeIdentifier": "t_address",
                                                "typeString": "address"
                                              }
                                            ],
                                            "id": 4503,
                                            "name": "IERC721",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 8987,
                                            "src": "10738:7:36",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_type$_t_contract$_IERC721_$8987_$",
                                              "typeString": "type(contract IERC721)"
                                            }
                                          },
                                          "id": 4508,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "kind": "typeConversion",
                                          "lValueRequested": false,
                                          "names": [],
                                          "nodeType": "FunctionCall",
                                          "src": "10738:37:36",
                                          "tryCall": false,
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_contract$_IERC721_$8987",
                                            "typeString": "contract IERC721"
                                          }
                                        },
                                        "id": 4509,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "transferFrom",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 8940,
                                        "src": "10738:50:36",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                                          "typeString": "function (address,address,uint256) external"
                                        }
                                      },
                                      "id": 4522,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "10738:130:36",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_tuple$__$",
                                        "typeString": "tuple()"
                                      }
                                    },
                                    "id": 4523,
                                    "nodeType": "ExpressionStatement",
                                    "src": "10738:130:36"
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 4585,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "baseExpression": {
                                "id": 4580,
                                "name": "callbackArr",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4473,
                                "src": "11416:11:36",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_struct$_CallbackInfo_$3998_memory_ptr_$dyn_memory_ptr",
                                  "typeString": "struct MockMainnetEscrow.CallbackInfo memory[] memory"
                                }
                              },
                              "id": 4582,
                              "indexExpression": {
                                "id": 4581,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4482,
                                "src": "11428:1:36",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "11416:14:36",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_CallbackInfo_$3998_memory_ptr",
                                "typeString": "struct MockMainnetEscrow.CallbackInfo memory"
                              }
                            },
                            "id": 4583,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "increaseTotalAmountClaimable",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3997,
                            "src": "11416:43:36",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 4584,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "11462:1:36",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "11416:47:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 4599,
                        "nodeType": "IfStatement",
                        "src": "11413:181:36",
                        "trueBody": {
                          "id": 4598,
                          "nodeType": "Block",
                          "src": "11464:130:36",
                          "statements": [
                            {
                              "expression": {
                                "id": 4596,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "baseExpression": {
                                    "id": 4586,
                                    "name": "totalAmountClaimable",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4021,
                                    "src": "11482:20:36",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                      "typeString": "mapping(address => uint256)"
                                    }
                                  },
                                  "id": 4591,
                                  "indexExpression": {
                                    "expression": {
                                      "baseExpression": {
                                        "id": 4587,
                                        "name": "callbackArr",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 4473,
                                        "src": "11503:11:36",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_array$_t_struct$_CallbackInfo_$3998_memory_ptr_$dyn_memory_ptr",
                                          "typeString": "struct MockMainnetEscrow.CallbackInfo memory[] memory"
                                        }
                                      },
                                      "id": 4589,
                                      "indexExpression": {
                                        "id": 4588,
                                        "name": "i",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 4482,
                                        "src": "11515:1:36",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "IndexAccess",
                                      "src": "11503:14:36",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_CallbackInfo_$3998_memory_ptr",
                                        "typeString": "struct MockMainnetEscrow.CallbackInfo memory"
                                      }
                                    },
                                    "id": 4590,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "assetContract",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 3991,
                                    "src": "11503:28:36",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "11482:50:36",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "+=",
                                "rightHandSide": {
                                  "expression": {
                                    "baseExpression": {
                                      "id": 4592,
                                      "name": "callbackArr",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4473,
                                      "src": "11536:11:36",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_struct$_CallbackInfo_$3998_memory_ptr_$dyn_memory_ptr",
                                        "typeString": "struct MockMainnetEscrow.CallbackInfo memory[] memory"
                                      }
                                    },
                                    "id": 4594,
                                    "indexExpression": {
                                      "id": 4593,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4482,
                                      "src": "11548:1:36",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "11536:14:36",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_CallbackInfo_$3998_memory_ptr",
                                      "typeString": "struct MockMainnetEscrow.CallbackInfo memory"
                                    }
                                  },
                                  "id": 4595,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "increaseTotalAmountClaimable",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 3997,
                                  "src": "11536:43:36",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "11482:97:36",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 4597,
                              "nodeType": "ExpressionStatement",
                              "src": "11482:97:36"
                            }
                          ]
                        }
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "expression": {
                                "baseExpression": {
                                  "id": 4601,
                                  "name": "callbackArr",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4473,
                                  "src": "11646:11:36",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_struct$_CallbackInfo_$3998_memory_ptr_$dyn_memory_ptr",
                                    "typeString": "struct MockMainnetEscrow.CallbackInfo memory[] memory"
                                  }
                                },
                                "id": 4603,
                                "indexExpression": {
                                  "id": 4602,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4482,
                                  "src": "11658:1:36",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "11646:14:36",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_CallbackInfo_$3998_memory_ptr",
                                  "typeString": "struct MockMainnetEscrow.CallbackInfo memory"
                                }
                              },
                              "id": 4604,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "receiver",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3989,
                              "src": "11646:23:36",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "expression": {
                                "baseExpression": {
                                  "id": 4605,
                                  "name": "callbackArr",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4473,
                                  "src": "11687:11:36",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_struct$_CallbackInfo_$3998_memory_ptr_$dyn_memory_ptr",
                                    "typeString": "struct MockMainnetEscrow.CallbackInfo memory[] memory"
                                  }
                                },
                                "id": 4607,
                                "indexExpression": {
                                  "id": 4606,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4482,
                                  "src": "11699:1:36",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "11687:14:36",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_CallbackInfo_$3998_memory_ptr",
                                  "typeString": "struct MockMainnetEscrow.CallbackInfo memory"
                                }
                              },
                              "id": 4608,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "assetContract",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3991,
                              "src": "11687:28:36",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "expression": {
                                "baseExpression": {
                                  "id": 4609,
                                  "name": "callbackArr",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4473,
                                  "src": "11733:11:36",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_struct$_CallbackInfo_$3998_memory_ptr_$dyn_memory_ptr",
                                    "typeString": "struct MockMainnetEscrow.CallbackInfo memory[] memory"
                                  }
                                },
                                "id": 4611,
                                "indexExpression": {
                                  "id": 4610,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4482,
                                  "src": "11745:1:36",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "11733:14:36",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_CallbackInfo_$3998_memory_ptr",
                                  "typeString": "struct MockMainnetEscrow.CallbackInfo memory"
                                }
                              },
                              "id": 4612,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "isERC721",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3993,
                              "src": "11733:23:36",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "expression": {
                                "baseExpression": {
                                  "id": 4613,
                                  "name": "callbackArr",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4473,
                                  "src": "11774:11:36",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_struct$_CallbackInfo_$3998_memory_ptr_$dyn_memory_ptr",
                                    "typeString": "struct MockMainnetEscrow.CallbackInfo memory[] memory"
                                  }
                                },
                                "id": 4615,
                                "indexExpression": {
                                  "id": 4614,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4482,
                                  "src": "11786:1:36",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "11774:14:36",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_CallbackInfo_$3998_memory_ptr",
                                  "typeString": "struct MockMainnetEscrow.CallbackInfo memory"
                                }
                              },
                              "id": 4616,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "amountOrNftIdToReceiver",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3995,
                              "src": "11774:38:36",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "expression": {
                                "baseExpression": {
                                  "id": 4617,
                                  "name": "callbackArr",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4473,
                                  "src": "11830:11:36",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_struct$_CallbackInfo_$3998_memory_ptr_$dyn_memory_ptr",
                                    "typeString": "struct MockMainnetEscrow.CallbackInfo memory[] memory"
                                  }
                                },
                                "id": 4619,
                                "indexExpression": {
                                  "id": 4618,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4482,
                                  "src": "11842:1:36",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "11830:14:36",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_CallbackInfo_$3998_memory_ptr",
                                  "typeString": "struct MockMainnetEscrow.CallbackInfo memory"
                                }
                              },
                              "id": 4620,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "increaseTotalAmountClaimable",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3997,
                              "src": "11830:43:36",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 4600,
                            "name": "CallbackReceived",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4081,
                            "src": "11612:16:36",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$_t_uint256_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,bool,uint256,uint256)"
                            }
                          },
                          "id": 4621,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "11612:275:36",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 4622,
                        "nodeType": "EmitStatement",
                        "src": "11607:280:36"
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 4486,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 4484,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4482,
                      "src": "10603:1:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "id": 4485,
                      "name": "len",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4477,
                      "src": "10607:3:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "10603:7:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 4624,
                  "initializationExpression": {
                    "assignments": [
                      4482
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 4482,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "10600:1:36",
                        "nodeType": "VariableDeclaration",
                        "scope": 4624,
                        "src": "10592:9:36",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 4481,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "10592:7:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 4483,
                    "nodeType": "VariableDeclarationStatement",
                    "src": "10592:9:36"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 4488,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": true,
                      "src": "10612:3:36",
                      "subExpression": {
                        "id": 4487,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4482,
                        "src": "10614:1:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 4489,
                    "nodeType": "ExpressionStatement",
                    "src": "10612:3:36"
                  },
                  "nodeType": "ForStatement",
                  "src": "10587:1311:36"
                }
              ]
            },
            "documentation": {
              "id": 4469,
              "nodeType": "StructuredDocumentation",
              "src": "10373:88:36",
              "text": " @notice  Relayer will call this function to send updates from Polygon"
            },
            "functionSelector": "fcc76b80",
            "id": 4626,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "polygonCallback",
            "nameLocation": "10475:15:36",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4474,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4473,
                  "mutability": "mutable",
                  "name": "callbackArr",
                  "nameLocation": "10513:11:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 4626,
                  "src": "10491:33:36",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_CallbackInfo_$3998_memory_ptr_$dyn_memory_ptr",
                    "typeString": "struct MockMainnetEscrow.CallbackInfo[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 4471,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 4470,
                        "name": "CallbackInfo",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 3998,
                        "src": "10491:12:36"
                      },
                      "referencedDeclaration": 3998,
                      "src": "10491:12:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_CallbackInfo_$3998_storage_ptr",
                        "typeString": "struct MockMainnetEscrow.CallbackInfo"
                      }
                    },
                    "id": 4472,
                    "nodeType": "ArrayTypeName",
                    "src": "10491:14:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_CallbackInfo_$3998_storage_$dyn_storage_ptr",
                      "typeString": "struct MockMainnetEscrow.CallbackInfo[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10490:35:36"
            },
            "returnParameters": {
              "id": 4475,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "10535:0:36"
            },
            "scope": 5182,
            "src": "10466:1438:36",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 4682,
              "nodeType": "Block",
              "src": "12040:450:36",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 4641,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "arguments": [
                              {
                                "id": 4637,
                                "name": "this",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -28,
                                "src": "12096:4:36",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_MockMainnetEscrow_$5182",
                                  "typeString": "contract MockMainnetEscrow"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_MockMainnetEscrow_$5182",
                                  "typeString": "contract MockMainnetEscrow"
                                }
                              ],
                              "id": 4636,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "12088:7:36",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 4635,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "12088:7:36",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 4638,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "12088:13:36",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "id": 4639,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "balance",
                          "nodeType": "MemberAccess",
                          "src": "12088:21:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "id": 4640,
                          "name": "_amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4631,
                          "src": "12113:7:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "12088:32:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5f68616e646c6545746865725472616e7366657220696e736f6c76656e74",
                        "id": 4642,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "12122:32:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_08f09764248301849ca12ec32414900f6808533c90dcec20d40309c3da9b091e",
                          "typeString": "literal_string \"_handleEtherTransfer insolvent\""
                        },
                        "value": "_handleEtherTransfer insolvent"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_08f09764248301849ca12ec32414900f6808533c90dcec20d40309c3da9b091e",
                          "typeString": "literal_string \"_handleEtherTransfer insolvent\""
                        }
                      ],
                      "id": 4634,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "12080:7:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4643,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "12080:75:36",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4644,
                  "nodeType": "ExpressionStatement",
                  "src": "12080:75:36"
                },
                {
                  "assignments": [
                    4646
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4646,
                      "mutability": "mutable",
                      "name": "gas",
                      "nameLocation": "12173:3:36",
                      "nodeType": "VariableDeclaration",
                      "scope": 4682,
                      "src": "12165:11:36",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 4645,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "12165:7:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 4649,
                  "initialValue": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 4647,
                      "name": "gasleft",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -7,
                      "src": "12180:7:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_gasleft_view$__$returns$_t_uint256_$",
                        "typeString": "function () view returns (uint256)"
                      }
                    },
                    "id": 4648,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "12180:9:36",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "12165:24:36"
                },
                {
                  "assignments": [
                    4651,
                    null
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4651,
                      "mutability": "mutable",
                      "name": "success",
                      "nameLocation": "12205:7:36",
                      "nodeType": "VariableDeclaration",
                      "scope": 4682,
                      "src": "12200:12:36",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 4650,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "12200:4:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    },
                    null
                  ],
                  "id": 4659,
                  "initialValue": {
                    "arguments": [
                      {
                        "hexValue": "",
                        "id": 4657,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "12255:2:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        },
                        "value": ""
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                            "typeString": "literal_string \"\""
                          }
                        ],
                        "expression": {
                          "id": 4652,
                          "name": "_dest",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4629,
                          "src": "12218:5:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 4653,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "call",
                        "nodeType": "MemberAccess",
                        "src": "12218:10:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                          "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                        }
                      },
                      "id": 4656,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "names": [
                        "value",
                        "gas"
                      ],
                      "nodeType": "FunctionCallOptions",
                      "options": [
                        {
                          "id": 4654,
                          "name": "_amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4631,
                          "src": "12236:7:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 4655,
                          "name": "gas",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4646,
                          "src": "12250:3:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "src": "12218:36:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$gasvalue",
                        "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                      }
                    },
                    "id": 4658,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "12218:40:36",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                      "typeString": "tuple(bool,bytes memory)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "12199:59:36"
                },
                {
                  "condition": {
                    "id": 4661,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "12355:8:36",
                    "subExpression": {
                      "id": 4660,
                      "name": "success",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4651,
                      "src": "12356:7:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 4681,
                  "nodeType": "IfStatement",
                  "src": "12351:133:36",
                  "trueBody": {
                    "id": 4680,
                    "nodeType": "Block",
                    "src": "12365:119:36",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "argumentTypes": [],
                              "expression": {
                                "id": 4662,
                                "name": "WETH",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4008,
                                "src": "12379:4:36",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_IWETH_$9002",
                                  "typeString": "contract IWETH"
                                }
                              },
                              "id": 4664,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "deposit",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 8996,
                              "src": "12379:12:36",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_external_payable$__$returns$__$",
                                "typeString": "function () payable external"
                              }
                            },
                            "id": 4666,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "names": [
                              "value"
                            ],
                            "nodeType": "FunctionCallOptions",
                            "options": [
                              {
                                "id": 4665,
                                "name": "_amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4631,
                                "src": "12399:7:36",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "src": "12379:28:36",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_payable$__$returns$__$value",
                              "typeString": "function () payable external"
                            }
                          },
                          "id": 4667,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "12379:30:36",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 4668,
                        "nodeType": "ExpressionStatement",
                        "src": "12379:30:36"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 4676,
                              "name": "_dest",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4629,
                              "src": "12458:5:36",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 4677,
                              "name": "_amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4631,
                              "src": "12465:7:36",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "id": 4672,
                                      "name": "WETH",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4008,
                                      "src": "12438:4:36",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_IWETH_$9002",
                                        "typeString": "contract IWETH"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_contract$_IWETH_$9002",
                                        "typeString": "contract IWETH"
                                      }
                                    ],
                                    "id": 4671,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "12430:7:36",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 4670,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "12430:7:36",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 4673,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "12430:13:36",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 4669,
                                "name": "IERC20",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 8647,
                                "src": "12423:6:36",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_IERC20_$8647_$",
                                  "typeString": "type(contract IERC20)"
                                }
                              },
                              "id": 4674,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "12423:21:36",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC20_$8647",
                                "typeString": "contract IERC20"
                              }
                            },
                            "id": 4675,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "safeTransfer",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 8678,
                            "src": "12423:34:36",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$8647_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$8647_$",
                              "typeString": "function (contract IERC20,address,uint256)"
                            }
                          },
                          "id": 4678,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "12423:50:36",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 4679,
                        "nodeType": "ExpressionStatement",
                        "src": "12423:50:36"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": {
              "id": 4627,
              "nodeType": "StructuredDocumentation",
              "src": "11910:54:36",
              "text": "  Function to handle Ether transfers"
            },
            "id": 4683,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_handleEtherTransfer",
            "nameLocation": "11978:20:36",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4632,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4629,
                  "mutability": "mutable",
                  "name": "_dest",
                  "nameLocation": "12007:5:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 4683,
                  "src": "11999:13:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4628,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "11999:7:36",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4631,
                  "mutability": "mutable",
                  "name": "_amount",
                  "nameLocation": "12022:7:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 4683,
                  "src": "12014:15:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4630,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "12014:7:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11998:32:36"
            },
            "returnParameters": {
              "id": 4633,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "12040:0:36"
            },
            "scope": 5182,
            "src": "11969:521:36",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 4697,
              "nodeType": "Block",
              "src": "12865:65:36",
              "statements": [
                {
                  "condition": {
                    "id": 4689,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "12879:9:36",
                    "subExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 4687,
                        "name": "paused",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8508,
                        "src": "12880:6:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
                          "typeString": "function () view returns (bool)"
                        }
                      },
                      "id": 4688,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "12880:8:36",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "expression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 4693,
                        "name": "_unpause",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8563,
                        "src": "12913:8:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                          "typeString": "function ()"
                        }
                      },
                      "id": 4694,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "12913:10:36",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 4695,
                    "nodeType": "ExpressionStatement",
                    "src": "12913:10:36"
                  },
                  "id": 4696,
                  "nodeType": "IfStatement",
                  "src": "12875:48:36",
                  "trueBody": {
                    "expression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 4690,
                        "name": "_pause",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8547,
                        "src": "12890:6:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                          "typeString": "function ()"
                        }
                      },
                      "id": 4691,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "12890:8:36",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 4692,
                    "nodeType": "ExpressionStatement",
                    "src": "12890:8:36"
                  }
                }
              ]
            },
            "documentation": {
              "id": 4684,
              "nodeType": "StructuredDocumentation",
              "src": "12747:81:36",
              "text": " @notice  Used to pause/unpause the smart contract by the owner"
            },
            "functionSelector": "c4ae3168",
            "id": 4698,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "togglePause",
            "nameLocation": "12842:11:36",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4685,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "12853:2:36"
            },
            "returnParameters": {
              "id": 4686,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "12865:0:36"
            },
            "scope": 5182,
            "src": "12833:97:36",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 4713,
              "nodeType": "Block",
              "src": "13049:83:36",
              "statements": [
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 4705,
                        "name": "relayer",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4023,
                        "src": "13079:7:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 4706,
                        "name": "_relayer",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4701,
                        "src": "13088:8:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 4704,
                      "name": "RelayerUpdated",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4087,
                      "src": "13064:14:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
                        "typeString": "function (address,address)"
                      }
                    },
                    "id": 4707,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "13064:33:36",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4708,
                  "nodeType": "EmitStatement",
                  "src": "13059:38:36"
                },
                {
                  "expression": {
                    "id": 4711,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 4709,
                      "name": "relayer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4023,
                      "src": "13107:7:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 4710,
                      "name": "_relayer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4701,
                      "src": "13117:8:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "13107:18:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 4712,
                  "nodeType": "ExpressionStatement",
                  "src": "13107:18:36"
                }
              ]
            },
            "documentation": {
              "id": 4699,
              "nodeType": "StructuredDocumentation",
              "src": "12936:61:36",
              "text": " @notice  Used to set a new relayer account"
            },
            "functionSelector": "6548e9bc",
            "id": 4714,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "setRelayer",
            "nameLocation": "13011:10:36",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4702,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4701,
                  "mutability": "mutable",
                  "name": "_relayer",
                  "nameLocation": "13030:8:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 4714,
                  "src": "13022:16:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4700,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "13022:7:36",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13021:18:36"
            },
            "returnParameters": {
              "id": 4703,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "13049:0:36"
            },
            "scope": 5182,
            "src": "13002:130:36",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 4734,
              "nodeType": "Block",
              "src": "13274:154:36",
              "statements": [
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 4723,
                            "name": "currencyPriceFeed",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4026,
                            "src": "13314:17:36",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_ICurrencyPriceFeed_$3966",
                              "typeString": "contract ICurrencyPriceFeed"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_ICurrencyPriceFeed_$3966",
                              "typeString": "contract ICurrencyPriceFeed"
                            }
                          ],
                          "id": 4722,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "13306:7:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 4721,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "13306:7:36",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 4724,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "13306:26:36",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 4725,
                        "name": "_currencyPriceFeed",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4717,
                        "src": "13334:18:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 4720,
                      "name": "PriceFeedUpdated",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4093,
                      "src": "13289:16:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
                        "typeString": "function (address,address)"
                      }
                    },
                    "id": 4726,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "13289:64:36",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4727,
                  "nodeType": "EmitStatement",
                  "src": "13284:69:36"
                },
                {
                  "expression": {
                    "id": 4732,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 4728,
                      "name": "currencyPriceFeed",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4026,
                      "src": "13363:17:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_ICurrencyPriceFeed_$3966",
                        "typeString": "contract ICurrencyPriceFeed"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 4730,
                          "name": "_currencyPriceFeed",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4717,
                          "src": "13402:18:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 4729,
                        "name": "ICurrencyPriceFeed",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3966,
                        "src": "13383:18:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_ICurrencyPriceFeed_$3966_$",
                          "typeString": "type(contract ICurrencyPriceFeed)"
                        }
                      },
                      "id": 4731,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "13383:38:36",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_ICurrencyPriceFeed_$3966",
                        "typeString": "contract ICurrencyPriceFeed"
                      }
                    },
                    "src": "13363:58:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ICurrencyPriceFeed_$3966",
                      "typeString": "contract ICurrencyPriceFeed"
                    }
                  },
                  "id": 4733,
                  "nodeType": "ExpressionStatement",
                  "src": "13363:58:36"
                }
              ]
            },
            "documentation": {
              "id": 4715,
              "nodeType": "StructuredDocumentation",
              "src": "13138:72:36",
              "text": " @notice  Used to set a new CurrencyPriceFeed contract"
            },
            "functionSelector": "724e78da",
            "id": 4735,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "setPriceFeed",
            "nameLocation": "13224:12:36",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4718,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4717,
                  "mutability": "mutable",
                  "name": "_currencyPriceFeed",
                  "nameLocation": "13245:18:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 4735,
                  "src": "13237:26:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4716,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "13237:7:36",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13236:28:36"
            },
            "returnParameters": {
              "id": 4719,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "13274:0:36"
            },
            "scope": 5182,
            "src": "13215:213:36",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 4746,
              "nodeType": "Block",
              "src": "13563:55:36",
              "statements": [
                {
                  "expression": {
                    "id": 4744,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 4741,
                      "name": "priceFeedsEnabled",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4032,
                      "src": "13573:17:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 4743,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "!",
                      "prefix": true,
                      "src": "13593:18:36",
                      "subExpression": {
                        "id": 4742,
                        "name": "priceFeedsEnabled",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4032,
                        "src": "13594:17:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "13573:38:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 4745,
                  "nodeType": "ExpressionStatement",
                  "src": "13573:38:36"
                }
              ]
            },
            "documentation": {
              "id": 4736,
              "nodeType": "StructuredDocumentation",
              "src": "13434:78:36",
              "text": " @notice  Used to enable/disable CurrencyPriceFeeds contract"
            },
            "functionSelector": "c2f90a2b",
            "id": 4747,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 4739,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 4738,
                  "name": "onlyOwner",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 8395,
                  "src": "13553:9:36"
                },
                "nodeType": "ModifierInvocation",
                "src": "13553:9:36"
              }
            ],
            "name": "togglePriceFeed",
            "nameLocation": "13526:15:36",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4737,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "13541:2:36"
            },
            "returnParameters": {
              "id": 4740,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "13563:0:36"
            },
            "scope": 5182,
            "src": "13517:101:36",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 4762,
              "nodeType": "Block",
              "src": "13739:100:36",
              "statements": [
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 4754,
                        "name": "OPENING_FEE",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4010,
                        "src": "13772:11:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 4755,
                        "name": "_openingFee",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4750,
                        "src": "13785:11:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 4753,
                      "name": "OpeningFeeUpdated",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4099,
                      "src": "13754:17:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_uint256_$returns$__$",
                        "typeString": "function (uint256,uint256)"
                      }
                    },
                    "id": 4756,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "13754:43:36",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4757,
                  "nodeType": "EmitStatement",
                  "src": "13749:48:36"
                },
                {
                  "expression": {
                    "id": 4760,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 4758,
                      "name": "OPENING_FEE",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4010,
                      "src": "13807:11:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 4759,
                      "name": "_openingFee",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4750,
                      "src": "13821:11:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "13807:25:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 4761,
                  "nodeType": "ExpressionStatement",
                  "src": "13807:25:36"
                }
              ]
            },
            "documentation": {
              "id": 4748,
              "nodeType": "StructuredDocumentation",
              "src": "13624:57:36",
              "text": " @notice  Used to set a new OPENING_FEE"
            },
            "functionSelector": "86375994",
            "id": 4763,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "setOpeningFee",
            "nameLocation": "13695:13:36",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4751,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4750,
                  "mutability": "mutable",
                  "name": "_openingFee",
                  "nameLocation": "13717:11:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 4763,
                  "src": "13709:19:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4749,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13709:7:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13708:21:36"
            },
            "returnParameters": {
              "id": 4752,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "13739:0:36"
            },
            "scope": 5182,
            "src": "13686:153:36",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 4795,
              "nodeType": "Block",
              "src": "14198:325:36",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 4775,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "14216:49:36",
                        "subExpression": {
                          "baseExpression": {
                            "id": 4772,
                            "name": "whitelistedCurrencies",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4002,
                            "src": "14217:21:36",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                              "typeString": "mapping(address => bool)"
                            }
                          },
                          "id": 4774,
                          "indexExpression": {
                            "id": 4773,
                            "name": "_ERC20TokenAddressPolygon",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4766,
                            "src": "14239:25:36",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "14217:48:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "546f6b656e20697320616c72656164792077686974656c6973746564",
                        "id": 4776,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "14267:30:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_e4bc537df57a6469ec8f75da4f5b5b7d3b0db903b261a801ce98ccf8b9d40c42",
                          "typeString": "literal_string \"Token is already whitelisted\""
                        },
                        "value": "Token is already whitelisted"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_e4bc537df57a6469ec8f75da4f5b5b7d3b0db903b261a801ce98ccf8b9d40c42",
                          "typeString": "literal_string \"Token is already whitelisted\""
                        }
                      ],
                      "id": 4771,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "14208:7:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4777,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "14208:90:36",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4778,
                  "nodeType": "ExpressionStatement",
                  "src": "14208:90:36"
                },
                {
                  "expression": {
                    "id": 4783,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 4779,
                        "name": "whitelistedCurrencies",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4002,
                        "src": "14308:21:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        }
                      },
                      "id": 4781,
                      "indexExpression": {
                        "id": 4780,
                        "name": "_ERC20TokenAddressPolygon",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4766,
                        "src": "14330:25:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "14308:48:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 4782,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "14359:4:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "14308:55:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 4784,
                  "nodeType": "ExpressionStatement",
                  "src": "14308:55:36"
                },
                {
                  "expression": {
                    "id": 4789,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 4785,
                        "name": "polygonTokenToMainnetAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4030,
                        "src": "14373:28:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_address_$",
                          "typeString": "mapping(address => address)"
                        }
                      },
                      "id": 4787,
                      "indexExpression": {
                        "id": 4786,
                        "name": "_ERC20TokenAddressPolygon",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4766,
                        "src": "14402:25:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "14373:55:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 4788,
                      "name": "_ERC20TokenAddressMainnet",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4768,
                      "src": "14431:25:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "14373:83:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 4790,
                  "nodeType": "ExpressionStatement",
                  "src": "14373:83:36"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 4792,
                        "name": "_ERC20TokenAddressPolygon",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4766,
                        "src": "14490:25:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 4791,
                      "name": "ERC20CurrencyAdded",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4065,
                      "src": "14471:18:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 4793,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "14471:45:36",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4794,
                  "nodeType": "EmitStatement",
                  "src": "14466:50:36"
                }
              ]
            },
            "documentation": {
              "id": 4764,
              "nodeType": "StructuredDocumentation",
              "src": "13845:242:36",
              "text": " @notice  Used to whitelist a new ERC20 token to be used as a payment currency\n @param   _ERC20TokenAddressPolygon Address of the token in Polygon\n @param   _ERC20TokenAddressMainnet Address of the token in Mainnet"
            },
            "functionSelector": "34f65fa2",
            "id": 4796,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "whitelistCurrency",
            "nameLocation": "14101:17:36",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4769,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4766,
                  "mutability": "mutable",
                  "name": "_ERC20TokenAddressPolygon",
                  "nameLocation": "14127:25:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 4796,
                  "src": "14119:33:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4765,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "14119:7:36",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4768,
                  "mutability": "mutable",
                  "name": "_ERC20TokenAddressMainnet",
                  "nameLocation": "14162:25:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 4796,
                  "src": "14154:33:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4767,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "14154:7:36",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "14118:70:36"
            },
            "returnParameters": {
              "id": 4770,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "14198:0:36"
            },
            "scope": 5182,
            "src": "14092:431:36",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 4819,
              "nodeType": "Block",
              "src": "14719:230:36",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "baseExpression": {
                          "id": 4803,
                          "name": "whitelistedCurrencies",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4002,
                          "src": "14737:21:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                            "typeString": "mapping(address => bool)"
                          }
                        },
                        "id": 4805,
                        "indexExpression": {
                          "id": 4804,
                          "name": "_ERC20TokenAddressPolygon",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4799,
                          "src": "14759:25:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "14737:48:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "546f6b656e206973206e6f742077686974656c6973746564",
                        "id": 4806,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "14787:26:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_3395f9809cad89b82f806710991f9dc64a68908febe1bb335ef519bbf0cfcb71",
                          "typeString": "literal_string \"Token is not whitelisted\""
                        },
                        "value": "Token is not whitelisted"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_3395f9809cad89b82f806710991f9dc64a68908febe1bb335ef519bbf0cfcb71",
                          "typeString": "literal_string \"Token is not whitelisted\""
                        }
                      ],
                      "id": 4802,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "14729:7:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4807,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "14729:85:36",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4808,
                  "nodeType": "ExpressionStatement",
                  "src": "14729:85:36"
                },
                {
                  "expression": {
                    "id": 4813,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 4809,
                        "name": "whitelistedCurrencies",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4002,
                        "src": "14824:21:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        }
                      },
                      "id": 4811,
                      "indexExpression": {
                        "id": 4810,
                        "name": "_ERC20TokenAddressPolygon",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4799,
                        "src": "14846:25:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "14824:48:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "66616c7365",
                      "id": 4812,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "14875:5:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "false"
                    },
                    "src": "14824:56:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 4814,
                  "nodeType": "ExpressionStatement",
                  "src": "14824:56:36"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 4816,
                        "name": "_ERC20TokenAddressPolygon",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4799,
                        "src": "14916:25:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 4815,
                      "name": "ERC20CurrencyRemoved",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4069,
                      "src": "14895:20:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 4817,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "14895:47:36",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4818,
                  "nodeType": "EmitStatement",
                  "src": "14890:52:36"
                }
              ]
            },
            "documentation": {
              "id": 4797,
              "nodeType": "StructuredDocumentation",
              "src": "14529:114:36",
              "text": " @notice  Used to blacklist a ERC20 token so it can not be used any longer as a payment currency"
            },
            "functionSelector": "52defbd0",
            "id": 4820,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "blacklistCurrency",
            "nameLocation": "14657:17:36",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4800,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4799,
                  "mutability": "mutable",
                  "name": "_ERC20TokenAddressPolygon",
                  "nameLocation": "14683:25:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 4820,
                  "src": "14675:33:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4798,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "14675:7:36",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "14674:35:36"
            },
            "returnParameters": {
              "id": 4801,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "14719:0:36"
            },
            "scope": 5182,
            "src": "14648:301:36",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 4912,
              "nodeType": "Block",
              "src": "15345:800:36",
              "statements": [
                {
                  "assignments": [
                    4833
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4833,
                      "mutability": "mutable",
                      "name": "len",
                      "nameLocation": "15363:3:36",
                      "nodeType": "VariableDeclaration",
                      "scope": 4912,
                      "src": "15355:11:36",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 4832,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "15355:7:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 4836,
                  "initialValue": {
                    "expression": {
                      "id": 4834,
                      "name": "_tokenAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4824,
                      "src": "15369:13:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                        "typeString": "address[] calldata"
                      }
                    },
                    "id": 4835,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "length",
                    "nodeType": "MemberAccess",
                    "src": "15369:20:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "15355:34:36"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 4841,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 4838,
                          "name": "len",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4833,
                          "src": "15407:3:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "expression": {
                            "id": 4839,
                            "name": "_amounts",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4827,
                            "src": "15414:8:36",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                              "typeString": "uint256[] calldata"
                            }
                          },
                          "id": 4840,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "15414:15:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "15407:22:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4172726179206c656e6774687320646f206e6f74206d61746368",
                        "id": 4842,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "15431:28:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c9fda3bf08e7edf126ed19c887ac2339ed77973707baa0165c9c06cf0e4c6eb7",
                          "typeString": "literal_string \"Array lengths do not match\""
                        },
                        "value": "Array lengths do not match"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_c9fda3bf08e7edf126ed19c887ac2339ed77973707baa0165c9c06cf0e4c6eb7",
                          "typeString": "literal_string \"Array lengths do not match\""
                        }
                      ],
                      "id": 4837,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "15399:7:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4843,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "15399:61:36",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4844,
                  "nodeType": "ExpressionStatement",
                  "src": "15399:61:36"
                },
                {
                  "assignments": [
                    4846
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4846,
                      "mutability": "mutable",
                      "name": "amount",
                      "nameLocation": "15478:6:36",
                      "nodeType": "VariableDeclaration",
                      "scope": 4912,
                      "src": "15470:14:36",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 4845,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "15470:7:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 4847,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "15470:14:36"
                },
                {
                  "assignments": [
                    4849
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4849,
                      "mutability": "mutable",
                      "name": "tokenAddress",
                      "nameLocation": "15502:12:36",
                      "nodeType": "VariableDeclaration",
                      "scope": 4912,
                      "src": "15494:20:36",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 4848,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "15494:7:36",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 4850,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "15494:20:36"
                },
                {
                  "body": {
                    "id": 4910,
                    "nodeType": "Block",
                    "src": "15554:585:36",
                    "statements": [
                      {
                        "expression": {
                          "id": 4864,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 4860,
                            "name": "tokenAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4849,
                            "src": "15568:12:36",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "baseExpression": {
                              "id": 4861,
                              "name": "_tokenAddress",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4824,
                              "src": "15583:13:36",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                                "typeString": "address[] calldata"
                              }
                            },
                            "id": 4863,
                            "indexExpression": {
                              "id": 4862,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4852,
                              "src": "15597:1:36",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "15583:16:36",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "15568:31:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 4865,
                        "nodeType": "ExpressionStatement",
                        "src": "15568:31:36"
                      },
                      {
                        "expression": {
                          "id": 4870,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 4866,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4846,
                            "src": "15613:6:36",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "baseExpression": {
                              "id": 4867,
                              "name": "_amounts",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4827,
                              "src": "15622:8:36",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                                "typeString": "uint256[] calldata"
                              }
                            },
                            "id": 4869,
                            "indexExpression": {
                              "id": 4868,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4852,
                              "src": "15631:1:36",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "15622:11:36",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "15613:20:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 4871,
                        "nodeType": "ExpressionStatement",
                        "src": "15613:20:36"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 4877,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 4873,
                                "name": "amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4846,
                                "src": "15655:6:36",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<=",
                              "rightExpression": {
                                "baseExpression": {
                                  "id": 4874,
                                  "name": "totalAmountClaimable",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4021,
                                  "src": "15665:20:36",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                    "typeString": "mapping(address => uint256)"
                                  }
                                },
                                "id": 4876,
                                "indexExpression": {
                                  "id": 4875,
                                  "name": "tokenAddress",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4849,
                                  "src": "15686:12:36",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "15665:34:36",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "15655:44:36",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "416d6f756e7420746f6f2068696768",
                              "id": 4878,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "15701:17:36",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_7353a6bd8628dd713e866f78b282b0b6793f273d47e76330330b9a5a159c17ef",
                                "typeString": "literal_string \"Amount too high\""
                              },
                              "value": "Amount too high"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_7353a6bd8628dd713e866f78b282b0b6793f273d47e76330330b9a5a159c17ef",
                                "typeString": "literal_string \"Amount too high\""
                              }
                            ],
                            "id": 4872,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "15647:7:36",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 4879,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "15647:72:36",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 4880,
                        "nodeType": "ExpressionStatement",
                        "src": "15647:72:36"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 4886,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 4881,
                            "name": "tokenAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4849,
                            "src": "15736:12:36",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 4884,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "15760:1:36",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 4883,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "15752:7:36",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 4882,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "15752:7:36",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 4885,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "15752:10:36",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "15736:26:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 4901,
                          "nodeType": "Block",
                          "src": "15852:85:36",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "id": 4897,
                                    "name": "_receiver",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4829,
                                    "src": "15904:9:36",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "id": 4898,
                                    "name": "amount",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4846,
                                    "src": "15915:6:36",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "expression": {
                                    "arguments": [
                                      {
                                        "id": 4894,
                                        "name": "tokenAddress",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 4849,
                                        "src": "15877:12:36",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      ],
                                      "id": 4893,
                                      "name": "IERC20",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 8647,
                                      "src": "15870:6:36",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_contract$_IERC20_$8647_$",
                                        "typeString": "type(contract IERC20)"
                                      }
                                    },
                                    "id": 4895,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "15870:20:36",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_IERC20_$8647",
                                      "typeString": "contract IERC20"
                                    }
                                  },
                                  "id": 4896,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "safeTransfer",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 8678,
                                  "src": "15870:33:36",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$8647_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$8647_$",
                                    "typeString": "function (contract IERC20,address,uint256)"
                                  }
                                },
                                "id": 4899,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "15870:52:36",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 4900,
                              "nodeType": "ExpressionStatement",
                              "src": "15870:52:36"
                            }
                          ]
                        },
                        "id": 4902,
                        "nodeType": "IfStatement",
                        "src": "15733:204:36",
                        "trueBody": {
                          "id": 4892,
                          "nodeType": "Block",
                          "src": "15763:72:36",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "id": 4888,
                                    "name": "_receiver",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4829,
                                    "src": "15802:9:36",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "id": 4889,
                                    "name": "amount",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4846,
                                    "src": "15813:6:36",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "id": 4887,
                                  "name": "_handleEtherTransfer",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4683,
                                  "src": "15781:20:36",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                                    "typeString": "function (address,uint256)"
                                  }
                                },
                                "id": 4890,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "15781:39:36",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 4891,
                              "nodeType": "ExpressionStatement",
                              "src": "15781:39:36"
                            }
                          ]
                        }
                      },
                      {
                        "id": 4909,
                        "nodeType": "UncheckedBlock",
                        "src": "16042:87:36",
                        "statements": [
                          {
                            "expression": {
                              "id": 4907,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "baseExpression": {
                                  "id": 4903,
                                  "name": "totalAmountClaimable",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4021,
                                  "src": "16070:20:36",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                    "typeString": "mapping(address => uint256)"
                                  }
                                },
                                "id": 4905,
                                "indexExpression": {
                                  "id": 4904,
                                  "name": "tokenAddress",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4849,
                                  "src": "16091:12:36",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": true,
                                "nodeType": "IndexAccess",
                                "src": "16070:34:36",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "-=",
                              "rightHandSide": {
                                "id": 4906,
                                "name": "amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4846,
                                "src": "16108:6:36",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "16070:44:36",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 4908,
                            "nodeType": "ExpressionStatement",
                            "src": "16070:44:36"
                          }
                        ]
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 4856,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 4854,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4852,
                      "src": "15540:1:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "id": 4855,
                      "name": "len",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4833,
                      "src": "15544:3:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "15540:7:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 4911,
                  "initializationExpression": {
                    "assignments": [
                      4852
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 4852,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "15537:1:36",
                        "nodeType": "VariableDeclaration",
                        "scope": 4911,
                        "src": "15529:9:36",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 4851,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "15529:7:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 4853,
                    "nodeType": "VariableDeclarationStatement",
                    "src": "15529:9:36"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 4858,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": true,
                      "src": "15549:3:36",
                      "subExpression": {
                        "id": 4857,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4852,
                        "src": "15551:1:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 4859,
                    "nodeType": "ExpressionStatement",
                    "src": "15549:3:36"
                  },
                  "nodeType": "ForStatement",
                  "src": "15524:615:36"
                }
              ]
            },
            "documentation": {
              "id": 4821,
              "nodeType": "StructuredDocumentation",
              "src": "14955:272:36",
              "text": " @notice  Used by the contract owners to claim the fees accrued\n @param   _tokenAddress List of tokens to withdraw the fees\n @param   _amounts List of amounts that will be withdrawn\n @param   _receiver Address that will receive the fees"
            },
            "functionSelector": "31f91a84",
            "id": 4913,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "withdrawFees",
            "nameLocation": "15241:12:36",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4830,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4824,
                  "mutability": "mutable",
                  "name": "_tokenAddress",
                  "nameLocation": "15273:13:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 4913,
                  "src": "15254:32:36",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 4822,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "15254:7:36",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 4823,
                    "nodeType": "ArrayTypeName",
                    "src": "15254:9:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4827,
                  "mutability": "mutable",
                  "name": "_amounts",
                  "nameLocation": "15307:8:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 4913,
                  "src": "15288:27:36",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 4825,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "15288:7:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 4826,
                    "nodeType": "ArrayTypeName",
                    "src": "15288:9:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4829,
                  "mutability": "mutable",
                  "name": "_receiver",
                  "nameLocation": "15325:9:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 4913,
                  "src": "15317:17:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4828,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "15317:7:36",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "15253:82:36"
            },
            "returnParameters": {
              "id": 4831,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "15345:0:36"
            },
            "scope": 5182,
            "src": "15232:913:36",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 4925,
              "nodeType": "Block",
              "src": "16480:58:36",
              "statements": [
                {
                  "expression": {
                    "baseExpression": {
                      "id": 4921,
                      "name": "whitelistedCurrencies",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4002,
                      "src": "16497:21:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                        "typeString": "mapping(address => bool)"
                      }
                    },
                    "id": 4923,
                    "indexExpression": {
                      "id": 4922,
                      "name": "_erc20Token",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4916,
                      "src": "16519:11:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "16497:34:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 4920,
                  "id": 4924,
                  "nodeType": "Return",
                  "src": "16490:41:36"
                }
              ]
            },
            "documentation": {
              "id": 4914,
              "nodeType": "StructuredDocumentation",
              "src": "16151:243:36",
              "text": "############################################################################################\n                 VIEW FUNCTIONS\n  ############################################################################################"
            },
            "functionSelector": "43b938c5",
            "id": 4926,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "isCurrencyWhitelisted",
            "nameLocation": "16409:21:36",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4917,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4916,
                  "mutability": "mutable",
                  "name": "_erc20Token",
                  "nameLocation": "16439:11:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 4926,
                  "src": "16431:19:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4915,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "16431:7:36",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "16430:21:36"
            },
            "returnParameters": {
              "id": 4920,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4919,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4926,
                  "src": "16474:4:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 4918,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "16474:4:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "16473:6:36"
            },
            "scope": 5182,
            "src": "16400:138:36",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 5120,
              "nodeType": "Block",
              "src": "16747:1790:36",
              "statements": [
                {
                  "assignments": [
                    4944
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4944,
                      "mutability": "mutable",
                      "name": "FAIR_RAFFLE_FEE",
                      "nameLocation": "16765:15:36",
                      "nodeType": "VariableDeclaration",
                      "scope": 5120,
                      "src": "16757:23:36",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 4943,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "16757:7:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 4945,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "16757:23:36"
                },
                {
                  "condition": {
                    "id": 4947,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "16794:18:36",
                    "subExpression": {
                      "id": 4946,
                      "name": "priceFeedsEnabled",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4032,
                      "src": "16795:17:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 5116,
                    "nodeType": "Block",
                    "src": "16966:1533:36",
                    "statements": [
                      {
                        "assignments": [
                          4961
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 4961,
                            "mutability": "mutable",
                            "name": "totalRaffleValueInUsd",
                            "nameLocation": "16988:21:36",
                            "nodeType": "VariableDeclaration",
                            "scope": 5116,
                            "src": "16980:29:36",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 4960,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "16980:7:36",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 4962,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "16980:29:36"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 4968,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 4963,
                            "name": "_tokenAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4928,
                            "src": "17027:13:36",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 4966,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "17052:1:36",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 4965,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "17044:7:36",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 4964,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "17044:7:36",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 4967,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "17044:10:36",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "17027:27:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 5011,
                          "nodeType": "Block",
                          "src": "17280:171:36",
                          "statements": [
                            {
                              "expression": {
                                "id": 5009,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 4992,
                                  "name": "totalRaffleValueInUsd",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4961,
                                  "src": "17298:21:36",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 5008,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "components": [
                                      {
                                        "commonType": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "id": 4998,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "arguments": [
                                            {
                                              "id": 4995,
                                              "name": "_tokenAddress",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 4928,
                                              "src": "17360:13:36",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_address",
                                                "typeString": "address"
                                              }
                                            }
                                          ],
                                          "expression": {
                                            "argumentTypes": [
                                              {
                                                "typeIdentifier": "t_address",
                                                "typeString": "address"
                                              }
                                            ],
                                            "expression": {
                                              "id": 4993,
                                              "name": "currencyPriceFeed",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 4026,
                                              "src": "17323:17:36",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_contract$_ICurrencyPriceFeed_$3966",
                                                "typeString": "contract ICurrencyPriceFeed"
                                              }
                                            },
                                            "id": 4994,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "memberName": "getUsdPriceOfToken",
                                            "nodeType": "MemberAccess",
                                            "referencedDeclaration": 3965,
                                            "src": "17323:36:36",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                                              "typeString": "function (address) view external returns (uint256)"
                                            }
                                          },
                                          "id": 4996,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "kind": "functionCall",
                                          "lValueRequested": false,
                                          "names": [],
                                          "nodeType": "FunctionCall",
                                          "src": "17323:51:36",
                                          "tryCall": false,
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "*",
                                        "rightExpression": {
                                          "id": 4997,
                                          "name": "_amount",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 4930,
                                          "src": "17377:7:36",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint128",
                                            "typeString": "uint128"
                                          }
                                        },
                                        "src": "17323:61:36",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      }
                                    ],
                                    "id": 4999,
                                    "isConstant": false,
                                    "isInlineArray": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "TupleExpression",
                                    "src": "17322:63:36",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "/",
                                  "rightExpression": {
                                    "components": [
                                      {
                                        "commonType": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "id": 5006,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "hexValue": "3130",
                                          "id": 5000,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "kind": "number",
                                          "lValueRequested": false,
                                          "nodeType": "Literal",
                                          "src": "17389:2:36",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_rational_10_by_1",
                                            "typeString": "int_const 10"
                                          },
                                          "value": "10"
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "**",
                                        "rightExpression": {
                                          "arguments": [],
                                          "expression": {
                                            "argumentTypes": [],
                                            "expression": {
                                              "arguments": [
                                                {
                                                  "id": 5002,
                                                  "name": "_tokenAddress",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 4928,
                                                  "src": "17410:13:36",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_address",
                                                    "typeString": "address"
                                                  }
                                                }
                                              ],
                                              "expression": {
                                                "argumentTypes": [
                                                  {
                                                    "typeIdentifier": "t_address",
                                                    "typeString": "address"
                                                  }
                                                ],
                                                "id": 5001,
                                                "name": "IERC20Extented",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 3974,
                                                "src": "17395:14:36",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_type$_t_contract$_IERC20Extented_$3974_$",
                                                  "typeString": "type(contract IERC20Extented)"
                                                }
                                              },
                                              "id": 5003,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "kind": "typeConversion",
                                              "lValueRequested": false,
                                              "names": [],
                                              "nodeType": "FunctionCall",
                                              "src": "17395:29:36",
                                              "tryCall": false,
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_contract$_IERC20Extented_$3974",
                                                "typeString": "contract IERC20Extented"
                                              }
                                            },
                                            "id": 5004,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "memberName": "decimals",
                                            "nodeType": "MemberAccess",
                                            "referencedDeclaration": 3973,
                                            "src": "17395:38:36",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_function_external_view$__$returns$_t_uint8_$",
                                              "typeString": "function () view external returns (uint8)"
                                            }
                                          },
                                          "id": 5005,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "kind": "functionCall",
                                          "lValueRequested": false,
                                          "names": [],
                                          "nodeType": "FunctionCall",
                                          "src": "17395:40:36",
                                          "tryCall": false,
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint8",
                                            "typeString": "uint8"
                                          }
                                        },
                                        "src": "17389:46:36",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      }
                                    ],
                                    "id": 5007,
                                    "isConstant": false,
                                    "isInlineArray": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "TupleExpression",
                                    "src": "17388:48:36",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "17322:114:36",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "17298:138:36",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 5010,
                              "nodeType": "ExpressionStatement",
                              "src": "17298:138:36"
                            }
                          ]
                        },
                        "id": 5012,
                        "nodeType": "IfStatement",
                        "src": "17023:428:36",
                        "trueBody": {
                          "id": 4991,
                          "nodeType": "Block",
                          "src": "17055:208:36",
                          "statements": [
                            {
                              "expression": {
                                "id": 4974,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 4969,
                                  "name": "_tokenAddress",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4928,
                                  "src": "17073:13:36",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "arguments": [
                                    {
                                      "id": 4972,
                                      "name": "WETH",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4008,
                                      "src": "17097:4:36",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_IWETH_$9002",
                                        "typeString": "contract IWETH"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_contract$_IWETH_$9002",
                                        "typeString": "contract IWETH"
                                      }
                                    ],
                                    "id": 4971,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "17089:7:36",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 4970,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "17089:7:36",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 4973,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "17089:13:36",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "src": "17073:29:36",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "id": 4975,
                              "nodeType": "ExpressionStatement",
                              "src": "17073:29:36"
                            },
                            {
                              "expression": {
                                "id": 4989,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 4976,
                                  "name": "totalRaffleValueInUsd",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4961,
                                  "src": "17120:21:36",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 4988,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "components": [
                                      {
                                        "commonType": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "id": 4982,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "arguments": [
                                            {
                                              "id": 4979,
                                              "name": "_tokenAddress",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 4928,
                                              "src": "17182:13:36",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_address",
                                                "typeString": "address"
                                              }
                                            }
                                          ],
                                          "expression": {
                                            "argumentTypes": [
                                              {
                                                "typeIdentifier": "t_address",
                                                "typeString": "address"
                                              }
                                            ],
                                            "expression": {
                                              "id": 4977,
                                              "name": "currencyPriceFeed",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 4026,
                                              "src": "17145:17:36",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_contract$_ICurrencyPriceFeed_$3966",
                                                "typeString": "contract ICurrencyPriceFeed"
                                              }
                                            },
                                            "id": 4978,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "memberName": "getUsdPriceOfToken",
                                            "nodeType": "MemberAccess",
                                            "referencedDeclaration": 3965,
                                            "src": "17145:36:36",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                                              "typeString": "function (address) view external returns (uint256)"
                                            }
                                          },
                                          "id": 4980,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "kind": "functionCall",
                                          "lValueRequested": false,
                                          "names": [],
                                          "nodeType": "FunctionCall",
                                          "src": "17145:51:36",
                                          "tryCall": false,
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "*",
                                        "rightExpression": {
                                          "id": 4981,
                                          "name": "_amount",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 4930,
                                          "src": "17199:7:36",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint128",
                                            "typeString": "uint128"
                                          }
                                        },
                                        "src": "17145:61:36",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      }
                                    ],
                                    "id": 4983,
                                    "isConstant": false,
                                    "isInlineArray": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "TupleExpression",
                                    "src": "17144:63:36",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "/",
                                  "rightExpression": {
                                    "components": [
                                      {
                                        "commonType": {
                                          "typeIdentifier": "t_rational_1000000000000000000_by_1",
                                          "typeString": "int_const 1000000000000000000"
                                        },
                                        "id": 4986,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "hexValue": "3130",
                                          "id": 4984,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "kind": "number",
                                          "lValueRequested": false,
                                          "nodeType": "Literal",
                                          "src": "17211:2:36",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_rational_10_by_1",
                                            "typeString": "int_const 10"
                                          },
                                          "value": "10"
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "**",
                                        "rightExpression": {
                                          "hexValue": "3138",
                                          "id": 4985,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "kind": "number",
                                          "lValueRequested": false,
                                          "nodeType": "Literal",
                                          "src": "17217:2:36",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_rational_18_by_1",
                                            "typeString": "int_const 18"
                                          },
                                          "value": "18"
                                        },
                                        "src": "17211:8:36",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_1000000000000000000_by_1",
                                          "typeString": "int_const 1000000000000000000"
                                        }
                                      }
                                    ],
                                    "id": 4987,
                                    "isConstant": false,
                                    "isInlineArray": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "TupleExpression",
                                    "src": "17210:10:36",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_1000000000000000000_by_1",
                                      "typeString": "int_const 1000000000000000000"
                                    }
                                  },
                                  "src": "17144:76:36",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "17120:100:36",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 4990,
                              "nodeType": "ExpressionStatement",
                              "src": "17120:100:36"
                            }
                          ]
                        }
                      },
                      {
                        "assignments": [
                          5014
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 5014,
                            "mutability": "mutable",
                            "name": "totalValueAllTicketsInUsd",
                            "nameLocation": "17472:25:36",
                            "nodeType": "VariableDeclaration",
                            "scope": 5116,
                            "src": "17464:33:36",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 5013,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "17464:7:36",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 5037,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 5036,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "components": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 5024,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 5022,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "arguments": [
                                      {
                                        "baseExpression": {
                                          "id": 5017,
                                          "name": "polygonTokenToMainnetAddress",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 4030,
                                          "src": "17538:28:36",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_mapping$_t_address_$_t_address_$",
                                            "typeString": "mapping(address => address)"
                                          }
                                        },
                                        "id": 5019,
                                        "indexExpression": {
                                          "id": 5018,
                                          "name": "_currencyInPolygon",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 4932,
                                          "src": "17567:18:36",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        },
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "IndexAccess",
                                        "src": "17538:48:36",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      ],
                                      "expression": {
                                        "id": 5015,
                                        "name": "currencyPriceFeed",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 4026,
                                        "src": "17501:17:36",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_contract$_ICurrencyPriceFeed_$3966",
                                          "typeString": "contract ICurrencyPriceFeed"
                                        }
                                      },
                                      "id": 5016,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "getUsdPriceOfToken",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 3965,
                                      "src": "17501:36:36",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                                        "typeString": "function (address) view external returns (uint256)"
                                      }
                                    },
                                    "id": 5020,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "17501:86:36",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "*",
                                  "rightExpression": {
                                    "id": 5021,
                                    "name": "_numberOfTickets",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4936,
                                    "src": "17590:16:36",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint64",
                                      "typeString": "uint64"
                                    }
                                  },
                                  "src": "17501:105:36",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "*",
                                "rightExpression": {
                                  "id": 5023,
                                  "name": "_pricePerTicket",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4934,
                                  "src": "17609:15:36",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint128",
                                    "typeString": "uint128"
                                  }
                                },
                                "src": "17501:123:36",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 5025,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "17500:125:36",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "/",
                          "rightExpression": {
                            "components": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 5034,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "hexValue": "3130",
                                  "id": 5026,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "17629:2:36",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_10_by_1",
                                    "typeString": "int_const 10"
                                  },
                                  "value": "10"
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "**",
                                "rightExpression": {
                                  "arguments": [],
                                  "expression": {
                                    "argumentTypes": [],
                                    "expression": {
                                      "arguments": [
                                        {
                                          "baseExpression": {
                                            "id": 5028,
                                            "name": "polygonTokenToMainnetAddress",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 4030,
                                            "src": "17650:28:36",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_mapping$_t_address_$_t_address_$",
                                              "typeString": "mapping(address => address)"
                                            }
                                          },
                                          "id": 5030,
                                          "indexExpression": {
                                            "id": 5029,
                                            "name": "_currencyInPolygon",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 4932,
                                            "src": "17679:18:36",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_address",
                                              "typeString": "address"
                                            }
                                          },
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "nodeType": "IndexAccess",
                                          "src": "17650:48:36",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        ],
                                        "id": 5027,
                                        "name": "IERC20Extented",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 3974,
                                        "src": "17635:14:36",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_contract$_IERC20Extented_$3974_$",
                                          "typeString": "type(contract IERC20Extented)"
                                        }
                                      },
                                      "id": 5031,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "typeConversion",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "17635:64:36",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_IERC20Extented_$3974",
                                        "typeString": "contract IERC20Extented"
                                      }
                                    },
                                    "id": 5032,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "decimals",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 3973,
                                    "src": "17635:73:36",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_external_view$__$returns$_t_uint8_$",
                                      "typeString": "function () view external returns (uint8)"
                                    }
                                  },
                                  "id": 5033,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "17635:75:36",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint8",
                                    "typeString": "uint8"
                                  }
                                },
                                "src": "17629:81:36",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 5035,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "17628:83:36",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "17500:211:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "17464:247:36"
                      },
                      {
                        "assignments": [
                          5039
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 5039,
                            "mutability": "mutable",
                            "name": "ratio",
                            "nameLocation": "17733:5:36",
                            "nodeType": "VariableDeclaration",
                            "scope": 5116,
                            "src": "17725:13:36",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 5038,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "17725:7:36",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 5046,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 5045,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "components": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 5042,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 5040,
                                  "name": "totalValueAllTicketsInUsd",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 5014,
                                  "src": "17742:25:36",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "*",
                                "rightExpression": {
                                  "hexValue": "3130303030",
                                  "id": 5041,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "17770:5:36",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_10000_by_1",
                                    "typeString": "int_const 10000"
                                  },
                                  "value": "10000"
                                },
                                "src": "17742:33:36",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 5043,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "17741:35:36",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "/",
                          "rightExpression": {
                            "id": 5044,
                            "name": "totalRaffleValueInUsd",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4961,
                            "src": "17779:21:36",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "17741:59:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "17725:75:36"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 5049,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 5047,
                            "name": "ratio",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 5039,
                            "src": "17885:5:36",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<=",
                          "rightExpression": {
                            "hexValue": "3130303030",
                            "id": 5048,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "17894:5:36",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_10000_by_1",
                              "typeString": "int_const 10000"
                            },
                            "value": "10000"
                          },
                          "src": "17885:14:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "condition": {
                            "commonType": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "id": 5063,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "components": [
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 5057,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 5055,
                                    "name": "ratio",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 5039,
                                    "src": "17975:5:36",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": ">",
                                  "rightExpression": {
                                    "hexValue": "3130303030",
                                    "id": 5056,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "17983:5:36",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_10000_by_1",
                                      "typeString": "int_const 10000"
                                    },
                                    "value": "10000"
                                  },
                                  "src": "17975:13:36",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                }
                              ],
                              "id": 5058,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "17974:15:36",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "&&",
                            "rightExpression": {
                              "components": [
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 5061,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 5059,
                                    "name": "ratio",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 5039,
                                    "src": "17994:5:36",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "<=",
                                  "rightExpression": {
                                    "hexValue": "3131303030",
                                    "id": 5060,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "18003:5:36",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_11000_by_1",
                                      "typeString": "int_const 11000"
                                    },
                                    "value": "11000"
                                  },
                                  "src": "17994:14:36",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                }
                              ],
                              "id": 5062,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "17993:16:36",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "src": "17974:35:36",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "falseBody": {
                            "condition": {
                              "commonType": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "id": 5084,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "components": [
                                  {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 5078,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "id": 5076,
                                      "name": "ratio",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 5039,
                                      "src": "18160:5:36",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": ">",
                                    "rightExpression": {
                                      "hexValue": "3131303030",
                                      "id": 5077,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "18168:5:36",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_11000_by_1",
                                        "typeString": "int_const 11000"
                                      },
                                      "value": "11000"
                                    },
                                    "src": "18160:13:36",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  }
                                ],
                                "id": 5079,
                                "isConstant": false,
                                "isInlineArray": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "TupleExpression",
                                "src": "18159:15:36",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "&&",
                              "rightExpression": {
                                "components": [
                                  {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 5082,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "id": 5080,
                                      "name": "ratio",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 5039,
                                      "src": "18179:5:36",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "<=",
                                    "rightExpression": {
                                      "hexValue": "3132353030",
                                      "id": 5081,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "18188:5:36",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_12500_by_1",
                                        "typeString": "int_const 12500"
                                      },
                                      "value": "12500"
                                    },
                                    "src": "18179:14:36",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  }
                                ],
                                "id": 5083,
                                "isConstant": false,
                                "isInlineArray": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "TupleExpression",
                                "src": "18178:16:36",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "src": "18159:35:36",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "falseBody": {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 5099,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 5097,
                                  "name": "ratio",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 5039,
                                  "src": "18346:5:36",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">",
                                "rightExpression": {
                                  "hexValue": "3132353030",
                                  "id": 5098,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "18354:5:36",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_12500_by_1",
                                    "typeString": "int_const 12500"
                                  },
                                  "value": "12500"
                                },
                                "src": "18346:13:36",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 5112,
                              "nodeType": "IfStatement",
                              "src": "18342:147:36",
                              "trueBody": {
                                "id": 5111,
                                "nodeType": "Block",
                                "src": "18361:128:36",
                                "statements": [
                                  {
                                    "expression": {
                                      "id": 5109,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "id": 5100,
                                        "name": "FAIR_RAFFLE_FEE",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 4944,
                                        "src": "18402:15:36",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "=",
                                      "rightHandSide": {
                                        "commonType": {
                                          "typeIdentifier": "t_uint128",
                                          "typeString": "uint128"
                                        },
                                        "id": 5108,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "components": [
                                            {
                                              "commonType": {
                                                "typeIdentifier": "t_uint128",
                                                "typeString": "uint128"
                                              },
                                              "id": 5105,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "leftExpression": {
                                                "commonType": {
                                                  "typeIdentifier": "t_uint128",
                                                  "typeString": "uint128"
                                                },
                                                "id": 5103,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "leftExpression": {
                                                  "id": 5101,
                                                  "name": "_minimumTicketsSold",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 4938,
                                                  "src": "18421:19:36",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_uint64",
                                                    "typeString": "uint64"
                                                  }
                                                },
                                                "nodeType": "BinaryOperation",
                                                "operator": "*",
                                                "rightExpression": {
                                                  "id": 5102,
                                                  "name": "_pricePerTicket",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 4934,
                                                  "src": "18443:15:36",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_uint128",
                                                    "typeString": "uint128"
                                                  }
                                                },
                                                "src": "18421:37:36",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint128",
                                                  "typeString": "uint128"
                                                }
                                              },
                                              "nodeType": "BinaryOperation",
                                              "operator": "*",
                                              "rightExpression": {
                                                "hexValue": "32303030",
                                                "id": 5104,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": true,
                                                "kind": "number",
                                                "lValueRequested": false,
                                                "nodeType": "Literal",
                                                "src": "18461:4:36",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_rational_2000_by_1",
                                                  "typeString": "int_const 2000"
                                                },
                                                "value": "2000"
                                              },
                                              "src": "18421:44:36",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint128",
                                                "typeString": "uint128"
                                              }
                                            }
                                          ],
                                          "id": 5106,
                                          "isConstant": false,
                                          "isInlineArray": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "nodeType": "TupleExpression",
                                          "src": "18420:46:36",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint128",
                                            "typeString": "uint128"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "/",
                                        "rightExpression": {
                                          "hexValue": "3130303030",
                                          "id": 5107,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "kind": "number",
                                          "lValueRequested": false,
                                          "nodeType": "Literal",
                                          "src": "18469:5:36",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_rational_10000_by_1",
                                            "typeString": "int_const 10000"
                                          },
                                          "value": "10000"
                                        },
                                        "src": "18420:54:36",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint128",
                                          "typeString": "uint128"
                                        }
                                      },
                                      "src": "18402:72:36",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 5110,
                                    "nodeType": "ExpressionStatement",
                                    "src": "18402:72:36"
                                  }
                                ]
                              }
                            },
                            "id": 5113,
                            "nodeType": "IfStatement",
                            "src": "18155:334:36",
                            "trueBody": {
                              "id": 5096,
                              "nodeType": "Block",
                              "src": "18196:128:36",
                              "statements": [
                                {
                                  "expression": {
                                    "id": 5094,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "id": 5085,
                                      "name": "FAIR_RAFFLE_FEE",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4944,
                                      "src": "18237:15:36",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": "=",
                                    "rightHandSide": {
                                      "commonType": {
                                        "typeIdentifier": "t_uint128",
                                        "typeString": "uint128"
                                      },
                                      "id": 5093,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "components": [
                                          {
                                            "commonType": {
                                              "typeIdentifier": "t_uint128",
                                              "typeString": "uint128"
                                            },
                                            "id": 5090,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftExpression": {
                                              "commonType": {
                                                "typeIdentifier": "t_uint128",
                                                "typeString": "uint128"
                                              },
                                              "id": 5088,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "leftExpression": {
                                                "id": 5086,
                                                "name": "_minimumTicketsSold",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 4938,
                                                "src": "18256:19:36",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint64",
                                                  "typeString": "uint64"
                                                }
                                              },
                                              "nodeType": "BinaryOperation",
                                              "operator": "*",
                                              "rightExpression": {
                                                "id": 5087,
                                                "name": "_pricePerTicket",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 4934,
                                                "src": "18278:15:36",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint128",
                                                  "typeString": "uint128"
                                                }
                                              },
                                              "src": "18256:37:36",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint128",
                                                "typeString": "uint128"
                                              }
                                            },
                                            "nodeType": "BinaryOperation",
                                            "operator": "*",
                                            "rightExpression": {
                                              "hexValue": "31303030",
                                              "id": 5089,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "number",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "18296:4:36",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_rational_1000_by_1",
                                                "typeString": "int_const 1000"
                                              },
                                              "value": "1000"
                                            },
                                            "src": "18256:44:36",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint128",
                                              "typeString": "uint128"
                                            }
                                          }
                                        ],
                                        "id": 5091,
                                        "isConstant": false,
                                        "isInlineArray": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "TupleExpression",
                                        "src": "18255:46:36",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint128",
                                          "typeString": "uint128"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "/",
                                      "rightExpression": {
                                        "hexValue": "3130303030",
                                        "id": 5092,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "18304:5:36",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_10000_by_1",
                                          "typeString": "int_const 10000"
                                        },
                                        "value": "10000"
                                      },
                                      "src": "18255:54:36",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint128",
                                        "typeString": "uint128"
                                      }
                                    },
                                    "src": "18237:72:36",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 5095,
                                  "nodeType": "ExpressionStatement",
                                  "src": "18237:72:36"
                                }
                              ]
                            }
                          },
                          "id": 5114,
                          "nodeType": "IfStatement",
                          "src": "17970:519:36",
                          "trueBody": {
                            "id": 5075,
                            "nodeType": "Block",
                            "src": "18011:126:36",
                            "statements": [
                              {
                                "expression": {
                                  "id": 5073,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftHandSide": {
                                    "id": 5064,
                                    "name": "FAIR_RAFFLE_FEE",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4944,
                                    "src": "18051:15:36",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "Assignment",
                                  "operator": "=",
                                  "rightHandSide": {
                                    "commonType": {
                                      "typeIdentifier": "t_uint128",
                                      "typeString": "uint128"
                                    },
                                    "id": 5072,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "components": [
                                        {
                                          "commonType": {
                                            "typeIdentifier": "t_uint128",
                                            "typeString": "uint128"
                                          },
                                          "id": 5069,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftExpression": {
                                            "commonType": {
                                              "typeIdentifier": "t_uint128",
                                              "typeString": "uint128"
                                            },
                                            "id": 5067,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftExpression": {
                                              "id": 5065,
                                              "name": "_minimumTicketsSold",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 4938,
                                              "src": "18070:19:36",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint64",
                                                "typeString": "uint64"
                                              }
                                            },
                                            "nodeType": "BinaryOperation",
                                            "operator": "*",
                                            "rightExpression": {
                                              "id": 5066,
                                              "name": "_pricePerTicket",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 4934,
                                              "src": "18092:15:36",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint128",
                                                "typeString": "uint128"
                                              }
                                            },
                                            "src": "18070:37:36",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint128",
                                              "typeString": "uint128"
                                            }
                                          },
                                          "nodeType": "BinaryOperation",
                                          "operator": "*",
                                          "rightExpression": {
                                            "hexValue": "353030",
                                            "id": 5068,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "kind": "number",
                                            "lValueRequested": false,
                                            "nodeType": "Literal",
                                            "src": "18110:3:36",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_rational_500_by_1",
                                              "typeString": "int_const 500"
                                            },
                                            "value": "500"
                                          },
                                          "src": "18070:43:36",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint128",
                                            "typeString": "uint128"
                                          }
                                        }
                                      ],
                                      "id": 5070,
                                      "isConstant": false,
                                      "isInlineArray": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "TupleExpression",
                                      "src": "18069:45:36",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint128",
                                        "typeString": "uint128"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "/",
                                    "rightExpression": {
                                      "hexValue": "3130303030",
                                      "id": 5071,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "18117:5:36",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_10000_by_1",
                                        "typeString": "int_const 10000"
                                      },
                                      "value": "10000"
                                    },
                                    "src": "18069:53:36",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint128",
                                      "typeString": "uint128"
                                    }
                                  },
                                  "src": "18051:71:36",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "id": 5074,
                                "nodeType": "ExpressionStatement",
                                "src": "18051:71:36"
                              }
                            ]
                          }
                        },
                        "id": 5115,
                        "nodeType": "IfStatement",
                        "src": "17881:608:36",
                        "trueBody": {
                          "id": 5054,
                          "nodeType": "Block",
                          "src": "17900:52:36",
                          "statements": [
                            {
                              "expression": {
                                "id": 5052,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 5050,
                                  "name": "FAIR_RAFFLE_FEE",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4944,
                                  "src": "17918:15:36",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "hexValue": "30",
                                  "id": 5051,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "17936:1:36",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                },
                                "src": "17918:19:36",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 5053,
                              "nodeType": "ExpressionStatement",
                              "src": "17918:19:36"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "id": 5117,
                  "nodeType": "IfStatement",
                  "src": "16790:1709:36",
                  "trueBody": {
                    "id": 4959,
                    "nodeType": "Block",
                    "src": "16813:140:36",
                    "statements": [
                      {
                        "expression": {
                          "id": 4957,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 4948,
                            "name": "FAIR_RAFFLE_FEE",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4944,
                            "src": "16827:15:36",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 4956,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "components": [
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 4953,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "commonType": {
                                      "typeIdentifier": "t_uint128",
                                      "typeString": "uint128"
                                    },
                                    "id": 4951,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "id": 4949,
                                      "name": "_minimumTicketsSold",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4938,
                                      "src": "16846:19:36",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint64",
                                        "typeString": "uint64"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "*",
                                    "rightExpression": {
                                      "id": 4950,
                                      "name": "_pricePerTicket",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4934,
                                      "src": "16868:15:36",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint128",
                                        "typeString": "uint128"
                                      }
                                    },
                                    "src": "16846:37:36",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint128",
                                      "typeString": "uint128"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "*",
                                  "rightExpression": {
                                    "id": 4952,
                                    "name": "FAIR_RAFFLE_FEE_NUMERATOR",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4013,
                                    "src": "16886:25:36",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "16846:65:36",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "id": 4954,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "16845:67:36",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "/",
                            "rightExpression": {
                              "id": 4955,
                              "name": "FAIR_RAFFLE_FEE_DENOMINATOR",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4016,
                              "src": "16915:27:36",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "16845:97:36",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "16827:115:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 4958,
                        "nodeType": "ExpressionStatement",
                        "src": "16827:115:36"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "id": 5118,
                    "name": "FAIR_RAFFLE_FEE",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 4944,
                    "src": "18515:15:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 4942,
                  "id": 5119,
                  "nodeType": "Return",
                  "src": "18508:22:36"
                }
              ]
            },
            "functionSelector": "da653f00",
            "id": 5121,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "fairRaffleFeeERC20",
            "nameLocation": "16553:18:36",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4939,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4928,
                  "mutability": "mutable",
                  "name": "_tokenAddress",
                  "nameLocation": "16580:13:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 5121,
                  "src": "16572:21:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4927,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "16572:7:36",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4930,
                  "mutability": "mutable",
                  "name": "_amount",
                  "nameLocation": "16603:7:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 5121,
                  "src": "16595:15:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint128",
                    "typeString": "uint128"
                  },
                  "typeName": {
                    "id": 4929,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "16595:7:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint128",
                      "typeString": "uint128"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4932,
                  "mutability": "mutable",
                  "name": "_currencyInPolygon",
                  "nameLocation": "16620:18:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 5121,
                  "src": "16612:26:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4931,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "16612:7:36",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4934,
                  "mutability": "mutable",
                  "name": "_pricePerTicket",
                  "nameLocation": "16648:15:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 5121,
                  "src": "16640:23:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint128",
                    "typeString": "uint128"
                  },
                  "typeName": {
                    "id": 4933,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "16640:7:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint128",
                      "typeString": "uint128"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4936,
                  "mutability": "mutable",
                  "name": "_numberOfTickets",
                  "nameLocation": "16672:16:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 5121,
                  "src": "16665:23:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 4935,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "16665:6:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4938,
                  "mutability": "mutable",
                  "name": "_minimumTicketsSold",
                  "nameLocation": "16697:19:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 5121,
                  "src": "16690:26:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 4937,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "16690:6:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "16571:146:36"
            },
            "returnParameters": {
              "id": 4942,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4941,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 5121,
                  "src": "16738:7:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4940,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "16738:7:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "16737:9:36"
            },
            "scope": 5182,
            "src": "16544:1993:36",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 5180,
              "nodeType": "Block",
              "src": "18682:585:36",
              "statements": [
                {
                  "assignments": [
                    5133
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 5133,
                      "mutability": "mutable",
                      "name": "totalRaffledTicketsValueInUsd",
                      "nameLocation": "18700:29:36",
                      "nodeType": "VariableDeclaration",
                      "scope": 5180,
                      "src": "18692:37:36",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 5132,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "18692:7:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 5156,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 5155,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 5143,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 5141,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "arguments": [
                                {
                                  "baseExpression": {
                                    "id": 5136,
                                    "name": "polygonTokenToMainnetAddress",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4030,
                                    "src": "18770:28:36",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_address_$",
                                      "typeString": "mapping(address => address)"
                                    }
                                  },
                                  "id": 5138,
                                  "indexExpression": {
                                    "id": 5137,
                                    "name": "_currencyInPolygon",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 5123,
                                    "src": "18799:18:36",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "18770:48:36",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "expression": {
                                  "id": 5134,
                                  "name": "currencyPriceFeed",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4026,
                                  "src": "18733:17:36",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_ICurrencyPriceFeed_$3966",
                                    "typeString": "contract ICurrencyPriceFeed"
                                  }
                                },
                                "id": 5135,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "getUsdPriceOfToken",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 3965,
                                "src": "18733:36:36",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                                  "typeString": "function (address) view external returns (uint256)"
                                }
                              },
                              "id": 5139,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "18733:86:36",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "*",
                            "rightExpression": {
                              "id": 5140,
                              "name": "_pricePerTicket",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 5125,
                              "src": "18822:15:36",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint128",
                                "typeString": "uint128"
                              }
                            },
                            "src": "18733:104:36",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "id": 5142,
                            "name": "_minimumTicketsSold",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 5127,
                            "src": "18840:19:36",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint64",
                              "typeString": "uint64"
                            }
                          },
                          "src": "18733:126:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 5144,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "18732:128:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "/",
                    "rightExpression": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 5153,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "hexValue": "3130",
                            "id": 5145,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "18864:2:36",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_10_by_1",
                              "typeString": "int_const 10"
                            },
                            "value": "10"
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "**",
                          "rightExpression": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "expression": {
                                "arguments": [
                                  {
                                    "baseExpression": {
                                      "id": 5147,
                                      "name": "polygonTokenToMainnetAddress",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4030,
                                      "src": "18885:28:36",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_mapping$_t_address_$_t_address_$",
                                        "typeString": "mapping(address => address)"
                                      }
                                    },
                                    "id": 5149,
                                    "indexExpression": {
                                      "id": 5148,
                                      "name": "_currencyInPolygon",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 5123,
                                      "src": "18914:18:36",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "18885:48:36",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "id": 5146,
                                  "name": "IERC20Extented",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3974,
                                  "src": "18870:14:36",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_contract$_IERC20Extented_$3974_$",
                                    "typeString": "type(contract IERC20Extented)"
                                  }
                                },
                                "id": 5150,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "18870:64:36",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_IERC20Extented_$3974",
                                  "typeString": "contract IERC20Extented"
                                }
                              },
                              "id": 5151,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "decimals",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3973,
                              "src": "18870:73:36",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_external_view$__$returns$_t_uint8_$",
                                "typeString": "function () view external returns (uint8)"
                              }
                            },
                            "id": 5152,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "18870:75:36",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          },
                          "src": "18864:81:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 5154,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "18863:83:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "18732:214:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "18692:254:36"
                },
                {
                  "assignments": [
                    5158
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 5158,
                      "mutability": "mutable",
                      "name": "FAIR_RAFFLE_FEE_IN_USD",
                      "nameLocation": "18964:22:36",
                      "nodeType": "VariableDeclaration",
                      "scope": 5180,
                      "src": "18956:30:36",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 5157,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "18956:7:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 5165,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 5164,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 5161,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 5159,
                            "name": "totalRaffledTicketsValueInUsd",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 5133,
                            "src": "18990:29:36",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "id": 5160,
                            "name": "FAIR_RAFFLE_FEE_NUMERATOR",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4013,
                            "src": "19022:25:36",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "18990:57:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 5162,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "18989:59:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "/",
                    "rightExpression": {
                      "id": 5163,
                      "name": "FAIR_RAFFLE_FEE_DENOMINATOR",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4016,
                      "src": "19051:27:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "18989:89:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "18956:122:36"
                },
                {
                  "assignments": [
                    5167
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 5167,
                      "mutability": "mutable",
                      "name": "FAIR_RAFFLE_FEE",
                      "nameLocation": "19096:15:36",
                      "nodeType": "VariableDeclaration",
                      "scope": 5180,
                      "src": "19088:23:36",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 5166,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "19088:7:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 5177,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 5176,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 5170,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 5168,
                            "name": "FAIR_RAFFLE_FEE_IN_USD",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 5158,
                            "src": "19115:22:36",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "hexValue": "31653138",
                            "id": 5169,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "19140:4:36",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1000000000000000000_by_1",
                              "typeString": "int_const 1000000000000000000"
                            },
                            "value": "1e18"
                          },
                          "src": "19115:29:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 5171,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "19114:31:36",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "/",
                    "rightExpression": {
                      "arguments": [
                        {
                          "hexValue": "307845656565654565656545654565654565456545656545454565656565456565656565656545456545",
                          "id": 5174,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "19185:42:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "value": "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "expression": {
                          "id": 5172,
                          "name": "currencyPriceFeed",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4026,
                          "src": "19148:17:36",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_ICurrencyPriceFeed_$3966",
                            "typeString": "contract ICurrencyPriceFeed"
                          }
                        },
                        "id": 5173,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "getUsdPriceOfToken",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 3965,
                        "src": "19148:36:36",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                          "typeString": "function (address) view external returns (uint256)"
                        }
                      },
                      "id": 5175,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "19148:80:36",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "19114:114:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "19088:140:36"
                },
                {
                  "expression": {
                    "id": 5178,
                    "name": "FAIR_RAFFLE_FEE",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 5167,
                    "src": "19245:15:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 5131,
                  "id": 5179,
                  "nodeType": "Return",
                  "src": "19238:22:36"
                }
              ]
            },
            "functionSelector": "744476b6",
            "id": 5181,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "fairRaffleFeeERC721",
            "nameLocation": "18552:19:36",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5128,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5123,
                  "mutability": "mutable",
                  "name": "_currencyInPolygon",
                  "nameLocation": "18580:18:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 5181,
                  "src": "18572:26:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5122,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "18572:7:36",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5125,
                  "mutability": "mutable",
                  "name": "_pricePerTicket",
                  "nameLocation": "18608:15:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 5181,
                  "src": "18600:23:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint128",
                    "typeString": "uint128"
                  },
                  "typeName": {
                    "id": 5124,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "18600:7:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint128",
                      "typeString": "uint128"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5127,
                  "mutability": "mutable",
                  "name": "_minimumTicketsSold",
                  "nameLocation": "18632:19:36",
                  "nodeType": "VariableDeclaration",
                  "scope": 5181,
                  "src": "18625:26:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 5126,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "18625:6:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "18571:81:36"
            },
            "returnParameters": {
              "id": 5131,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5130,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 5181,
                  "src": "18673:7:36",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5129,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "18673:7:36",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "18672:9:36"
            },
            "scope": 5182,
            "src": "18543:724:36",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 5183,
        "src": "1273:17996:36",
        "usedErrors": []
      }
    ],
    "src": "32:19237:36"
  },
  "bytecode": "608060405234801561001057600080fd5b50612f14806100206000396000f3fe6080604052600436106101b75760003560e01c8063724e78da116100ec578063a21afc761161008a578063c4ae316811610064578063c4ae3168146104e7578063da653f00146104fc578063f2fde38b1461051c578063fcc76b801461053c57600080fd5b8063a21afc7614610492578063b3f8d40d146104bf578063c2f90a2b146104d257600080fd5b80638406c079116100c65780638406c079146103fe578063863759941461041e5780638da5cb5b1461043e57806395e3d9ab1461045c57600080fd5b8063724e78da14610386578063744476b6146103a65780637b631da5146103c657600080fd5b80634e4d58bb116101595780636548e9bc116101335780636548e9bc1461032157806366998e5014610341578063697ca93014610357578063715018a61461037157600080fd5b80634e4d58bb146102d357806352defbd0146102e95780635c975abb1461030957600080fd5b806334f65fa21161019557806334f65fa21461021a578063436cc1381461023a57806343b938c51461027a578063485cc955146102b357600080fd5b806323bbcb29146101bc5780632bf78dd8146101d157806331f91a84146101fa575b600080fd5b6101cf6101ca366004612597565b61055c565b005b3480156101dd57600080fd5b506101e760985481565b6040519081526020015b60405180910390f35b34801561020657600080fd5b506101cf610215366004612676565b6109b5565b34801561022657600080fd5b506101cf6102353660046126f9565b610b29565b34801561024657600080fd5b5061026a610255366004612732565b60976020526000908152604090205460ff1681565b60405190151581526020016101f1565b34801561028657600080fd5b5061026a610295366004612732565b6001600160a01b031660009081526097602052604090205460ff1690565b3480156102bf57600080fd5b506101cf6102ce3660046126f9565b610c0c565b3480156102df57600080fd5b506101e76101f481565b3480156102f557600080fd5b506101cf610304366004612732565b610d5e565b34801561031557600080fd5b5060655460ff1661026a565b34801561032d57600080fd5b506101cf61033c366004612732565b610e1d565b34801561034d57600080fd5b506101e761271081565b34801561036357600080fd5b50609d5461026a9060ff1681565b34801561037d57600080fd5b506101cf610e86565b34801561039257600080fd5b506101cf6103a1366004612732565b610ebc565b3480156103b257600080fd5b506101e76103c136600461274f565b610f25565b3480156103d257600080fd5b50609b546103e6906001600160a01b031681565b6040516001600160a01b0390911681526020016101f1565b34801561040a57600080fd5b50609a546103e6906001600160a01b031681565b34801561042a57600080fd5b506101cf610439366004612794565b61112b565b34801561044a57600080fd5b506033546001600160a01b03166103e6565b34801561046857600080fd5b506103e6610477366004612732565b609c602052600090815260409020546001600160a01b031681565b34801561049e57600080fd5b506101e76104ad366004612732565b60996020526000908152604090205481565b6101cf6104cd366004612597565b61116c565b3480156104de57600080fd5b506101cf611559565b3480156104f357600080fd5b506101cf611597565b34801561050857600080fd5b506101e76105173660046127ad565b6115b1565b34801561052857600080fd5b506101cf610537366004612732565b611a03565b34801561054857600080fd5b506101cf6105573660046128a1565b611a9e565b60655460ff16156105885760405162461bcd60e51b815260040161057f906129a3565b60405180910390fd5b6040516331a9108f60e11b81526001600160801b03881660048201526001600160a01b03891690636352211e90602401602060405180830381865afa1580156105d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f991906129cd565b6001600160a01b0316336001600160a01b0316146106595760405162461bcd60e51b815260206004820152601760248201527f596f7520646f206e6f74206f776e2074686973204e4654000000000000000000604482015260640161057f565b6001600160a01b03861660009081526097602052604090205460ff166106c15760405162461bcd60e51b815260206004820181905260248201527f546869732063757272656e6379206973206e6f742077686974656c6973746564604482015260640161057f565b6001846001600160401b0316116106ea5760405162461bcd60e51b815260040161057f906129ea565b836001600160401b0316836001600160401b0316111561071c5760405162461bcd60e51b815260040161057f90612a2e565b61a8c0826001600160401b031610156107775760405162461bcd60e51b815260206004820152601c60248201527f4d696e696d756d206475726174696f6e20697320313220686f75727300000000604482015260640161057f565b6000610784878786610f25565b9050806098546107949190612a92565b34146107d85760405162461bcd60e51b8152602060048201526013602482015272125b98dbdc9c9958dd081999595cc81cd95b9d606a1b604482015260640161057f565b609854600080805260996020527f235d629dc802037ded8c61cb27fb29e40fa01b299719d8f991ffe20bdcc59f4f8054909190610816908490612a92565b90915550506040516323b872dd60e01b81523360048201523060248201526001600160801b03891660448201526001600160a01b038a16906323b872dd90606401600060405180830381600087803b15801561087157600080fd5b505af1158015610885573d6000803e3d6000fd5b50506040516331a9108f60e11b81526001600160801b038b1660048201526001600160a01b038c169250636352211e9150602401602060405180830381865afa1580156108d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fa91906129cd565b6001600160a01b0316306001600160a01b03161461094c5760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b604482015260640161057f565b7fb26c0bf32d8d3eff0d0561d0b30f4bf8962a18678833b276fcbbe06c48e9eaaa893360008b8b8b8b8b6109896001600160401b038d1642612a92565b8b8b6040516109a29b9a99989796959493929190612aaa565b60405180910390a1505050505050505050565b83828114610a055760405162461bcd60e51b815260206004820152601a60248201527f4172726179206c656e6774687320646f206e6f74206d61746368000000000000604482015260640161057f565b60008060005b83811015610b1e57888882818110610a2557610a25612b63565b9050602002016020810190610a3a9190612732565b9150868682818110610a4e57610a4e612b63565b90506020020135925060996000836001600160a01b03166001600160a01b0316815260200190815260200160002054831115610abe5760405162461bcd60e51b815260206004820152600f60248201526e082dadeeadce840e8dede40d0d2ced608b1b604482015260640161057f565b6001600160a01b038216610adb57610ad68584611eac565b610aef565b610aef6001600160a01b0383168685611ff0565b6001600160a01b038216600090815260996020526040902080548490039055610b1781612b79565b9050610a0b565b505050505050505050565b6001600160a01b03821660009081526097602052604090205460ff1615610b925760405162461bcd60e51b815260206004820152601c60248201527f546f6b656e20697320616c72656164792077686974656c697374656400000000604482015260640161057f565b6001600160a01b0382811660008181526097602090815260408083208054600160ff19909116179055609c82529182902080546001600160a01b03191694861694909417909355519081527f5c6cf68a9d7e416d0eee740661627dd794257920f1c63ddae6c6af81d02d12ea910160405180910390a15050565b6000610c186001612053565b90508015610c30576000805461ff0019166101001790555b610c386120e0565b610c4061210f565b609a80546001600160a01b038086166001600160a01b031992831617909255609b805492851692821692909217909155609d805460ff199081166001908117909255737ceb23fd6bc0add59e62ac25578270cff1b9f6196000527f1a0acac70e8cab5a31ac0c028653f1612aec657b1c8333c74eaba0c30e0ee39180549091169091179055609c6020527f54cb885aae8efe3410af7107761edcae51ee12661f9443184b5e9d063ddf7fa5805490911673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2179055666a94d74f4300006098558015610d59576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6001600160a01b03811660009081526097602052604090205460ff16610dc65760405162461bcd60e51b815260206004820152601860248201527f546f6b656e206973206e6f742077686974656c69737465640000000000000000604482015260640161057f565b6001600160a01b038116600081815260976020908152604091829020805460ff1916905590519182527f0dc0548bc90523a9e943ea77d199875fdc1e4f8a419b6d53a595b5e6671480e5910160405180910390a150565b609a54604080516001600160a01b03928316815291831660208301527f605ca4e43489fb38b91aa63dd9147cd3847957694b080b9285ec898b34269f0c910160405180910390a1609a80546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b03163314610eb05760405162461bcd60e51b815260040161057f90612b92565b610eba600061213e565b565b609b54604080516001600160a01b03928316815291831660208301527fa8abe0398416476db5b05737cd4da3b3cbde5012d978a6a6c3fd49d321753536910160405180910390a1609b80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038084166000908152609c6020908152604080832054815163313ce56760e01b815291519394859491169263313ce56792600480820193918290030181865afa158015610f7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa19190612bc7565b610fac90600a612cd0565b609b546001600160a01b038781166000908152609c60205260409081902054905163a4b943fb60e01b815290821660048201526001600160401b038716926001600160801b03891692169063a4b943fb90602401602060405180830381865afa15801561101d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110419190612cdf565b61104b9190612cf8565b6110559190612cf8565b61105f9190612d2d565b905060006127106110726101f484612cf8565b61107c9190612d2d565b609b5460405163a4b943fb60e01b815273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee60048201529192506000916001600160a01b039091169063a4b943fb90602401602060405180830381865afa1580156110de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111029190612cdf565b61111483670de0b6b3a7640000612cf8565b61111e9190612d2d565b93505050505b9392505050565b60985460408051918252602082018390527f9dc2340c6769757c8d7dfe3a65a3f1e297ed8f919bed31501223ac8aa85dc63d910160405180910390a1609855565b60655460ff161561118f5760405162461bcd60e51b815260040161057f906129a3565b6001600160a01b03861660009081526097602052604090205460ff166111f75760405162461bcd60e51b815260206004820181905260248201527f546869732063757272656e6379206973206e6f742077686974656c6973746564604482015260640161057f565b6001846001600160401b0316116112205760405162461bcd60e51b815260040161057f906129ea565b836001600160401b0316836001600160401b031611156112525760405162461bcd60e51b815260040161057f90612a2e565b61a8c0826001600160401b031610156112ad5760405162461bcd60e51b815260206004820152601c60248201527f4d696e696d756d206475726174696f6e20697320313220686f75727300000000604482015260640161057f565b60006112bd8989898989896115b1565b90506001600160a01b03891661132b576098546112e3906001600160801b038a16612a92565b34146113265760405162461bcd60e51b8152602060048201526012602482015271125b98dbdc9c9958dd08199959481cd95b9d60721b604482015260640161057f565b6114d8565b609854341461137c5760405162461bcd60e51b815260206004820152601a60248201527f496e636f7272656374204f50454e494e475f4645452073656e74000000000000604482015260640161057f565b6040516370a0823160e01b81523060048201526000906001600160a01b038b16906370a0823190602401602060405180830381865afa1580156113c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e79190612cdf565b90506114076001600160a01b038b1633306001600160801b038d16612190565b6040516370a0823160e01b81523060048201526000906001600160a01b038c16906370a0823190602401602060405180830381865afa15801561144e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114729190612cdf565b905061147e8282612d41565b8a6001600160801b0316146114d55760405162461bcd60e51b815260206004820152601b60248201527f455243323020746f6b656e207472616e73666572206661696c65640000000000604482015260640161057f565b50505b609854600080805260996020527f235d629dc802037ded8c61cb27fb29e40fa01b299719d8f991ffe20bdcc59f4f8054909190611516908490612a92565b909155507fb26c0bf32d8d3eff0d0561d0b30f4bf8962a18678833b276fcbbe06c48e9eaaa9050893360018b8b8b8b8b6109896001600160401b038d1642612a92565b6033546001600160a01b031633146115835760405162461bcd60e51b815260040161057f90612b92565b609d805460ff19811660ff90911615179055565b60655460ff166115a957610eba6121c8565b610eba61223d565b609d54600090819060ff166115fd576127106101f46115d9876001600160401b038716612d58565b6001600160801b03166115ec9190612cf8565b6115f69190612d2d565b90506119f8565b60006001600160a01b0389166116c157609b5460405163a4b943fb60e01b815273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2600482018190529a50670de0b6b3a7640000916001600160801b038b16916001600160a01b039091169063a4b943fb90602401602060405180830381865afa158015611682573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a69190612cdf565b6116b09190612cf8565b6116ba9190612d2d565b90506117bc565b886001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117239190612bc7565b61172e90600a612cd0565b609b5460405163a4b943fb60e01b81526001600160a01b038c811660048301526001600160801b038c1692169063a4b943fb90602401602060405180830381865afa158015611781573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a59190612cdf565b6117af9190612cf8565b6117b99190612d2d565b90505b6001600160a01b038088166000908152609c6020908152604080832054815163313ce56760e01b815291519394169263313ce567926004808401939192918290030181865afa158015611813573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118379190612bc7565b61184290600a612cd0565b609b546001600160a01b038a81166000908152609c60205260409081902054905163a4b943fb60e01b815290821660048201526001600160801b038b16926001600160401b038b1692169063a4b943fb90602401602060405180830381865afa1580156118b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d79190612cdf565b6118e19190612cf8565b6118eb9190612cf8565b6118f59190612d2d565b905060008261190683612710612cf8565b6119109190612d2d565b9050612710811161192457600093506119f4565b612710811180156119375750612af88111155b1561197857612710611952896001600160401b038916612d58565b61195e906101f4612d58565b6119689190612d87565b6001600160801b031693506119f4565b612af88111801561198b57506130d48111155b156119b2576127106119a6896001600160401b038916612d58565b61195e906103e8612d58565b6130d48111156119f4576127106119d2896001600160401b038916612d58565b6119de906107d0612d58565b6119e89190612d87565b6001600160801b031693505b5050505b979650505050505050565b6033546001600160a01b03163314611a2d5760405162461bcd60e51b815260040161057f90612b92565b6001600160a01b038116611a925760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161057f565b611a9b8161213e565b50565b805160005b81811015610d5957828181518110611abd57611abd612b63565b60200260200101516040015115611bde5760006001600160a01b0316838281518110611aeb57611aeb612b63565b6020026020010151600001516001600160a01b031614611bd957828181518110611b1757611b17612b63565b6020026020010151602001516001600160a01b03166323b872dd30858481518110611b4457611b44612b63565b602002602001015160000151868581518110611b6257611b62612b63565b6020908102919091010151606001516040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b158015611bc057600080fd5b505af1158015611bd4573d6000803e3d6000fd5b505050505b611d05565b60006001600160a01b0316838281518110611bfb57611bfb612b63565b6020026020010151600001516001600160a01b031614611d055760006001600160a01b0316838281518110611c3257611c32612b63565b6020026020010151602001516001600160a01b031603611c9057611bd9838281518110611c6157611c61612b63565b602002602001015160000151848381518110611c7f57611c7f612b63565b602002602001015160600151611eac565b611d05838281518110611ca557611ca5612b63565b602002602001015160000151848381518110611cc357611cc3612b63565b602002602001015160600151858481518110611ce157611ce1612b63565b6020026020010151602001516001600160a01b0316611ff09092919063ffffffff16565b6000838281518110611d1957611d19612b63565b6020026020010151608001511115611da057828181518110611d3d57611d3d612b63565b60200260200101516080015160996000858481518110611d5f57611d5f612b63565b6020026020010151602001516001600160a01b03166001600160a01b031681526020019081526020016000206000828254611d9a9190612a92565b90915550505b7ffdf87137985fce097c2059f7e3bd28b9104995cad66709fdecbaa5e8e48da9af838281518110611dd357611dd3612b63565b602002602001015160000151848381518110611df157611df1612b63565b602002602001015160200151858481518110611e0f57611e0f612b63565b602002602001015160400151868581518110611e2d57611e2d612b63565b602002602001015160600151878681518110611e4b57611e4b612b63565b602002602001015160800151604051611e949594939291906001600160a01b03958616815293909416602084015290151560408301526060820152608081019190915260a00190565b60405180910390a1611ea581612b79565b9050611aa3565b80471015611efc5760405162461bcd60e51b815260206004820152601e60248201527f5f68616e646c6545746865725472616e7366657220696e736f6c76656e740000604482015260640161057f565b60005a90506000836001600160a01b0316838390604051600060405180830381858888f193505050503d8060008114611f51576040519150601f19603f3d011682016040523d82523d6000602084013e611f56565b606091505b5050905080611fea5773c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26001600160a01b031663d0e30db0846040518263ffffffff1660e01b81526004016000604051808303818588803b158015611fae57600080fd5b505af1158015611fc2573d6000803e3d6000fd5b50611fea935073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc29250879150869050611ff0565b50505050565b6040516001600160a01b038316602482015260448101829052610d5990849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526122b7565b60008054610100900460ff161561209a578160ff1660011480156120765750303b155b6120925760405162461bcd60e51b815260040161057f90612dad565b506000919050565b60005460ff8084169116106120c15760405162461bcd60e51b815260040161057f90612dad565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff166121075760405162461bcd60e51b815260040161057f90612dfb565b610eba612389565b600054610100900460ff166121365760405162461bcd60e51b815260040161057f90612dfb565b610eba6123b9565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b0380851660248301528316604482015260648101829052611fea9085906323b872dd60e01b9060840161201c565b60655460ff16156121eb5760405162461bcd60e51b815260040161057f906129a3565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586122203390565b6040516001600160a01b03909116815260200160405180910390a1565b60655460ff166122865760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161057f565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33612220565b600061230c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166123ec9092919063ffffffff16565b805190915015610d59578080602001905181019061232a9190612e46565b610d595760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161057f565b600054610100900460ff166123b05760405162461bcd60e51b815260040161057f90612dfb565b610eba3361213e565b600054610100900460ff166123e05760405162461bcd60e51b815260040161057f90612dfb565b6065805460ff19169055565b60606123fb8484600085612403565b949350505050565b6060824710156124645760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161057f565b843b6124b25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161057f565b600080866001600160a01b031685876040516124ce9190612e8f565b60006040518083038185875af1925050503d806000811461250b576040519150601f19603f3d011682016040523d82523d6000602084013e612510565b606091505b50915091506119f88282866060831561252a575081611124565b82511561253a5782518084602001fd5b8160405162461bcd60e51b815260040161057f9190612eab565b6001600160a01b0381168114611a9b57600080fd5b80356001600160801b03811681146120db57600080fd5b80356001600160401b03811681146120db57600080fd5b600080600080600080600080610100898b0312156125b457600080fd5b88356125bf81612554565b97506125cd60208a01612569565b965060408901356125dd81612554565b95506125eb60608a01612569565b94506125f960808a01612580565b935061260760a08a01612580565b925061261560c08a01612580565b915060e089013590509295985092959890939650565b60008083601f84011261263d57600080fd5b5081356001600160401b0381111561265457600080fd5b6020830191508360208260051b850101111561266f57600080fd5b9250929050565b60008060008060006060868803121561268e57600080fd5b85356001600160401b03808211156126a557600080fd5b6126b189838a0161262b565b909750955060208801359150808211156126ca57600080fd5b506126d78882890161262b565b90945092505060408601356126eb81612554565b809150509295509295909350565b6000806040838503121561270c57600080fd5b823561271781612554565b9150602083013561272781612554565b809150509250929050565b60006020828403121561274457600080fd5b813561112481612554565b60008060006060848603121561276457600080fd5b833561276f81612554565b925061277d60208501612569565b915061278b60408501612580565b90509250925092565b6000602082840312156127a657600080fd5b5035919050565b60008060008060008060c087890312156127c657600080fd5b86356127d181612554565b95506127df60208801612569565b945060408701356127ef81612554565b93506127fd60608801612569565b925061280b60808801612580565b915061281960a08801612580565b90509295509295509295565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b038111828210171561285d5761285d612825565b60405290565b604051601f8201601f191681016001600160401b038111828210171561288b5761288b612825565b604052919050565b8015158114611a9b57600080fd5b600060208083850312156128b457600080fd5b82356001600160401b03808211156128cb57600080fd5b818501915085601f8301126128df57600080fd5b8135818111156128f1576128f1612825565b6128ff848260051b01612863565b818152848101925060a091820284018501918883111561291e57600080fd5b938501935b828510156129975780858a03121561293b5760008081fd5b61294361283b565b853561294e81612554565b81528587013561295d81612554565b8188015260408681013561297081612893565b90820152606086810135908201526080808701359082015284529384019392850192612923565b50979650505050505050565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6000602082840312156129df57600080fd5b815161112481612554565b60208082526024908201527f526166666c6573206d7573742068617665206174206c656173742032207469636040820152636b65747360e01b606082015260800190565b6020808252602e908201527f5f6d696e696d756d5469636b657473536f6c642073686f756c64203c3d205f6e60408201526d756d6265724f665469636b65747360901b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60008219821115612aa557612aa5612a7c565b500190565b6001600160a01b038c811682528b166020820152610160810160028b10612ae157634e487b7160e01b600052602160045260246000fd5b8a6040830152612afc606083018b6001600160801b03169052565b6001600160a01b03891660808301526001600160801b03881660a08301526001600160401b03871660c08301526001600160401b03861660e08301526001600160401b03851661010083015261012082019390935261014001529998505050505050505050565b634e487b7160e01b600052603260045260246000fd5b600060018201612b8b57612b8b612a7c565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208284031215612bd957600080fd5b815160ff8116811461112457600080fd5b600181815b80851115612c25578160001904821115612c0b57612c0b612a7c565b80851615612c1857918102915b93841c9390800290612bef565b509250929050565b600082612c3c57506001612cca565b81612c4957506000612cca565b8160018114612c5f5760028114612c6957612c85565b6001915050612cca565b60ff841115612c7a57612c7a612a7c565b50506001821b612cca565b5060208310610133831016604e8410600b8410161715612ca8575081810a612cca565b612cb28383612bea565b8060001904821115612cc657612cc6612a7c565b0290505b92915050565b600061112460ff841683612c2d565b600060208284031215612cf157600080fd5b5051919050565b6000816000190483118215151615612d1257612d12612a7c565b500290565b634e487b7160e01b600052601260045260246000fd5b600082612d3c57612d3c612d17565b500490565b600082821015612d5357612d53612a7c565b500390565b60006001600160801b0380831681851681830481118215151615612d7e57612d7e612a7c565b02949350505050565b60006001600160801b0380841680612da157612da1612d17565b92169190910492915050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060208284031215612e5857600080fd5b815161112481612893565b60005b83811015612e7e578181015183820152602001612e66565b83811115611fea5750506000910152565b60008251612ea1818460208701612e63565b9190910192915050565b6020815260008251806020840152612eca816040850160208701612e63565b601f01601f1916919091016040019291505056fea264697066735822122068b29d7129f9f074f938f871b06e8b2a7e504a4734c5da5b7316dd9c36208f5164736f6c634300080e0033",
  "bytecodeSha1": "f7d5193608cae1a6502425d06b083cd4ee3e72fb",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.14+commit.80d49f37"
  },
  "contractName": "MockMainnetEscrow",
  "coverageMap": {
    "branches": {
      "0": {
        "OwnableUpgradeable.transferOwnership": {
          "137": [
            2246,
            2268,
            true
          ]
        }
      },
      "1": {
        "Initializable._setInitializedVersion": {
          "133": [
            5684,
            5697,
            false
          ],
          "134": [
            5738,
            5750,
            false
          ],
          "135": [
            5944,
            5966,
            true
          ]
        },
        "PausableUpgradeable.__Pausable_init_unchained": {
          "136": [
            4698,
            4711,
            true
          ]
        }
      },
      "11": {},
      "15": {
        "Address._verifyCallResult": {
          "131": [
            7226,
            7233,
            false
          ],
          "132": [
            7367,
            7388,
            false
          ]
        },
        "Address.functionCallWithValue": {
          "130": [
            4759,
            4789,
            true
          ]
        }
      },
      "2": {},
      "20": {},
      "32": {},
      "36": {
        "MockMainnetEscrow._handleEtherTransfer": {
          "128": [
            12088,
            12120,
            true
          ],
          "129": [
            12356,
            12363,
            false
          ]
        },
        "MockMainnetEscrow.blacklistCurrency": {
          "110": [
            14737,
            14785,
            true
          ]
        },
        "MockMainnetEscrow.createERC20Raffle": {
          "111": [
            8791,
            8832,
            true
          ],
          "112": [
            8887,
            8907,
            true
          ],
          "113": [
            8966,
            9005,
            true
          ],
          "114": [
            9074,
            9101,
            true
          ],
          "115": [
            9313,
            9340,
            false
          ],
          "116": [
            9364,
            9398,
            true
          ],
          "117": [
            9460,
            9484,
            true
          ],
          "118": [
            9839,
            9878,
            true
          ]
        },
        "MockMainnetEscrow.createERC721Raffle": {
          "99": [
            6041,
            6094,
            true
          ],
          "100": [
            6140,
            6181,
            true
          ],
          "101": [
            6236,
            6256,
            true
          ],
          "102": [
            6315,
            6354,
            true
          ],
          "103": [
            6423,
            6450,
            true
          ],
          "104": [
            6701,
            6745,
            true
          ],
          "105": [
            6975,
            7031,
            true
          ]
        },
        "MockMainnetEscrow.fairRaffleFeeERC20": {
          "119": [
            16795,
            16812,
            false
          ],
          "120": [
            17027,
            17054,
            false
          ],
          "121": [
            17885,
            17899,
            false
          ],
          "122": [
            18346,
            18359,
            false
          ]
        },
        "MockMainnetEscrow.polygonCallback": {
          "123": [
            10633,
            10656,
            false
          ],
          "124": [
            10678,
            10715,
            false
          ],
          "125": [
            10939,
            10976,
            false
          ],
          "126": [
            11002,
            11044,
            false
          ],
          "127": [
            11416,
            11463,
            false
          ]
        },
        "MockMainnetEscrow.whitelistCurrency": {
          "109": [
            14216,
            14265,
            true
          ]
        },
        "MockMainnetEscrow.withdrawFees": {
          "106": [
            15407,
            15429,
            true
          ],
          "107": [
            15655,
            15699,
            true
          ],
          "108": [
            15736,
            15762,
            false
          ]
        }
      },
      "5": {},
      "8": {},
      "9": {
        "SafeERC20._callOptionalReturn": {
          "138": [
            3550,
            3571,
            false
          ],
          "139": [
            3679,
            3709,
            true
          ]
        }
      }
    },
    "statements": {
      "0": {
        "OwnableUpgradeable.__Ownable_init": {
          "81": [
            1050,
            1076
          ]
        },
        "OwnableUpgradeable.__Ownable_init_unchained": {
          "91": [
            1161,
            1193
          ]
        },
        "OwnableUpgradeable._transferOwnership": {
          "83": [
            2618,
            2635
          ],
          "84": [
            2645,
            2690
          ]
        },
        "OwnableUpgradeable.owner": {
          "2": [
            1341,
            1354
          ]
        },
        "OwnableUpgradeable.renounceOwnership": {
          "39": [
            1972,
            2002
          ]
        },
        "OwnableUpgradeable.transferOwnership": {
          "65": [
            2238,
            2311
          ],
          "66": [
            2321,
            2349
          ]
        }
      },
      "1": {
        "Initializable._setInitializedVersion": {
          "77": [
            5713,
            5879
          ],
          "78": [
            5893,
            5905
          ],
          "79": [
            5936,
            6017
          ],
          "80": [
            6031,
            6053
          ]
        }
      },
      "11": {},
      "15": {
        "Address._verifyCallResult": {
          "97": [
            7249,
            7266
          ],
          "98": [
            7757,
            7777
          ]
        },
        "Address.functionCall": {
          "93": [
            3700,
            3759
          ]
        },
        "Address.functionCallWithValue": {
          "94": [
            4751,
            4832
          ],
          "95": [
            4842,
            4902
          ],
          "96": [
            5057,
            5116
          ]
        }
      },
      "2": {
        "PausableUpgradeable.__Pausable_init": {
          "82": [
            1111,
            1138
          ]
        },
        "PausableUpgradeable.__Pausable_init_unchained": {
          "92": [
            1224,
            1239
          ]
        },
        "PausableUpgradeable._pause": {
          "86": [
            2165,
            2179
          ],
          "87": [
            2189,
            2214
          ]
        },
        "PausableUpgradeable._unpause": {
          "88": [
            2411,
            2426
          ],
          "89": [
            2436,
            2463
          ]
        },
        "PausableUpgradeable.paused": {
          "1": [
            1404,
            1418
          ]
        }
      },
      "20": {},
      "32": {},
      "36": {
        "MockMainnetEscrow._handleEtherTransfer": {
          "73": [
            12080,
            12155
          ],
          "74": [
            12379,
            12409
          ],
          "75": [
            12423,
            12473
          ]
        },
        "MockMainnetEscrow.blacklistCurrency": {
          "33": [
            14729,
            14814
          ],
          "34": [
            14824,
            14880
          ],
          "35": [
            14890,
            14942
          ]
        },
        "MockMainnetEscrow.createERC20Raffle": {
          "44": [
            8783,
            8869
          ],
          "45": [
            8879,
            8948
          ],
          "46": [
            8958,
            9056
          ],
          "47": [
            9066,
            9134
          ],
          "48": [
            9356,
            9421
          ],
          "49": [
            9452,
            9515
          ],
          "50": [
            9660,
            9734
          ],
          "51": [
            9831,
            9910
          ],
          "52": [
            9931,
            9978
          ],
          "53": [
            9988,
            10360
          ]
        },
        "MockMainnetEscrow.createERC721Raffle": {
          "3": [
            6033,
            6122
          ],
          "4": [
            6132,
            6218
          ],
          "5": [
            6228,
            6297
          ],
          "6": [
            6307,
            6405
          ],
          "7": [
            6415,
            6483
          ],
          "8": [
            6693,
            6769
          ],
          "9": [
            6779,
            6826
          ],
          "10": [
            6886,
            6957
          ],
          "11": [
            6967,
            7051
          ],
          "12": [
            7062,
            7435
          ]
        },
        "MockMainnetEscrow.fairRaffleFeeERC20": {
          "57": [
            16827,
            16942
          ],
          "58": [
            17120,
            17220
          ],
          "59": [
            17298,
            17436
          ],
          "60": [
            17918,
            17937
          ],
          "61": [
            18051,
            18122
          ],
          "62": [
            18237,
            18309
          ],
          "63": [
            18402,
            18474
          ],
          "64": [
            18508,
            18530
          ]
        },
        "MockMainnetEscrow.initialize": {
          "25": [
            4159,
            4175
          ],
          "26": [
            4185,
            4202
          ],
          "27": [
            4213,
            4231
          ],
          "28": [
            4241,
            4299
          ],
          "29": [
            4309,
            4333
          ],
          "30": [
            4378,
            4450
          ],
          "31": [
            4500,
            4588
          ],
          "32": [
            4598,
            4622
          ]
        },
        "MockMainnetEscrow.isCurrencyWhitelisted": {
          "0": [
            16490,
            16531
          ]
        },
        "MockMainnetEscrow.polygonCallback": {
          "67": [
            10738,
            10868
          ],
          "68": [
            11071,
            11156
          ],
          "69": [
            11231,
            11345
          ],
          "70": [
            11482,
            11579
          ],
          "71": [
            11607,
            11887
          ],
          "72": [
            10612,
            10615
          ]
        },
        "MockMainnetEscrow.setOpeningFee": {
          "42": [
            13749,
            13797
          ],
          "43": [
            13807,
            13832
          ]
        },
        "MockMainnetEscrow.setPriceFeed": {
          "40": [
            13284,
            13353
          ],
          "41": [
            13363,
            13421
          ]
        },
        "MockMainnetEscrow.setRelayer": {
          "36": [
            13059,
            13097
          ],
          "37": [
            13107,
            13125
          ]
        },
        "MockMainnetEscrow.togglePause": {
          "55": [
            12890,
            12898
          ],
          "56": [
            12913,
            12923
          ]
        },
        "MockMainnetEscrow.togglePriceFeed": {
          "54": [
            13573,
            13611
          ]
        },
        "MockMainnetEscrow.whitelistCurrency": {
          "21": [
            14208,
            14298
          ],
          "22": [
            14308,
            14363
          ],
          "23": [
            14373,
            14456
          ],
          "24": [
            14466,
            14516
          ]
        },
        "MockMainnetEscrow.withdrawFees": {
          "13": [
            15399,
            15460
          ],
          "14": [
            15568,
            15599
          ],
          "15": [
            15613,
            15633
          ],
          "16": [
            15647,
            15719
          ],
          "17": [
            15781,
            15820
          ],
          "18": [
            15870,
            15922
          ],
          "19": [
            16070,
            16114
          ],
          "20": [
            15549,
            15552
          ]
        }
      },
      "5": {
        "ContextUpgradeable._msgSender": {
          "38": [
            922,
            939
          ]
        }
      },
      "8": {},
      "9": {
        "SafeERC20._callOptionalReturn": {
          "90": [
            3671,
            3756
          ]
        },
        "SafeERC20.safeTransfer": {
          "76": [
            716,
            802
          ]
        },
        "SafeERC20.safeTransferFrom": {
          "85": [
            915,
            1011
          ]
        }
      }
    }
  },
  "dependencies": [
    "OpenZeppelin/openzeppelin-contracts@4.0.0/Address",
    "OpenZeppelin/openzeppelin-contracts-upgradeable@4.6.0/ContextUpgradeable",
    "ICurrencyPriceFeed",
    "OpenZeppelin/openzeppelin-contracts@4.0.0/IERC165",
    "OpenZeppelin/openzeppelin-contracts@4.0.0/IERC20",
    "IERC20Extented",
    "OpenZeppelin/openzeppelin-contracts@4.0.0/IERC721",
    "IWETH",
    "OpenZeppelin/openzeppelin-contracts-upgradeable@4.6.0/Initializable",
    "OpenZeppelin/openzeppelin-contracts-upgradeable@4.6.0/OwnableUpgradeable",
    "OpenZeppelin/openzeppelin-contracts-upgradeable@4.6.0/PausableUpgradeable",
    "OpenZeppelin/openzeppelin-contracts@4.0.0/SafeERC20"
  ],
  "deployedBytecode": "6080604052600436106101b75760003560e01c8063724e78da116100ec578063a21afc761161008a578063c4ae316811610064578063c4ae3168146104e7578063da653f00146104fc578063f2fde38b1461051c578063fcc76b801461053c57600080fd5b8063a21afc7614610492578063b3f8d40d146104bf578063c2f90a2b146104d257600080fd5b80638406c079116100c65780638406c079146103fe578063863759941461041e5780638da5cb5b1461043e57806395e3d9ab1461045c57600080fd5b8063724e78da14610386578063744476b6146103a65780637b631da5146103c657600080fd5b80634e4d58bb116101595780636548e9bc116101335780636548e9bc1461032157806366998e5014610341578063697ca93014610357578063715018a61461037157600080fd5b80634e4d58bb146102d357806352defbd0146102e95780635c975abb1461030957600080fd5b806334f65fa21161019557806334f65fa21461021a578063436cc1381461023a57806343b938c51461027a578063485cc955146102b357600080fd5b806323bbcb29146101bc5780632bf78dd8146101d157806331f91a84146101fa575b600080fd5b6101cf6101ca366004612597565b61055c565b005b3480156101dd57600080fd5b506101e760985481565b6040519081526020015b60405180910390f35b34801561020657600080fd5b506101cf610215366004612676565b6109b5565b34801561022657600080fd5b506101cf6102353660046126f9565b610b29565b34801561024657600080fd5b5061026a610255366004612732565b60976020526000908152604090205460ff1681565b60405190151581526020016101f1565b34801561028657600080fd5b5061026a610295366004612732565b6001600160a01b031660009081526097602052604090205460ff1690565b3480156102bf57600080fd5b506101cf6102ce3660046126f9565b610c0c565b3480156102df57600080fd5b506101e76101f481565b3480156102f557600080fd5b506101cf610304366004612732565b610d5e565b34801561031557600080fd5b5060655460ff1661026a565b34801561032d57600080fd5b506101cf61033c366004612732565b610e1d565b34801561034d57600080fd5b506101e761271081565b34801561036357600080fd5b50609d5461026a9060ff1681565b34801561037d57600080fd5b506101cf610e86565b34801561039257600080fd5b506101cf6103a1366004612732565b610ebc565b3480156103b257600080fd5b506101e76103c136600461274f565b610f25565b3480156103d257600080fd5b50609b546103e6906001600160a01b031681565b6040516001600160a01b0390911681526020016101f1565b34801561040a57600080fd5b50609a546103e6906001600160a01b031681565b34801561042a57600080fd5b506101cf610439366004612794565b61112b565b34801561044a57600080fd5b506033546001600160a01b03166103e6565b34801561046857600080fd5b506103e6610477366004612732565b609c602052600090815260409020546001600160a01b031681565b34801561049e57600080fd5b506101e76104ad366004612732565b60996020526000908152604090205481565b6101cf6104cd366004612597565b61116c565b3480156104de57600080fd5b506101cf611559565b3480156104f357600080fd5b506101cf611597565b34801561050857600080fd5b506101e76105173660046127ad565b6115b1565b34801561052857600080fd5b506101cf610537366004612732565b611a03565b34801561054857600080fd5b506101cf6105573660046128a1565b611a9e565b60655460ff16156105885760405162461bcd60e51b815260040161057f906129a3565b60405180910390fd5b6040516331a9108f60e11b81526001600160801b03881660048201526001600160a01b03891690636352211e90602401602060405180830381865afa1580156105d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f991906129cd565b6001600160a01b0316336001600160a01b0316146106595760405162461bcd60e51b815260206004820152601760248201527f596f7520646f206e6f74206f776e2074686973204e4654000000000000000000604482015260640161057f565b6001600160a01b03861660009081526097602052604090205460ff166106c15760405162461bcd60e51b815260206004820181905260248201527f546869732063757272656e6379206973206e6f742077686974656c6973746564604482015260640161057f565b6001846001600160401b0316116106ea5760405162461bcd60e51b815260040161057f906129ea565b836001600160401b0316836001600160401b0316111561071c5760405162461bcd60e51b815260040161057f90612a2e565b61a8c0826001600160401b031610156107775760405162461bcd60e51b815260206004820152601c60248201527f4d696e696d756d206475726174696f6e20697320313220686f75727300000000604482015260640161057f565b6000610784878786610f25565b9050806098546107949190612a92565b34146107d85760405162461bcd60e51b8152602060048201526013602482015272125b98dbdc9c9958dd081999595cc81cd95b9d606a1b604482015260640161057f565b609854600080805260996020527f235d629dc802037ded8c61cb27fb29e40fa01b299719d8f991ffe20bdcc59f4f8054909190610816908490612a92565b90915550506040516323b872dd60e01b81523360048201523060248201526001600160801b03891660448201526001600160a01b038a16906323b872dd90606401600060405180830381600087803b15801561087157600080fd5b505af1158015610885573d6000803e3d6000fd5b50506040516331a9108f60e11b81526001600160801b038b1660048201526001600160a01b038c169250636352211e9150602401602060405180830381865afa1580156108d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fa91906129cd565b6001600160a01b0316306001600160a01b03161461094c5760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b604482015260640161057f565b7fb26c0bf32d8d3eff0d0561d0b30f4bf8962a18678833b276fcbbe06c48e9eaaa893360008b8b8b8b8b6109896001600160401b038d1642612a92565b8b8b6040516109a29b9a99989796959493929190612aaa565b60405180910390a1505050505050505050565b83828114610a055760405162461bcd60e51b815260206004820152601a60248201527f4172726179206c656e6774687320646f206e6f74206d61746368000000000000604482015260640161057f565b60008060005b83811015610b1e57888882818110610a2557610a25612b63565b9050602002016020810190610a3a9190612732565b9150868682818110610a4e57610a4e612b63565b90506020020135925060996000836001600160a01b03166001600160a01b0316815260200190815260200160002054831115610abe5760405162461bcd60e51b815260206004820152600f60248201526e082dadeeadce840e8dede40d0d2ced608b1b604482015260640161057f565b6001600160a01b038216610adb57610ad68584611eac565b610aef565b610aef6001600160a01b0383168685611ff0565b6001600160a01b038216600090815260996020526040902080548490039055610b1781612b79565b9050610a0b565b505050505050505050565b6001600160a01b03821660009081526097602052604090205460ff1615610b925760405162461bcd60e51b815260206004820152601c60248201527f546f6b656e20697320616c72656164792077686974656c697374656400000000604482015260640161057f565b6001600160a01b0382811660008181526097602090815260408083208054600160ff19909116179055609c82529182902080546001600160a01b03191694861694909417909355519081527f5c6cf68a9d7e416d0eee740661627dd794257920f1c63ddae6c6af81d02d12ea910160405180910390a15050565b6000610c186001612053565b90508015610c30576000805461ff0019166101001790555b610c386120e0565b610c4061210f565b609a80546001600160a01b038086166001600160a01b031992831617909255609b805492851692821692909217909155609d805460ff199081166001908117909255737ceb23fd6bc0add59e62ac25578270cff1b9f6196000527f1a0acac70e8cab5a31ac0c028653f1612aec657b1c8333c74eaba0c30e0ee39180549091169091179055609c6020527f54cb885aae8efe3410af7107761edcae51ee12661f9443184b5e9d063ddf7fa5805490911673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2179055666a94d74f4300006098558015610d59576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6001600160a01b03811660009081526097602052604090205460ff16610dc65760405162461bcd60e51b815260206004820152601860248201527f546f6b656e206973206e6f742077686974656c69737465640000000000000000604482015260640161057f565b6001600160a01b038116600081815260976020908152604091829020805460ff1916905590519182527f0dc0548bc90523a9e943ea77d199875fdc1e4f8a419b6d53a595b5e6671480e5910160405180910390a150565b609a54604080516001600160a01b03928316815291831660208301527f605ca4e43489fb38b91aa63dd9147cd3847957694b080b9285ec898b34269f0c910160405180910390a1609a80546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b03163314610eb05760405162461bcd60e51b815260040161057f90612b92565b610eba600061213e565b565b609b54604080516001600160a01b03928316815291831660208301527fa8abe0398416476db5b05737cd4da3b3cbde5012d978a6a6c3fd49d321753536910160405180910390a1609b80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038084166000908152609c6020908152604080832054815163313ce56760e01b815291519394859491169263313ce56792600480820193918290030181865afa158015610f7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa19190612bc7565b610fac90600a612cd0565b609b546001600160a01b038781166000908152609c60205260409081902054905163a4b943fb60e01b815290821660048201526001600160401b038716926001600160801b03891692169063a4b943fb90602401602060405180830381865afa15801561101d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110419190612cdf565b61104b9190612cf8565b6110559190612cf8565b61105f9190612d2d565b905060006127106110726101f484612cf8565b61107c9190612d2d565b609b5460405163a4b943fb60e01b815273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee60048201529192506000916001600160a01b039091169063a4b943fb90602401602060405180830381865afa1580156110de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111029190612cdf565b61111483670de0b6b3a7640000612cf8565b61111e9190612d2d565b93505050505b9392505050565b60985460408051918252602082018390527f9dc2340c6769757c8d7dfe3a65a3f1e297ed8f919bed31501223ac8aa85dc63d910160405180910390a1609855565b60655460ff161561118f5760405162461bcd60e51b815260040161057f906129a3565b6001600160a01b03861660009081526097602052604090205460ff166111f75760405162461bcd60e51b815260206004820181905260248201527f546869732063757272656e6379206973206e6f742077686974656c6973746564604482015260640161057f565b6001846001600160401b0316116112205760405162461bcd60e51b815260040161057f906129ea565b836001600160401b0316836001600160401b031611156112525760405162461bcd60e51b815260040161057f90612a2e565b61a8c0826001600160401b031610156112ad5760405162461bcd60e51b815260206004820152601c60248201527f4d696e696d756d206475726174696f6e20697320313220686f75727300000000604482015260640161057f565b60006112bd8989898989896115b1565b90506001600160a01b03891661132b576098546112e3906001600160801b038a16612a92565b34146113265760405162461bcd60e51b8152602060048201526012602482015271125b98dbdc9c9958dd08199959481cd95b9d60721b604482015260640161057f565b6114d8565b609854341461137c5760405162461bcd60e51b815260206004820152601a60248201527f496e636f7272656374204f50454e494e475f4645452073656e74000000000000604482015260640161057f565b6040516370a0823160e01b81523060048201526000906001600160a01b038b16906370a0823190602401602060405180830381865afa1580156113c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e79190612cdf565b90506114076001600160a01b038b1633306001600160801b038d16612190565b6040516370a0823160e01b81523060048201526000906001600160a01b038c16906370a0823190602401602060405180830381865afa15801561144e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114729190612cdf565b905061147e8282612d41565b8a6001600160801b0316146114d55760405162461bcd60e51b815260206004820152601b60248201527f455243323020746f6b656e207472616e73666572206661696c65640000000000604482015260640161057f565b50505b609854600080805260996020527f235d629dc802037ded8c61cb27fb29e40fa01b299719d8f991ffe20bdcc59f4f8054909190611516908490612a92565b909155507fb26c0bf32d8d3eff0d0561d0b30f4bf8962a18678833b276fcbbe06c48e9eaaa9050893360018b8b8b8b8b6109896001600160401b038d1642612a92565b6033546001600160a01b031633146115835760405162461bcd60e51b815260040161057f90612b92565b609d805460ff19811660ff90911615179055565b60655460ff166115a957610eba6121c8565b610eba61223d565b609d54600090819060ff166115fd576127106101f46115d9876001600160401b038716612d58565b6001600160801b03166115ec9190612cf8565b6115f69190612d2d565b90506119f8565b60006001600160a01b0389166116c157609b5460405163a4b943fb60e01b815273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2600482018190529a50670de0b6b3a7640000916001600160801b038b16916001600160a01b039091169063a4b943fb90602401602060405180830381865afa158015611682573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a69190612cdf565b6116b09190612cf8565b6116ba9190612d2d565b90506117bc565b886001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117239190612bc7565b61172e90600a612cd0565b609b5460405163a4b943fb60e01b81526001600160a01b038c811660048301526001600160801b038c1692169063a4b943fb90602401602060405180830381865afa158015611781573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a59190612cdf565b6117af9190612cf8565b6117b99190612d2d565b90505b6001600160a01b038088166000908152609c6020908152604080832054815163313ce56760e01b815291519394169263313ce567926004808401939192918290030181865afa158015611813573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118379190612bc7565b61184290600a612cd0565b609b546001600160a01b038a81166000908152609c60205260409081902054905163a4b943fb60e01b815290821660048201526001600160801b038b16926001600160401b038b1692169063a4b943fb90602401602060405180830381865afa1580156118b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d79190612cdf565b6118e19190612cf8565b6118eb9190612cf8565b6118f59190612d2d565b905060008261190683612710612cf8565b6119109190612d2d565b9050612710811161192457600093506119f4565b612710811180156119375750612af88111155b1561197857612710611952896001600160401b038916612d58565b61195e906101f4612d58565b6119689190612d87565b6001600160801b031693506119f4565b612af88111801561198b57506130d48111155b156119b2576127106119a6896001600160401b038916612d58565b61195e906103e8612d58565b6130d48111156119f4576127106119d2896001600160401b038916612d58565b6119de906107d0612d58565b6119e89190612d87565b6001600160801b031693505b5050505b979650505050505050565b6033546001600160a01b03163314611a2d5760405162461bcd60e51b815260040161057f90612b92565b6001600160a01b038116611a925760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161057f565b611a9b8161213e565b50565b805160005b81811015610d5957828181518110611abd57611abd612b63565b60200260200101516040015115611bde5760006001600160a01b0316838281518110611aeb57611aeb612b63565b6020026020010151600001516001600160a01b031614611bd957828181518110611b1757611b17612b63565b6020026020010151602001516001600160a01b03166323b872dd30858481518110611b4457611b44612b63565b602002602001015160000151868581518110611b6257611b62612b63565b6020908102919091010151606001516040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b158015611bc057600080fd5b505af1158015611bd4573d6000803e3d6000fd5b505050505b611d05565b60006001600160a01b0316838281518110611bfb57611bfb612b63565b6020026020010151600001516001600160a01b031614611d055760006001600160a01b0316838281518110611c3257611c32612b63565b6020026020010151602001516001600160a01b031603611c9057611bd9838281518110611c6157611c61612b63565b602002602001015160000151848381518110611c7f57611c7f612b63565b602002602001015160600151611eac565b611d05838281518110611ca557611ca5612b63565b602002602001015160000151848381518110611cc357611cc3612b63565b602002602001015160600151858481518110611ce157611ce1612b63565b6020026020010151602001516001600160a01b0316611ff09092919063ffffffff16565b6000838281518110611d1957611d19612b63565b6020026020010151608001511115611da057828181518110611d3d57611d3d612b63565b60200260200101516080015160996000858481518110611d5f57611d5f612b63565b6020026020010151602001516001600160a01b03166001600160a01b031681526020019081526020016000206000828254611d9a9190612a92565b90915550505b7ffdf87137985fce097c2059f7e3bd28b9104995cad66709fdecbaa5e8e48da9af838281518110611dd357611dd3612b63565b602002602001015160000151848381518110611df157611df1612b63565b602002602001015160200151858481518110611e0f57611e0f612b63565b602002602001015160400151868581518110611e2d57611e2d612b63565b602002602001015160600151878681518110611e4b57611e4b612b63565b602002602001015160800151604051611e949594939291906001600160a01b03958616815293909416602084015290151560408301526060820152608081019190915260a00190565b60405180910390a1611ea581612b79565b9050611aa3565b80471015611efc5760405162461bcd60e51b815260206004820152601e60248201527f5f68616e646c6545746865725472616e7366657220696e736f6c76656e740000604482015260640161057f565b60005a90506000836001600160a01b0316838390604051600060405180830381858888f193505050503d8060008114611f51576040519150601f19603f3d011682016040523d82523d6000602084013e611f56565b606091505b5050905080611fea5773c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26001600160a01b031663d0e30db0846040518263ffffffff1660e01b81526004016000604051808303818588803b158015611fae57600080fd5b505af1158015611fc2573d6000803e3d6000fd5b50611fea935073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc29250879150869050611ff0565b50505050565b6040516001600160a01b038316602482015260448101829052610d5990849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526122b7565b60008054610100900460ff161561209a578160ff1660011480156120765750303b155b6120925760405162461bcd60e51b815260040161057f90612dad565b506000919050565b60005460ff8084169116106120c15760405162461bcd60e51b815260040161057f90612dad565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff166121075760405162461bcd60e51b815260040161057f90612dfb565b610eba612389565b600054610100900460ff166121365760405162461bcd60e51b815260040161057f90612dfb565b610eba6123b9565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b0380851660248301528316604482015260648101829052611fea9085906323b872dd60e01b9060840161201c565b60655460ff16156121eb5760405162461bcd60e51b815260040161057f906129a3565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586122203390565b6040516001600160a01b03909116815260200160405180910390a1565b60655460ff166122865760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161057f565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33612220565b600061230c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166123ec9092919063ffffffff16565b805190915015610d59578080602001905181019061232a9190612e46565b610d595760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161057f565b600054610100900460ff166123b05760405162461bcd60e51b815260040161057f90612dfb565b610eba3361213e565b600054610100900460ff166123e05760405162461bcd60e51b815260040161057f90612dfb565b6065805460ff19169055565b60606123fb8484600085612403565b949350505050565b6060824710156124645760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161057f565b843b6124b25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161057f565b600080866001600160a01b031685876040516124ce9190612e8f565b60006040518083038185875af1925050503d806000811461250b576040519150601f19603f3d011682016040523d82523d6000602084013e612510565b606091505b50915091506119f88282866060831561252a575081611124565b82511561253a5782518084602001fd5b8160405162461bcd60e51b815260040161057f9190612eab565b6001600160a01b0381168114611a9b57600080fd5b80356001600160801b03811681146120db57600080fd5b80356001600160401b03811681146120db57600080fd5b600080600080600080600080610100898b0312156125b457600080fd5b88356125bf81612554565b97506125cd60208a01612569565b965060408901356125dd81612554565b95506125eb60608a01612569565b94506125f960808a01612580565b935061260760a08a01612580565b925061261560c08a01612580565b915060e089013590509295985092959890939650565b60008083601f84011261263d57600080fd5b5081356001600160401b0381111561265457600080fd5b6020830191508360208260051b850101111561266f57600080fd5b9250929050565b60008060008060006060868803121561268e57600080fd5b85356001600160401b03808211156126a557600080fd5b6126b189838a0161262b565b909750955060208801359150808211156126ca57600080fd5b506126d78882890161262b565b90945092505060408601356126eb81612554565b809150509295509295909350565b6000806040838503121561270c57600080fd5b823561271781612554565b9150602083013561272781612554565b809150509250929050565b60006020828403121561274457600080fd5b813561112481612554565b60008060006060848603121561276457600080fd5b833561276f81612554565b925061277d60208501612569565b915061278b60408501612580565b90509250925092565b6000602082840312156127a657600080fd5b5035919050565b60008060008060008060c087890312156127c657600080fd5b86356127d181612554565b95506127df60208801612569565b945060408701356127ef81612554565b93506127fd60608801612569565b925061280b60808801612580565b915061281960a08801612580565b90509295509295509295565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b038111828210171561285d5761285d612825565b60405290565b604051601f8201601f191681016001600160401b038111828210171561288b5761288b612825565b604052919050565b8015158114611a9b57600080fd5b600060208083850312156128b457600080fd5b82356001600160401b03808211156128cb57600080fd5b818501915085601f8301126128df57600080fd5b8135818111156128f1576128f1612825565b6128ff848260051b01612863565b818152848101925060a091820284018501918883111561291e57600080fd5b938501935b828510156129975780858a03121561293b5760008081fd5b61294361283b565b853561294e81612554565b81528587013561295d81612554565b8188015260408681013561297081612893565b90820152606086810135908201526080808701359082015284529384019392850192612923565b50979650505050505050565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6000602082840312156129df57600080fd5b815161112481612554565b60208082526024908201527f526166666c6573206d7573742068617665206174206c656173742032207469636040820152636b65747360e01b606082015260800190565b6020808252602e908201527f5f6d696e696d756d5469636b657473536f6c642073686f756c64203c3d205f6e60408201526d756d6265724f665469636b65747360901b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60008219821115612aa557612aa5612a7c565b500190565b6001600160a01b038c811682528b166020820152610160810160028b10612ae157634e487b7160e01b600052602160045260246000fd5b8a6040830152612afc606083018b6001600160801b03169052565b6001600160a01b03891660808301526001600160801b03881660a08301526001600160401b03871660c08301526001600160401b03861660e08301526001600160401b03851661010083015261012082019390935261014001529998505050505050505050565b634e487b7160e01b600052603260045260246000fd5b600060018201612b8b57612b8b612a7c565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208284031215612bd957600080fd5b815160ff8116811461112457600080fd5b600181815b80851115612c25578160001904821115612c0b57612c0b612a7c565b80851615612c1857918102915b93841c9390800290612bef565b509250929050565b600082612c3c57506001612cca565b81612c4957506000612cca565b8160018114612c5f5760028114612c6957612c85565b6001915050612cca565b60ff841115612c7a57612c7a612a7c565b50506001821b612cca565b5060208310610133831016604e8410600b8410161715612ca8575081810a612cca565b612cb28383612bea565b8060001904821115612cc657612cc6612a7c565b0290505b92915050565b600061112460ff841683612c2d565b600060208284031215612cf157600080fd5b5051919050565b6000816000190483118215151615612d1257612d12612a7c565b500290565b634e487b7160e01b600052601260045260246000fd5b600082612d3c57612d3c612d17565b500490565b600082821015612d5357612d53612a7c565b500390565b60006001600160801b0380831681851681830481118215151615612d7e57612d7e612a7c565b02949350505050565b60006001600160801b0380841680612da157612da1612d17565b92169190910492915050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060208284031215612e5857600080fd5b815161112481612893565b60005b83811015612e7e578181015183820152602001612e66565b83811115611fea5750506000910152565b60008251612ea1818460208701612e63565b9190910192915050565b6020815260008251806020840152612eca816040850160208701612e63565b601f01601f1916919091016040019291505056fea264697066735822122068b29d7129f9f074f938f871b06e8b2a7e504a4734c5da5b7316dd9c36208f5164736f6c634300080e0033",
  "deployedSourceMap": "1273:17996:36:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5770:1672;;;;;;:::i;:::-;;:::i;:::-;;2150:26;;;;;;;;;;;;;;;;;;;1495:25:40;;;1483:2;1468:18;2150:26:36;;;;;;;;15232:913;;;;;;;;;;-1:-1:-1;15232:913:36;;;;;:::i;:::-;;:::i;14092:431::-;;;;;;;;;;-1:-1:-1;14092:431:36;;;;;:::i;:::-;;:::i;2005:53::-;;;;;;;;;;-1:-1:-1;2005:53:36;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;3626:14:40;;3619:22;3601:41;;3589:2;3574:18;2005:53:36;3461:187:40;16400:138:36;;;;;;;;;;-1:-1:-1;16400:138:36;;;;;:::i;:::-;-1:-1:-1;;;;;16497:34:36;16474:4;16497:34;;;:21;:34;;;;;;;;;16400:138;4064:565;;;;;;;;;;-1:-1:-1;4064:565:36;;;;;:::i;:::-;;:::i;2235:55::-;;;;;;;;;;;;2287:3;2235:55;;14648:301;;;;;;;;;;-1:-1:-1;14648:301:36;;;;;:::i;:::-;;:::i;1341:84:2:-;;;;;;;;;;-1:-1:-1;1411:7:2;;;;1341:84;;13002:130:36;;;;;;;;;;-1:-1:-1;13002:130:36;;;;;:::i;:::-;;:::i;2296:59::-;;;;;;;;;;;;2350:5;2296:59;;3031:29;;;;;;;;;;-1:-1:-1;3031:29:36;;;;;;;;1908:101:0;;;;;;;;;;;;;:::i;13215:213:36:-;;;;;;;;;;-1:-1:-1;13215:213:36;;;;;:::i;:::-;;:::i;18543:724::-;;;;;;;;;;-1:-1:-1;18543:724:36;;;;;:::i;:::-;;:::i;2751:43::-;;;;;;;;;;-1:-1:-1;2751:43:36;;;;-1:-1:-1;;;;;2751:43:36;;;;;;-1:-1:-1;;;;;4242:32:40;;;4224:51;;4212:2;4197:18;2751:43:36;4051:230:40;2631:22:36;;;;;;;;;;-1:-1:-1;2631:22:36;;;;-1:-1:-1;;;;;2631:22:36;;;13686:153;;;;;;;;;;-1:-1:-1;13686:153:36;;;;;:::i;:::-;;:::i;1276:85:0:-;;;;;;;;;;-1:-1:-1;1348:6:0;;-1:-1:-1;;;;;1348:6:0;1276:85;;2889:63:36;;;;;;;;;;-1:-1:-1;2889:63:36;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;;;2889:63:36;;;2489:55;;;;;;;;;;-1:-1:-1;2489:55:36;;;;;:::i;:::-;;;;;;;;;;;;;;8521:1846;;;;;;:::i;:::-;;:::i;13517:101::-;;;;;;;;;;;;;:::i;12833:97::-;;;;;;;;;;;;;:::i;16544:1993::-;;;;;;;;;;-1:-1:-1;16544:1993:36;;;;;:::i;:::-;;:::i;2158:198:0:-;;;;;;;;;;-1:-1:-1;2158:198:0;;;;;:::i;:::-;;:::i;10466:1438:36:-;;;;;;;;;;-1:-1:-1;10466:1438:36;;;;;:::i;:::-;;:::i;5770:1672::-;1411:7:2;;;;1654:9;1646:38;;;;-1:-1:-1;;;1646:38:2;;;;;;;:::i;:::-;;;;;;;;;6055:39:36::1;::::0;-1:-1:-1;;;6055:39:36;;-1:-1:-1;;;;;8672:47:40;;6055:39:36::1;::::0;::::1;8654:66:40::0;-1:-1:-1;;;;;6055:31:36;::::1;::::0;::::1;::::0;8627:18:40;;6055:39:36::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1::0;;;;;6041:53:36::1;:10;-1:-1:-1::0;;;;;6041:53:36::1;;6033:89;;;::::0;-1:-1:-1;;;6033:89:36;;9189:2:40;6033:89:36::1;::::0;::::1;9171:21:40::0;9228:2;9208:18;;;9201:30;9267:25;9247:18;;;9240:53;9310:18;;6033:89:36::1;8987:347:40::0;6033:89:36::1;-1:-1:-1::0;;;;;6140:41:36;::::1;;::::0;;;:21:::1;:41;::::0;;;;;::::1;;6132:86;;;::::0;-1:-1:-1;;;6132:86:36;;9541:2:40;6132:86:36::1;::::0;::::1;9523:21:40::0;;;9560:18;;;9553:30;9619:34;9599:18;;;9592:62;9671:18;;6132:86:36::1;9339:356:40::0;6132:86:36::1;6255:1;6236:16;-1:-1:-1::0;;;;;6236:20:36::1;;6228:69;;;;-1:-1:-1::0;;;6228:69:36::1;;;;;;;:::i;:::-;6338:16;-1:-1:-1::0;;;;;6315:39:36::1;:19;-1:-1:-1::0;;;;;6315:39:36::1;;;6307:98;;;;-1:-1:-1::0;;;6307:98:36::1;;;;;;;:::i;:::-;6445:5;6423:18;-1:-1:-1::0;;;;;6423:27:36::1;;;6415:68;;;::::0;-1:-1:-1;;;6415:68:36;;10722:2:40;6415:68:36::1;::::0;::::1;10704:21:40::0;10761:2;10741:18;;;10734:30;10800;10780:18;;;10773:58;10848:18;;6415:68:36::1;10520:352:40::0;6415:68:36::1;6579:23;6605:77;6625:18;6645:15;6662:19;6605;:77::i;:::-;6579:103;;6729:15;6715:11;;:29;;;;:::i;:::-;6701:9;:44;6693:76;;;::::0;-1:-1:-1;;;6693:76:36;;11344:2:40;6693:76:36::1;::::0;::::1;11326:21:40::0;11383:2;11363:18;;;11356:30;-1:-1:-1;;;11402:18:40;;;11395:49;11461:18;;6693:76:36::1;11142:343:40::0;6693:76:36::1;6815:11;::::0;6779:32:::1;::::0;;;:20:::1;:32;::::0;;:47;;:32;;;:47:::1;::::0;6815:11;;6779:47:::1;:::i;:::-;::::0;;;-1:-1:-1;;6886:71:36::1;::::0;-1:-1:-1;;;6886:71:36;;6923:10:::1;6886:71;::::0;::::1;11730:34:40::0;6943:4:36::1;11780:18:40::0;;;11773:43;-1:-1:-1;;;;;11852:47:40;;11832:18;;;11825:75;-1:-1:-1;;;;;6886:36:36;::::1;::::0;::::1;::::0;11665:18:40;;6886:71:36::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;-1:-1:-1::0;;6992:39:36::1;::::0;-1:-1:-1;;;6992:39:36;;-1:-1:-1;;;;;8672:47:40;;6992:39:36::1;::::0;::::1;8654:66:40::0;-1:-1:-1;;;;;6992:31:36;::::1;::::0;-1:-1:-1;6992:31:36::1;::::0;-1:-1:-1;8627:18:40;;6992:39:36::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1::0;;;;;6975:56:36::1;6983:4;-1:-1:-1::0;;;;;6975:56:36::1;;6967:84;;;::::0;-1:-1:-1;;;6967:84:36;;12113:2:40;6967:84:36::1;::::0;::::1;12095:21:40::0;12152:2;12132:18;;;12125:30;-1:-1:-1;;;12171:18:40;;;12164:45;12226:18;;6967:84:36::1;11911:339:40::0;6967:84:36::1;7067:368;7094:14:::0;7122:10:::1;7146:17;7177:6:::0;7198:18;7231:15;7261:16;7292:19;7333:36:::1;-1:-1:-1::0;;;;;7333:36:36;::::1;:15;:36;:::i;:::-;7385:11;7410:15;7067:368;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;6023:1419;5770:1672:::0;;;;;;;;:::o;15232:913::-;15369:13;15407:22;;;15399:61;;;;-1:-1:-1;;;15399:61:36;;13751:2:40;15399:61:36;;;13733:21:40;13790:2;13770:18;;;13763:30;13829:28;13809:18;;;13802:56;13875:18;;15399:61:36;13549:350:40;15399:61:36;15470:14;15494:20;15529:9;15524:615;15544:3;15540:1;:7;15524:615;;;15583:13;;15597:1;15583:16;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;15568:31;;15622:8;;15631:1;15622:11;;;;;;;:::i;:::-;;;;;;;15613:20;;15665;:34;15686:12;-1:-1:-1;;;;;15665:34:36;-1:-1:-1;;;;;15665:34:36;;;;;;;;;;;;;15655:6;:44;;15647:72;;;;-1:-1:-1;;;15647:72:36;;14238:2:40;15647:72:36;;;14220:21:40;14277:2;14257:18;;;14250:30;-1:-1:-1;;;14296:18:40;;;14289:45;14351:18;;15647:72:36;14036:339:40;15647:72:36;-1:-1:-1;;;;;15736:26:36;;15733:204;;15781:39;15802:9;15813:6;15781:20;:39::i;:::-;15733:204;;;15870:52;-1:-1:-1;;;;;15870:33:36;;15904:9;15915:6;15870:33;:52::i;:::-;-1:-1:-1;;;;;16070:34:36;;;;;;:20;:34;;;;;:44;;;;;;;15549:3;;;:::i;:::-;;;15524:615;;;;15345:800;;;15232:913;;;;;:::o;14092:431::-;-1:-1:-1;;;;;14217:48:36;;;;;;:21;:48;;;;;;;;14216:49;14208:90;;;;-1:-1:-1;;;14208:90:36;;14722:2:40;14208:90:36;;;14704:21:40;14761:2;14741:18;;;14734:30;14800;14780:18;;;14773:58;14848:18;;14208:90:36;14520:352:40;14208:90:36;-1:-1:-1;;;;;14308:48:36;;;;;;;:21;:48;;;;;;;;:55;;14359:4;-1:-1:-1;;14308:55:36;;;;;;14373:28;:55;;;;;;:83;;-1:-1:-1;;;;;;14373:83:36;;;;;;;;;;;14471:45;4224:51:40;;;14471:45:36;;4197:18:40;14471:45:36;;;;;;;14092:431;;:::o;4064:565::-;3111:19:1;3133:25;3156:1;3133:22;:25::i;:::-;3111:47;;3172:14;3168:65;;;3202:13;:20;;-1:-1:-1;;3202:20:1;;;;;3168:65;4159:16:36::1;:14;:16::i;:::-;4185:17;:15;:17::i;:::-;4213:7;:18:::0;;-1:-1:-1;;;;;4213:18:36;;::::1;-1:-1:-1::0;;;;;;4213:18:36;;::::1;;::::0;;;4241:17:::1;:58:::0;;;;::::1;::::0;;::::1;::::0;;;::::1;::::0;;;4309:17:::1;:24:::0;;-1:-1:-1;;4309:24:36;;::::1;4213:18:::0;4309:24;;::::1;::::0;;;4400:42:::1;4213:7;4378:65:::0;;:72;;;;::::1;::::0;;::::1;::::0;;4500:28:::1;4378:65;4500:72:::0;;:88;;;;::::1;2101:42;4500:88;::::0;;4612:10:::1;4598:11;:24:::0;3253:99:1;;;;3303:5;3287:21;;-1:-1:-1;;3287:21:1;;;3327:14;;-1:-1:-1;15029:36:40;;3327:14:1;;15017:2:40;15002:18;3327:14:1;;;;;;;3253:99;3101:257;4064:565:36;;:::o;14648:301::-;-1:-1:-1;;;;;14737:48:36;;;;;;:21;:48;;;;;;;;14729:85;;;;-1:-1:-1;;;14729:85:36;;15278:2:40;14729:85:36;;;15260:21:40;15317:2;15297:18;;;15290:30;15356:26;15336:18;;;15329:54;15400:18;;14729:85:36;15076:348:40;14729:85:36;-1:-1:-1;;;;;14824:48:36;;14875:5;14824:48;;;:21;:48;;;;;;;;;:56;;-1:-1:-1;;14824:56:36;;;14895:47;;4224:51:40;;;14895:47:36;;4197:18:40;14895:47:36;;;;;;;14648:301;:::o;13002:130::-;13079:7;;13064:33;;;-1:-1:-1;;;;;13079:7:36;;;15641:34:40;;15711:15;;;15706:2;15691:18;;15684:43;13064:33:36;;15576:18:40;13064:33:36;;;;;;;13107:7;:18;;-1:-1:-1;;;;;;13107:18:36;-1:-1:-1;;;;;13107:18:36;;;;;;;;;;13002:130::o;1908:101:0:-;1348:6;;-1:-1:-1;;;;;1348:6:0;929:10:5;1488:23:0;1480:68;;;;-1:-1:-1;;;1480:68:0;;;;;;;:::i;:::-;1972:30:::1;1999:1;1972:18;:30::i;:::-;1908:101::o:0;13215:213:36:-;13314:17;;13289:64;;;-1:-1:-1;;;;;13314:17:36;;;15641:34:40;;15711:15;;;15706:2;15691:18;;15684:43;13289:64:36;;15576:18:40;13289:64:36;;;;;;;13363:17;:58;;-1:-1:-1;;;;;;13363:58:36;-1:-1:-1;;;;;13363:58:36;;;;;;;;;;13215:213::o;18543:724::-;-1:-1:-1;;;;;18885:48:36;;;18673:7;18885:48;;;:28;:48;;;;;;;;;18870:75;;-1:-1:-1;;;18870:75:36;;;;18673:7;;;;18885:48;;;18870:73;;:75;;;;;;;;;;;18885:48;18870:75;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;18864:81;;:2;:81;:::i;:::-;18733:17;;-1:-1:-1;;;;;18770:48:36;;;18733:17;18770:48;;;:28;:48;;;;;;;;18733:86;;-1:-1:-1;;;18733:86:36;;18770:48;;;18733:86;;;4224:51:40;-1:-1:-1;;;;;18733:126:36;;;-1:-1:-1;;;;;18733:104:36;;;:17;;:36;;4197:18:40;;18733:86:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:104;;;;:::i;:::-;:126;;;;:::i;:::-;18732:214;;;;:::i;:::-;18692:254;-1:-1:-1;18956:30:36;2350:5;18990:57;2287:3;18692:254;18990:57;:::i;:::-;18989:89;;;;:::i;:::-;19148:17;;:80;;-1:-1:-1;;;19148:80:36;;19185:42;19148:80;;;4224:51:40;18956:122:36;;-1:-1:-1;19088:23:36;;-1:-1:-1;;;;;19148:17:36;;;;:36;;4197:18:40;;19148:80:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;19115:29;:22;19140:4;19115:29;:::i;:::-;19114:114;;;;:::i;:::-;19088:140;-1:-1:-1;;;;18543:724:36;;;;;;:::o;13686:153::-;13772:11;;13754:43;;;18553:25:40;;;18609:2;18594:18;;18587:34;;;13754:43:36;;18526:18:40;13754:43:36;;;;;;;13807:11;:25;13686:153::o;8521:1846::-;1411:7:2;;;;1654:9;1646:38;;;;-1:-1:-1;;;1646:38:2;;;;;;;:::i;:::-;-1:-1:-1;;;;;8791:41:36;::::1;;::::0;;;:21:::1;:41;::::0;;;;;::::1;;8783:86;;;::::0;-1:-1:-1;;;8783:86:36;;9541:2:40;8783:86:36::1;::::0;::::1;9523:21:40::0;;;9560:18;;;9553:30;9619:34;9599:18;;;9592:62;9671:18;;8783:86:36::1;9339:356:40::0;8783:86:36::1;8906:1;8887:16;-1:-1:-1::0;;;;;8887:20:36::1;;8879:69;;;;-1:-1:-1::0;;;8879:69:36::1;;;;;;;:::i;:::-;8989:16;-1:-1:-1::0;;;;;8966:39:36::1;:19;-1:-1:-1::0;;;;;8966:39:36::1;;;8958:98;;;;-1:-1:-1::0;;;8958:98:36::1;;;;;;;:::i;:::-;9096:5;9074:18;-1:-1:-1::0;;;;;9074:27:36::1;;;9066:68;;;::::0;-1:-1:-1;;;9066:68:36;;10722:2:40;9066:68:36::1;::::0;::::1;10704:21:40::0;10761:2;10741:18;;;10734:30;10800;10780:18;;;10773:58;10848:18;;9066:68:36::1;10520:352:40::0;9066:68:36::1;9153:23;9179:119;9199:13;9214:7;9223:18;9243:15;9260:16;9278:19;9179:18;:119::i;:::-;9153:145:::0;-1:-1:-1;;;;;;9313:27:36;::::1;9309:612;;9387:11;::::0;9377:21:::1;::::0;-1:-1:-1;;;;;9377:21:36;::::1;;:::i;:::-;9364:9;:34;9356:65;;;::::0;-1:-1:-1;;;9356:65:36;;18834:2:40;9356:65:36::1;::::0;::::1;18816:21:40::0;18873:2;18853:18;;;18846:30;-1:-1:-1;;;18892:18:40;;;18885:48;18950:18;;9356:65:36::1;18632:342:40::0;9356:65:36::1;9309:612;;;9473:11;;9460:9;:24;9452:63;;;::::0;-1:-1:-1;;;9452:63:36;;19181:2:40;9452:63:36::1;::::0;::::1;19163:21:40::0;19220:2;19200:18;;;19193:30;19259:28;19239:18;;;19232:56;19305:18;;9452:63:36::1;18979:350:40::0;9452:63:36::1;9553:46;::::0;-1:-1:-1;;;9553:46:36;;9593:4:::1;9553:46;::::0;::::1;4224:51:40::0;9529:21:36::1;::::0;-1:-1:-1;;;;;9553:31:36;::::1;::::0;::::1;::::0;4197:18:40;;9553:46:36::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;9529:70:::0;-1:-1:-1;9660:74:36::1;-1:-1:-1::0;;;;;9660:38:36;::::1;9699:10;9719:4;-1:-1:-1::0;;;;;9660:74:36;::::1;:38;:74::i;:::-;9771:46;::::0;-1:-1:-1;;;9771:46:36;;9811:4:::1;9771:46;::::0;::::1;4224:51:40::0;9748:20:36::1;::::0;-1:-1:-1;;;;;9771:31:36;::::1;::::0;::::1;::::0;4197:18:40;;9771:46:36::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;9748:69:::0;-1:-1:-1;9850:28:36::1;9865:13:::0;9748:69;9850:28:::1;:::i;:::-;9839:7;-1:-1:-1::0;;;;;9839:39:36::1;;9831:79;;;::::0;-1:-1:-1;;;9831:79:36;;19666:2:40;9831:79:36::1;::::0;::::1;19648:21:40::0;19705:2;19685:18;;;19678:30;19744:29;19724:18;;;19717:57;19791:18;;9831:79:36::1;19464:351:40::0;9831:79:36::1;9438:483;;9309:612;9967:11;::::0;9931:32:::1;::::0;;;:20:::1;:32;::::0;;:47;;:32;;;:47:::1;::::0;9967:11;;9931:47:::1;:::i;:::-;::::0;;;-1:-1:-1;9993:367:36::1;::::0;-1:-1:-1;10020:13:36;10047:10:::1;10071:16;10101:7:::0;10123:18;10156:15;10186:16;10217:19;10258:36:::1;-1:-1:-1::0;;;;;10258:36:36;::::1;:15;:36;:::i;13517:101::-:0;1348:6:0;;-1:-1:-1;;;;;1348:6:0;929:10:5;1488:23:0;1480:68;;;;-1:-1:-1;;;1480:68:0;;;;;;;:::i;:::-;13594:17:36::1;::::0;;-1:-1:-1;;13573:38:36;::::1;13594:17;::::0;;::::1;13593:18;13573:38;::::0;;13517:101::o;12833:97::-;1411:7:2;;;;12875:48:36;;12890:8;:6;:8::i;12875:48::-;12913:10;:8;:10::i;16544:1993::-;16795:17;;16738:7;;;;16795:17;;16790:1709;;2350:5;2287:3;16846:37;16868:15;-1:-1:-1;;;;;16846:37:36;;;:::i;:::-;-1:-1:-1;;;;;16846:65:36;;;;;:::i;:::-;16845:97;;;;:::i;:::-;16827:115;;16790:1709;;;16980:29;-1:-1:-1;;;;;17027:27:36;;17023:428;;17145:17;;:51;;-1:-1:-1;;;17145:51:36;;2101:42;17145:51;;;4224::40;;;2101:42:36;-1:-1:-1;17211:8:36;;-1:-1:-1;;;;;17145:61:36;;;-1:-1:-1;;;;;17145:17:36;;;;:36;;4197:18:40;;17145:51:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:61;;;;:::i;:::-;17144:76;;;;:::i;:::-;17120:100;;17023:428;;;17410:13;-1:-1:-1;;;;;17395:38:36;;:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;17389:46;;:2;:46;:::i;:::-;17323:17;;:51;;-1:-1:-1;;;17323:51:36;;-1:-1:-1;;;;;4242:32:40;;;17323:51:36;;;4224::40;-1:-1:-1;;;;;17323:61:36;;;:17;;:36;;4197:18:40;;17323:51:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:61;;;;:::i;:::-;17322:114;;;;:::i;:::-;17298:138;;17023:428;-1:-1:-1;;;;;17650:48:36;;;17464:33;17650:48;;;:28;:48;;;;;;;;;17635:75;;-1:-1:-1;;;17635:75:36;;;;17464:33;;17650:48;;17635:73;;:75;;;;;17650:48;;17635:75;;;;;;17650:48;17635:75;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;17629:81;;:2;:81;:::i;:::-;17501:17;;-1:-1:-1;;;;;17538:48:36;;;17501:17;17538:48;;;:28;:48;;;;;;;;17501:86;;-1:-1:-1;;;17501:86:36;;17538:48;;;17501:86;;;4224:51:40;-1:-1:-1;;;;;17501:123:36;;;-1:-1:-1;;;;;17501:105:36;;;:17;;:36;;4197:18:40;;17501:86:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:105;;;;:::i;:::-;:123;;;;:::i;:::-;17500:211;;;;:::i;:::-;17464:247;-1:-1:-1;17725:13:36;17779:21;17742:33;17464:247;17770:5;17742:33;:::i;:::-;17741:59;;;;:::i;:::-;17725:75;;17894:5;17885;:14;17881:608;;17936:1;17918:19;;17881:608;;;17983:5;17975;:13;17974:35;;;;;18003:5;17994;:14;;17974:35;17970:519;;;18117:5;18070:37;18092:15;-1:-1:-1;;;;;18070:37:36;;;:::i;:::-;:43;;18110:3;18070:43;:::i;:::-;18069:53;;;;:::i;:::-;-1:-1:-1;;;;;18051:71:36;;;17970:519;;;18168:5;18160;:13;18159:35;;;;;18188:5;18179;:14;;18159:35;18155:334;;;18304:5;18256:37;18278:15;-1:-1:-1;;;;;18256:37:36;;;:::i;:::-;:44;;18296:4;18256:44;:::i;18155:334::-;18354:5;18346;:13;18342:147;;;18469:5;18421:37;18443:15;-1:-1:-1;;;;;18421:37:36;;;:::i;:::-;:44;;18461:4;18421:44;:::i;:::-;18420:54;;;;:::i;:::-;-1:-1:-1;;;;;18402:72:36;;;18342:147;16966:1533;;;16790:1709;18515:15;16544:1993;-1:-1:-1;;;;;;;16544:1993:36:o;2158:198:0:-;1348:6;;-1:-1:-1;;;;;1348:6:0;929:10:5;1488:23:0;1480:68;;;;-1:-1:-1;;;1480:68:0;;;;;;;:::i;:::-;-1:-1:-1;;;;;2246:22:0;::::1;2238:73;;;::::0;-1:-1:-1;;;2238:73:0;;20535:2:40;2238:73:0::1;::::0;::::1;20517:21:40::0;20574:2;20554:18;;;20547:30;20613:34;20593:18;;;20586:62;-1:-1:-1;;;20664:18:40;;;20657:36;20710:19;;2238:73:0::1;20333:402:40::0;2238:73:0::1;2321:28;2340:8;2321:18;:28::i;:::-;2158:198:::0;:::o;10466:1438:36:-;10559:18;;10545:11;10587:1311;10607:3;10603:1;:7;10587:1311;;;10633:11;10645:1;10633:14;;;;;;;;:::i;:::-;;;;;;;:23;;;10630:770;;;10713:1;-1:-1:-1;;;;;10678:37:36;:11;10690:1;10678:14;;;;;;;;:::i;:::-;;;;;;;:23;;;-1:-1:-1;;;;;10678:37:36;;10675:212;;10746:11;10758:1;10746:14;;;;;;;;:::i;:::-;;;;;;;:28;;;-1:-1:-1;;;;;10738:50:36;;10797:4;10804:11;10816:1;10804:14;;;;;;;;:::i;:::-;;;;;;;:23;;;10829:11;10841:1;10829:14;;;;;;;;:::i;:::-;;;;;;;;;;;:38;;;10738:130;;-1:-1:-1;;;;;;10738:130:36;;;;;;;-1:-1:-1;;;;;20998:15:40;;;10738:130:36;;;20980:34:40;21050:15;;;;21030:18;;;21023:43;21082:18;;;21075:34;20915:18;;10738:130:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10675:212;10630:770;;;10974:1;-1:-1:-1;;;;;10939:37:36;:11;10951:1;10939:14;;;;;;;;:::i;:::-;;;;;;;:23;;;-1:-1:-1;;;;;10939:37:36;;10936:450;;11042:1;-1:-1:-1;;;;;11002:42:36;:11;11014:1;11002:14;;;;;;;;:::i;:::-;;;;;;;:28;;;-1:-1:-1;;;;;11002:42:36;;10999:369;;11071:85;11092:11;11104:1;11092:14;;;;;;;;:::i;:::-;;;;;;;:23;;;11117:11;11129:1;11117:14;;;;;;;;:::i;:::-;;;;;;;:38;;;11071:20;:85::i;10999:369::-;11231:114;11281:11;11293:1;11281:14;;;;;;;;:::i;:::-;;;;;;;:23;;;11306:11;11318:1;11306:14;;;;;;;;:::i;:::-;;;;;;;:38;;;11238:11;11250:1;11238:14;;;;;;;;:::i;:::-;;;;;;;:28;;;-1:-1:-1;;;;;11231:49:36;;;:114;;;;;:::i;:::-;11462:1;11416:11;11428:1;11416:14;;;;;;;;:::i;:::-;;;;;;;:43;;;:47;11413:181;;;11536:11;11548:1;11536:14;;;;;;;;:::i;:::-;;;;;;;:43;;;11482:20;:50;11503:11;11515:1;11503:14;;;;;;;;:::i;:::-;;;;;;;:28;;;-1:-1:-1;;;;;11482:50:36;-1:-1:-1;;;;;11482:50:36;;;;;;;;;;;;;:97;;;;;;;:::i;:::-;;;;-1:-1:-1;;11413:181:36;11612:275;11646:11;11658:1;11646:14;;;;;;;;:::i;:::-;;;;;;;:23;;;11687:11;11699:1;11687:14;;;;;;;;:::i;:::-;;;;;;;:28;;;11733:11;11745:1;11733:14;;;;;;;;:::i;:::-;;;;;;;:23;;;11774:11;11786:1;11774:14;;;;;;;;:::i;:::-;;;;;;;:38;;;11830:11;11842:1;11830:14;;;;;;;;:::i;:::-;;;;;;;:43;;;11612:275;;;;;;;;;-1:-1:-1;;;;;21429:15:40;;;21411:34;;21481:15;;;;21476:2;21461:18;;21454:43;21540:14;;21533:22;21528:2;21513:18;;21506:50;21587:2;21572:18;;21565:34;21630:3;21615:19;;21608:35;;;;21360:3;21345:19;;21120:529;11612:275:36;;;;;;;;10612:3;;;:::i;:::-;;;10587:1311;;11969:521;12113:7;12088:21;:32;;12080:75;;;;-1:-1:-1;;;12080:75:36;;21856:2:40;12080:75:36;;;21838:21:40;21895:2;21875:18;;;21868:30;21934:32;21914:18;;;21907:60;21984:18;;12080:75:36;21654:354:40;12080:75:36;12165:11;12180:9;12165:24;;12200:12;12218:5;-1:-1:-1;;;;;12218:10:36;12236:7;12250:3;12218:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12199:59;;;12356:7;12351:133;;2101:42;-1:-1:-1;;;;;12379:12:36;;12399:7;12379:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;12423:50:36;;-1:-1:-1;2101:42:36;;-1:-1:-1;12458:5:36;;-1:-1:-1;12465:7:36;;-1:-1:-1;12423:34:36;:50::i;:::-;12040:450;;11969:521;;:::o;634:175:9:-;743:58;;-1:-1:-1;;;;;22415:32:40;;743:58:9;;;22397:51:40;22464:18;;;22457:34;;;716:86:9;;736:5;;-1:-1:-1;;;766:23:9;22370:18:40;;743:58:9;;;;-1:-1:-1;;743:58:9;;;;;;;;;;;;;;-1:-1:-1;;;;;743:58:9;-1:-1:-1;;;;;;743:58:9;;;;;;;;;;716:19;:86::i;5287:808:1:-;5351:4;5684:13;;;;;;;5680:409;;;5738:7;:12;;5749:1;5738:12;:61;;;;-1:-1:-1;5793:4:1;1476:19:4;:23;5738:61:1;5713:166;;;;-1:-1:-1;;;5713:166:1;;;;;;;:::i;:::-;-1:-1:-1;5900:5:1;;5287:808;-1:-1:-1;5287:808:1:o;5680:409::-;5944:12;;:22;;;;:12;;:22;5936:81;;;;-1:-1:-1;;;5936:81:1;;;;;;;:::i;:::-;-1:-1:-1;6031:12:1;:22;;-1:-1:-1;;6031:22:1;;;;;;;;;;;;-1:-1:-1;;5287:808:1:o;5680:409::-;5287:808;;;:::o;988:95:0:-;4698:13:1;;;;;;;4690:69;;;;-1:-1:-1;;;4690:69:1;;;;;;;:::i;:::-;1050:26:0::1;:24;:26::i;1048:97:2:-:0;4698:13:1;;;;;;;4690:69;;;;-1:-1:-1;;;4690:69:1;;;;;;;:::i;:::-;1111:27:2::1;:25;:27::i;2510:187:0:-:0;2602:6;;;-1:-1:-1;;;;;2618:17:0;;;-1:-1:-1;;;;;;2618:17:0;;;;;;;2650:40;;2602:6;;;2618:17;2602:6;;2650:40;;2583:16;;2650:40;2573:124;2510:187;:::o;815:203:9:-;942:68;;-1:-1:-1;;;;;20998:15:40;;;942:68:9;;;20980:34:40;21050:15;;21030:18;;;21023:43;21082:18;;;21075:34;;;915:96:9;;935:5;;-1:-1:-1;;;965:27:9;20915:18:40;;942:68:9;20740:375:40;2106:115:2;1411:7;;;;1654:9;1646:38;;;;-1:-1:-1;;;1646:38:2;;;;;;;:::i;:::-;2165:7:::1;:14:::0;;-1:-1:-1;;2165:14:2::1;2175:4;2165:14;::::0;;2194:20:::1;2201:12;929:10:5::0;;850:96;2201:12:2::1;2194:20;::::0;-1:-1:-1;;;;;4242:32:40;;;4224:51;;4212:2;4197:18;2194:20:2::1;;;;;;;2106:115::o:0;2353:117::-;1411:7;;;;1912:41;;;;-1:-1:-1;;;1912:41:2;;23531:2:40;1912:41:2;;;23513:21:40;23570:2;23550:18;;;23543:30;-1:-1:-1;;;23589:18:40;;;23582:50;23649:18;;1912:41:2;23329:344:40;1912:41:2;2411:7:::1;:15:::0;;-1:-1:-1;;2411:15:2::1;::::0;;2441:22:::1;929:10:5::0;2450:12:2::1;850:96:5::0;3022:751:9;3441:23;3467:69;3495:4;3467:69;;;;;;;;;;;;;;;;;3475:5;-1:-1:-1;;;;;3467:27:9;;;:69;;;;;:::i;:::-;3550:17;;3441:95;;-1:-1:-1;3550:21:9;3546:221;;3690:10;3679:30;;;;;;;;;;;;:::i;:::-;3671:85;;;;-1:-1:-1;;;3671:85:9;;24130:2:40;3671:85:9;;;24112:21:40;24169:2;24149:18;;;24142:30;24208:34;24188:18;;;24181:62;-1:-1:-1;;;24259:18:40;;;24252:40;24309:19;;3671:85:9;23928:406:40;1089:111:0;4698:13:1;;;;;;;4690:69;;;;-1:-1:-1;;;4690:69:1;;;;;;;:::i;:::-;1161:32:0::1;929:10:5::0;1161:18:0::1;:32::i;1151:95:2:-:0;4698:13:1;;;;;;;4690:69;;;;-1:-1:-1;;;4690:69:1;;;;;;;:::i;:::-;1224:7:2::1;:15:::0;;-1:-1:-1;;1224:15:2::1;::::0;;1151:95::o;3573:193:15:-;3676:12;3707:52;3729:6;3737:4;3743:1;3746:12;3707:21;:52::i;:::-;3700:59;3573:193;-1:-1:-1;;;;3573:193:15:o;4600:523::-;4727:12;4784:5;4759:21;:30;;4751:81;;;;-1:-1:-1;;;4751:81:15;;24541:2:40;4751:81:15;;;24523:21:40;24580:2;24560:18;;;24553:30;24619:34;24599:18;;;24592:62;-1:-1:-1;;;24670:18:40;;;24663:36;24716:19;;4751:81:15;24339:402:40;4751:81:15;1078:20;;4842:60;;;;-1:-1:-1;;;4842:60:15;;24948:2:40;4842:60:15;;;24930:21:40;24987:2;24967:18;;;24960:30;25026:31;25006:18;;;24999:59;25075:18;;4842:60:15;24746:353:40;4842:60:15;4973:12;4987:23;5014:6;-1:-1:-1;;;;;5014:11:15;5034:5;5042:4;5014:33;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4972:75;;;;5064:52;5082:7;5091:10;5103:12;7198;7226:7;7222:580;;;-1:-1:-1;7256:10:15;7249:17;;7222:580;7367:17;;:21;7363:429;;7625:10;7619:17;7685:15;7672:10;7668:2;7664:19;7657:44;7363:429;7764:12;7757:20;;-1:-1:-1;;;7757:20:15;;;;;;;;:::i;14:131:40:-;-1:-1:-1;;;;;89:31:40;;79:42;;69:70;;135:1;132;125:12;150:188;218:20;;-1:-1:-1;;;;;267:46:40;;257:57;;247:85;;328:1;325;318:12;343:171;410:20;;-1:-1:-1;;;;;459:30:40;;449:41;;439:69;;504:1;501;494:12;519:825;638:6;646;654;662;670;678;686;694;747:3;735:9;726:7;722:23;718:33;715:53;;;764:1;761;754:12;715:53;803:9;790:23;822:31;847:5;822:31;:::i;:::-;872:5;-1:-1:-1;896:38:40;930:2;915:18;;896:38;:::i;:::-;886:48;;986:2;975:9;971:18;958:32;999:33;1024:7;999:33;:::i;:::-;1051:7;-1:-1:-1;1077:38:40;1111:2;1096:18;;1077:38;:::i;:::-;1067:48;;1134:38;1167:3;1156:9;1152:19;1134:38;:::i;:::-;1124:48;;1191:38;1224:3;1213:9;1209:19;1191:38;:::i;:::-;1181:48;;1248:38;1281:3;1270:9;1266:19;1248:38;:::i;:::-;1238:48;;1333:3;1322:9;1318:19;1305:33;1295:43;;519:825;;;;;;;;;;;:::o;1531:367::-;1594:8;1604:6;1658:3;1651:4;1643:6;1639:17;1635:27;1625:55;;1676:1;1673;1666:12;1625:55;-1:-1:-1;1699:20:40;;-1:-1:-1;;;;;1731:30:40;;1728:50;;;1774:1;1771;1764:12;1728:50;1811:4;1803:6;1799:17;1787:29;;1871:3;1864:4;1854:6;1851:1;1847:14;1839:6;1835:27;1831:38;1828:47;1825:67;;;1888:1;1885;1878:12;1825:67;1531:367;;;;;:::o;1903:908::-;2034:6;2042;2050;2058;2066;2119:2;2107:9;2098:7;2094:23;2090:32;2087:52;;;2135:1;2132;2125:12;2087:52;2175:9;2162:23;-1:-1:-1;;;;;2245:2:40;2237:6;2234:14;2231:34;;;2261:1;2258;2251:12;2231:34;2300:70;2362:7;2353:6;2342:9;2338:22;2300:70;:::i;:::-;2389:8;;-1:-1:-1;2274:96:40;-1:-1:-1;2477:2:40;2462:18;;2449:32;;-1:-1:-1;2493:16:40;;;2490:36;;;2522:1;2519;2512:12;2490:36;;2561:72;2625:7;2614:8;2603:9;2599:24;2561:72;:::i;:::-;2652:8;;-1:-1:-1;2535:98:40;-1:-1:-1;;2737:2:40;2722:18;;2709:32;2750:31;2709:32;2750:31;:::i;:::-;2800:5;2790:15;;;1903:908;;;;;;;;:::o;2816:388::-;2884:6;2892;2945:2;2933:9;2924:7;2920:23;2916:32;2913:52;;;2961:1;2958;2951:12;2913:52;3000:9;2987:23;3019:31;3044:5;3019:31;:::i;:::-;3069:5;-1:-1:-1;3126:2:40;3111:18;;3098:32;3139:33;3098:32;3139:33;:::i;:::-;3191:7;3181:17;;;2816:388;;;;;:::o;3209:247::-;3268:6;3321:2;3309:9;3300:7;3296:23;3292:32;3289:52;;;3337:1;3334;3327:12;3289:52;3376:9;3363:23;3395:31;3420:5;3395:31;:::i;3653:393::-;3729:6;3737;3745;3798:2;3786:9;3777:7;3773:23;3769:32;3766:52;;;3814:1;3811;3804:12;3766:52;3853:9;3840:23;3872:31;3897:5;3872:31;:::i;:::-;3922:5;-1:-1:-1;3946:38:40;3980:2;3965:18;;3946:38;:::i;:::-;3936:48;;4003:37;4036:2;4025:9;4021:18;4003:37;:::i;:::-;3993:47;;3653:393;;;;;:::o;4603:180::-;4662:6;4715:2;4703:9;4694:7;4690:23;4686:32;4683:52;;;4731:1;4728;4721:12;4683:52;-1:-1:-1;4754:23:40;;4603:180;-1:-1:-1;4603:180:40:o;4788:683::-;4890:6;4898;4906;4914;4922;4930;4983:3;4971:9;4962:7;4958:23;4954:33;4951:53;;;5000:1;4997;4990:12;4951:53;5039:9;5026:23;5058:31;5083:5;5058:31;:::i;:::-;5108:5;-1:-1:-1;5132:38:40;5166:2;5151:18;;5132:38;:::i;:::-;5122:48;;5222:2;5211:9;5207:18;5194:32;5235:33;5260:7;5235:33;:::i;:::-;5287:7;-1:-1:-1;5313:38:40;5347:2;5332:18;;5313:38;:::i;:::-;5303:48;;5370:38;5403:3;5392:9;5388:19;5370:38;:::i;:::-;5360:48;;5427:38;5460:3;5449:9;5445:19;5427:38;:::i;:::-;5417:48;;4788:683;;;;;;;;:::o;5476:127::-;5537:10;5532:3;5528:20;5525:1;5518:31;5568:4;5565:1;5558:15;5592:4;5589:1;5582:15;5608:253;5680:2;5674:9;5722:4;5710:17;;-1:-1:-1;;;;;5742:34:40;;5778:22;;;5739:62;5736:88;;;5804:18;;:::i;:::-;5840:2;5833:22;5608:253;:::o;5866:275::-;5937:2;5931:9;6002:2;5983:13;;-1:-1:-1;;5979:27:40;5967:40;;-1:-1:-1;;;;;6022:34:40;;6058:22;;;6019:62;6016:88;;;6084:18;;:::i;:::-;6120:2;6113:22;5866:275;;-1:-1:-1;5866:275:40:o;6146:118::-;6232:5;6225:13;6218:21;6211:5;6208:32;6198:60;;6254:1;6251;6244:12;6269:1765;6383:6;6414:2;6457;6445:9;6436:7;6432:23;6428:32;6425:52;;;6473:1;6470;6463:12;6425:52;6513:9;6500:23;-1:-1:-1;;;;;6583:2:40;6575:6;6572:14;6569:34;;;6599:1;6596;6589:12;6569:34;6637:6;6626:9;6622:22;6612:32;;6682:7;6675:4;6671:2;6667:13;6663:27;6653:55;;6704:1;6701;6694:12;6653:55;6740:2;6727:16;6762:2;6758;6755:10;6752:36;;;6768:18;;:::i;:::-;6808:36;6840:2;6835;6832:1;6828:10;6824:19;6808:36;:::i;:::-;6878:15;;;6909:12;;;;-1:-1:-1;6940:4:40;6979:11;;;6971:20;;6967:29;;;7008:19;;;7005:39;;;7040:1;7037;7030:12;7005:39;7064:11;;;;7084:920;7100:6;7095:3;7092:15;7084:920;;;7180:2;7174:3;7165:7;7161:17;7157:26;7154:116;;;7224:1;7253:2;7249;7242:14;7154:116;7296:22;;:::i;:::-;7359:3;7346:17;7376:33;7401:7;7376:33;:::i;:::-;7422:22;;7485:12;;;7472:26;7511:33;7472:26;7511:33;:::i;:::-;7564:14;;;7557:31;7611:2;7654:12;;;7641:26;7680:30;7641:26;7680:30;:::i;:::-;7730:14;;;7723:31;7777:2;7828:12;;;7815:26;7799:14;;;7792:50;7865:3;7917:12;;;7904:26;7888:14;;;7881:50;7944:18;;7117:12;;;;7982;;;;7084:920;;;-1:-1:-1;8023:5:40;6269:1765;-1:-1:-1;;;;;;;6269:1765:40:o;8039:340::-;8241:2;8223:21;;;8280:2;8260:18;;;8253:30;-1:-1:-1;;;8314:2:40;8299:18;;8292:46;8370:2;8355:18;;8039:340::o;8731:251::-;8801:6;8854:2;8842:9;8833:7;8829:23;8825:32;8822:52;;;8870:1;8867;8860:12;8822:52;8902:9;8896:16;8921:31;8946:5;8921:31;:::i;9700:400::-;9902:2;9884:21;;;9941:2;9921:18;;;9914:30;9980:34;9975:2;9960:18;;9953:62;-1:-1:-1;;;10046:2:40;10031:18;;10024:34;10090:3;10075:19;;9700:400::o;10105:410::-;10307:2;10289:21;;;10346:2;10326:18;;;10319:30;10385:34;10380:2;10365:18;;10358:62;-1:-1:-1;;;10451:2:40;10436:18;;10429:44;10505:3;10490:19;;10105:410::o;10877:127::-;10938:10;10933:3;10929:20;10926:1;10919:31;10969:4;10966:1;10959:15;10993:4;10990:1;10983:15;11009:128;11049:3;11080:1;11076:6;11073:1;11070:13;11067:39;;;11086:18;;:::i;:::-;-1:-1:-1;11122:9:40;;11009:128::o;12362:1182::-;-1:-1:-1;;;;;12853:15:40;;;12835:34;;12905:15;;12900:2;12885:18;;12878:43;12784:3;12769:19;;12951:1;12940:13;;12930:144;;12996:10;12991:3;12987:20;12984:1;12977:31;13031:4;13028:1;13021:15;13059:4;13056:1;13049:15;12930:144;13110:6;13105:2;13094:9;13090:18;13083:34;13126:46;13168:2;13157:9;13153:18;13145:6;-1:-1:-1;;;;;8450:46:40;8438:59;;8384:119;13126:46;-1:-1:-1;;;;;4352:31:40;;13223:3;13208:19;;4340:44;-1:-1:-1;;;;;8450:46:40;;13279:3;13264:19;;8438:59;-1:-1:-1;;;;;12320:30:40;;13334:3;13319:19;;12308:43;-1:-1:-1;;;;;12320:30:40;;13389:3;13374:19;;12308:43;-1:-1:-1;;;;;12320:30:40;;13444:3;13429:19;;12308:43;13480:3;13465:19;;13458:35;;;;13524:3;13509:19;13502:36;12362:1182;;-1:-1:-1;;;;;;;;;12362:1182:40:o;13904:127::-;13965:10;13960:3;13956:20;13953:1;13946:31;13996:4;13993:1;13986:15;14020:4;14017:1;14010:15;14380:135;14419:3;14440:17;;;14437:43;;14460:18;;:::i;:::-;-1:-1:-1;14507:1:40;14496:13;;14380:135::o;15738:356::-;15940:2;15922:21;;;15959:18;;;15952:30;16018:34;16013:2;15998:18;;15991:62;16085:2;16070:18;;15738:356::o;16099:273::-;16167:6;16220:2;16208:9;16199:7;16195:23;16191:32;16188:52;;;16236:1;16233;16226:12;16188:52;16268:9;16262:16;16318:4;16311:5;16307:16;16300:5;16297:27;16287:55;;16338:1;16335;16328:12;16377:422;16466:1;16509:5;16466:1;16523:270;16544:7;16534:8;16531:21;16523:270;;;16603:4;16599:1;16595:6;16591:17;16585:4;16582:27;16579:53;;;16612:18;;:::i;:::-;16662:7;16652:8;16648:22;16645:55;;;16682:16;;;;16645:55;16761:22;;;;16721:15;;;;16523:270;;;16527:3;16377:422;;;;;:::o;16804:806::-;16853:5;16883:8;16873:80;;-1:-1:-1;16924:1:40;16938:5;;16873:80;16972:4;16962:76;;-1:-1:-1;17009:1:40;17023:5;;16962:76;17054:4;17072:1;17067:59;;;;17140:1;17135:130;;;;17047:218;;17067:59;17097:1;17088:10;;17111:5;;;17135:130;17172:3;17162:8;17159:17;17156:43;;;17179:18;;:::i;:::-;-1:-1:-1;;17235:1:40;17221:16;;17250:5;;17047:218;;17349:2;17339:8;17336:16;17330:3;17324:4;17321:13;17317:36;17311:2;17301:8;17298:16;17293:2;17287:4;17284:12;17280:35;17277:77;17274:159;;;-1:-1:-1;17386:19:40;;;17418:5;;17274:159;17465:34;17490:8;17484:4;17465:34;:::i;:::-;17535:6;17531:1;17527:6;17523:19;17514:7;17511:32;17508:58;;;17546:18;;:::i;:::-;17584:20;;-1:-1:-1;16804:806:40;;;;;:::o;17615:140::-;17673:5;17702:47;17743:4;17733:8;17729:19;17723:4;17702:47;:::i;17760:184::-;17830:6;17883:2;17871:9;17862:7;17858:23;17854:32;17851:52;;;17899:1;17896;17889:12;17851:52;-1:-1:-1;17922:16:40;;17760:184;-1:-1:-1;17760:184:40:o;17949:168::-;17989:7;18055:1;18051;18047:6;18043:14;18040:1;18037:21;18032:1;18025:9;18018:17;18014:45;18011:71;;;18062:18;;:::i;:::-;-1:-1:-1;18102:9:40;;17949:168::o;18122:127::-;18183:10;18178:3;18174:20;18171:1;18164:31;18214:4;18211:1;18204:15;18238:4;18235:1;18228:15;18254:120;18294:1;18320;18310:35;;18325:18;;:::i;:::-;-1:-1:-1;18359:9:40;;18254:120::o;19334:125::-;19374:4;19402:1;19399;19396:8;19393:34;;;19407:18;;:::i;:::-;-1:-1:-1;19444:9:40;;19334:125::o;19820:287::-;19860:7;-1:-1:-1;;;;;19953:2:40;19950:1;19946:10;19983:2;19980:1;19976:10;20039:3;20035:2;20031:12;20026:3;20023:21;20016:3;20009:11;20002:19;19998:47;19995:73;;;20048:18;;:::i;:::-;20088:13;;19820:287;-1:-1:-1;;;;19820:287:40:o;20112:216::-;20152:1;-1:-1:-1;;;;;20239:2:40;20236:1;20232:10;20261:3;20251:37;;20268:18;;:::i;:::-;20306:10;;20302:20;;;;;20112:216;-1:-1:-1;;20112:216:40:o;22502:410::-;22704:2;22686:21;;;22743:2;22723:18;;;22716:30;22782:34;22777:2;22762:18;;22755:62;-1:-1:-1;;;22848:2:40;22833:18;;22826:44;22902:3;22887:19;;22502:410::o;22917:407::-;23119:2;23101:21;;;23158:2;23138:18;;;23131:30;23197:34;23192:2;23177:18;;23170:62;-1:-1:-1;;;23263:2:40;23248:18;;23241:41;23314:3;23299:19;;22917:407::o;23678:245::-;23745:6;23798:2;23786:9;23777:7;23773:23;23769:32;23766:52;;;23814:1;23811;23804:12;23766:52;23846:9;23840:16;23865:28;23887:5;23865:28;:::i;25104:258::-;25176:1;25186:113;25200:6;25197:1;25194:13;25186:113;;;25276:11;;;25270:18;25257:11;;;25250:39;25222:2;25215:10;25186:113;;;25317:6;25314:1;25311:13;25308:48;;;-1:-1:-1;;25352:1:40;25334:16;;25327:27;25104:258::o;25367:274::-;25496:3;25534:6;25528:13;25550:53;25596:6;25591:3;25584:4;25576:6;25572:17;25550:53;:::i;:::-;25619:16;;;;;25367:274;-1:-1:-1;;25367:274:40:o;25646:383::-;25795:2;25784:9;25777:21;25758:4;25827:6;25821:13;25870:6;25865:2;25854:9;25850:18;25843:34;25886:66;25945:6;25940:2;25929:9;25925:18;25920:2;25912:6;25908:15;25886:66;:::i;:::-;26013:2;25992:15;-1:-1:-1;;25988:29:40;25973:45;;;;26020:2;25969:54;;25646:383;-1:-1:-1;;25646:383:40:o",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {
      "blacklistCurrency(address)": {
        "notice": "Used to blacklist a ERC20 token so it can not be used any longer as a payment currency"
      },
      "createERC20Raffle(address,uint128,address,uint128,uint64,uint64,uint64,bytes32)": {
        "notice": "Allows users to create a raffle of an ERC20 asset",
        "params": {
          "_amount": "Quantity of tokens to be raffled",
          "_currencyInPolygon": "Polygon ERC20 token address used to buy tickets. address(0) should be put here if the currency will be MATIC",
          "_durationInSeconds": "Duration in seconds of the raffle",
          "_merkleRoot": "Used so only whitelisted users can buy raffle tickets",
          "_minimumTicketsSold": "Number of tickets that should be sold in order to be a success raffle. If this minimum amount is not reached the owner of the raffle will be able to cancel the raffle, returning the users their payment plus a little collateral to cover for the gas fees. If this amount is reached, normal flow will be followed",
          "_numberOfTickets": "Number of tickets that will be sold as maximum in the raffle",
          "_pricePerTicket": "Price per ticket. It can be zero in case of an \"airdrop\"",
          "_tokenAddress": "Address of the token amount to raffle"
        }
      },
      "createERC721Raffle(address,uint128,address,uint128,uint64,uint64,uint64,bytes32)": {
        "notice": "Allows users to create a raffle of an ERC721 asset",
        "params": {
          "_currencyInPolygon": "Polygon ERC20 token address used to buy tickets. address(0) should be put here if the currency will be MATIC",
          "_durationInSeconds": "Duration in seconds of the raffle",
          "_merkleRoot": "Used so only whitelisted users can buy raffle tickets",
          "_minimumTicketsSold": "Number of tickets that should be sold in order to be a success raffle. If this minimum amount is not reached the owner of the raffle will be able to cancel the raffle, returning the users their payment plus a little collateral to cover for the gas fees. If this amount is reached, normal flow will be followed.",
          "_nftCollection": "Address of the NFT to raffle",
          "_nftId": "NFTid of the _nftCollection",
          "_numberOfTickets": "Number of tickets that will be sold as maximum in the raffle",
          "_pricePerTicket": "Price per ticket. It can be zero in case of an \"airdrop\""
        }
      },
      "isCurrencyWhitelisted(address)": {
        "notice": "############################################################################################                 VIEW FUNCTIONS  ############################################################################################"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "polygonCallback((address,address,bool,uint256,uint256)[])": {
        "notice": "Relayer will call this function to send updates from Polygon"
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setOpeningFee(uint256)": {
        "notice": "Used to set a new OPENING_FEE"
      },
      "setPriceFeed(address)": {
        "notice": "Used to set a new CurrencyPriceFeed contract"
      },
      "setRelayer(address)": {
        "notice": "Used to set a new relayer account"
      },
      "togglePause()": {
        "notice": "Used to pause/unpause the smart contract by the owner"
      },
      "togglePriceFeed()": {
        "notice": "Used to enable/disable CurrencyPriceFeeds contract"
      },
      "totalAmountClaimable(address)": {
        "notice": "Token address => Amount that owners of the contract can claim as fee rewards address(0) = Ether"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "whitelistCurrency(address,address)": {
        "notice": "Used to whitelist a new ERC20 token to be used as a payment currency",
        "params": {
          "_ERC20TokenAddressMainnet": "Address of the token in Mainnet",
          "_ERC20TokenAddressPolygon": "Address of the token in Polygon"
        }
      },
      "withdrawFees(address[],uint256[],address)": {
        "notice": "Used by the contract owners to claim the fees accrued",
        "params": {
          "_amounts": "List of amounts that will be withdrawn",
          "_receiver": "Address that will receive the fees",
          "_tokenAddress": "List of tokens to withdraw the fees"
        }
      }
    },
    "version": 1
  },
  "offset": [
    1273,
    19269
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1B7 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x724E78DA GT PUSH2 0xEC JUMPI DUP1 PUSH4 0xA21AFC76 GT PUSH2 0x8A JUMPI DUP1 PUSH4 0xC4AE3168 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xC4AE3168 EQ PUSH2 0x4E7 JUMPI DUP1 PUSH4 0xDA653F00 EQ PUSH2 0x4FC JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x51C JUMPI DUP1 PUSH4 0xFCC76B80 EQ PUSH2 0x53C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA21AFC76 EQ PUSH2 0x492 JUMPI DUP1 PUSH4 0xB3F8D40D EQ PUSH2 0x4BF JUMPI DUP1 PUSH4 0xC2F90A2B EQ PUSH2 0x4D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8406C079 GT PUSH2 0xC6 JUMPI DUP1 PUSH4 0x8406C079 EQ PUSH2 0x3FE JUMPI DUP1 PUSH4 0x86375994 EQ PUSH2 0x41E JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x43E JUMPI DUP1 PUSH4 0x95E3D9AB EQ PUSH2 0x45C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x724E78DA EQ PUSH2 0x386 JUMPI DUP1 PUSH4 0x744476B6 EQ PUSH2 0x3A6 JUMPI DUP1 PUSH4 0x7B631DA5 EQ PUSH2 0x3C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4E4D58BB GT PUSH2 0x159 JUMPI DUP1 PUSH4 0x6548E9BC GT PUSH2 0x133 JUMPI DUP1 PUSH4 0x6548E9BC EQ PUSH2 0x321 JUMPI DUP1 PUSH4 0x66998E50 EQ PUSH2 0x341 JUMPI DUP1 PUSH4 0x697CA930 EQ PUSH2 0x357 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x371 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4E4D58BB EQ PUSH2 0x2D3 JUMPI DUP1 PUSH4 0x52DEFBD0 EQ PUSH2 0x2E9 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x309 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x34F65FA2 GT PUSH2 0x195 JUMPI DUP1 PUSH4 0x34F65FA2 EQ PUSH2 0x21A JUMPI DUP1 PUSH4 0x436CC138 EQ PUSH2 0x23A JUMPI DUP1 PUSH4 0x43B938C5 EQ PUSH2 0x27A JUMPI DUP1 PUSH4 0x485CC955 EQ PUSH2 0x2B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23BBCB29 EQ PUSH2 0x1BC JUMPI DUP1 PUSH4 0x2BF78DD8 EQ PUSH2 0x1D1 JUMPI DUP1 PUSH4 0x31F91A84 EQ PUSH2 0x1FA JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1CF PUSH2 0x1CA CALLDATASIZE PUSH1 0x4 PUSH2 0x2597 JUMP JUMPDEST PUSH2 0x55C JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E7 PUSH1 0x98 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x206 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1CF PUSH2 0x215 CALLDATASIZE PUSH1 0x4 PUSH2 0x2676 JUMP JUMPDEST PUSH2 0x9B5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x226 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1CF PUSH2 0x235 CALLDATASIZE PUSH1 0x4 PUSH2 0x26F9 JUMP JUMPDEST PUSH2 0xB29 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x246 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26A PUSH2 0x255 CALLDATASIZE PUSH1 0x4 PUSH2 0x2732 JUMP JUMPDEST PUSH1 0x97 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x286 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26A PUSH2 0x295 CALLDATASIZE PUSH1 0x4 PUSH2 0x2732 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x97 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1CF PUSH2 0x2CE CALLDATASIZE PUSH1 0x4 PUSH2 0x26F9 JUMP JUMPDEST PUSH2 0xC0C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E7 PUSH2 0x1F4 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1CF PUSH2 0x304 CALLDATASIZE PUSH1 0x4 PUSH2 0x2732 JUMP JUMPDEST PUSH2 0xD5E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x315 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x65 SLOAD PUSH1 0xFF AND PUSH2 0x26A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x32D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1CF PUSH2 0x33C CALLDATASIZE PUSH1 0x4 PUSH2 0x2732 JUMP JUMPDEST PUSH2 0xE1D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x34D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E7 PUSH2 0x2710 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x363 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x9D SLOAD PUSH2 0x26A SWAP1 PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x37D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1CF PUSH2 0xE86 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x392 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1CF PUSH2 0x3A1 CALLDATASIZE PUSH1 0x4 PUSH2 0x2732 JUMP JUMPDEST PUSH2 0xEBC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E7 PUSH2 0x3C1 CALLDATASIZE PUSH1 0x4 PUSH2 0x274F JUMP JUMPDEST PUSH2 0xF25 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x9B SLOAD PUSH2 0x3E6 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x40A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x9A SLOAD PUSH2 0x3E6 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x42A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1CF PUSH2 0x439 CALLDATASIZE PUSH1 0x4 PUSH2 0x2794 JUMP JUMPDEST PUSH2 0x112B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x44A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3E6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x468 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3E6 PUSH2 0x477 CALLDATASIZE PUSH1 0x4 PUSH2 0x2732 JUMP JUMPDEST PUSH1 0x9C PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x49E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E7 PUSH2 0x4AD CALLDATASIZE PUSH1 0x4 PUSH2 0x2732 JUMP JUMPDEST PUSH1 0x99 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1CF PUSH2 0x4CD CALLDATASIZE PUSH1 0x4 PUSH2 0x2597 JUMP JUMPDEST PUSH2 0x116C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1CF PUSH2 0x1559 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1CF PUSH2 0x1597 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x508 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E7 PUSH2 0x517 CALLDATASIZE PUSH1 0x4 PUSH2 0x27AD JUMP JUMPDEST PUSH2 0x15B1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x528 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1CF PUSH2 0x537 CALLDATASIZE PUSH1 0x4 PUSH2 0x2732 JUMP JUMPDEST PUSH2 0x1A03 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x548 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1CF PUSH2 0x557 CALLDATASIZE PUSH1 0x4 PUSH2 0x28A1 JUMP JUMPDEST PUSH2 0x1A9E JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x588 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x57F SWAP1 PUSH2 0x29A3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x31A9108F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP9 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP1 PUSH4 0x6352211E SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5D5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5F9 SWAP2 SWAP1 PUSH2 0x29CD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x659 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F7520646F206E6F74206F776E2074686973204E4654000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x57F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x97 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x6C1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546869732063757272656E6379206973206E6F742077686974656C6973746564 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x57F JUMP JUMPDEST PUSH1 0x1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND GT PUSH2 0x6EA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x57F SWAP1 PUSH2 0x29EA JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND GT ISZERO PUSH2 0x71C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x57F SWAP1 PUSH2 0x2A2E JUMP JUMPDEST PUSH2 0xA8C0 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND LT ISZERO PUSH2 0x777 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D696E696D756D206475726174696F6E20697320313220686F75727300000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x57F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x784 DUP8 DUP8 DUP7 PUSH2 0xF25 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x98 SLOAD PUSH2 0x794 SWAP2 SWAP1 PUSH2 0x2A92 JUMP JUMPDEST CALLVALUE EQ PUSH2 0x7D8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x125B98DBDC9C9958DD081999595CC81CD95B9D PUSH1 0x6A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x57F JUMP JUMPDEST PUSH1 0x98 SLOAD PUSH1 0x0 DUP1 DUP1 MSTORE PUSH1 0x99 PUSH1 0x20 MSTORE PUSH32 0x235D629DC802037DED8C61CB27FB29E40FA01B299719D8F991FFE20BDCC59F4F DUP1 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x816 SWAP1 DUP5 SWAP1 PUSH2 0x2A92 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP10 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x871 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x885 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH4 0x31A9108F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP12 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND SWAP3 POP PUSH4 0x6352211E SWAP2 POP PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8D6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8FA SWAP2 SWAP1 PUSH2 0x29CD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x94C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x151C985B9CD9995C8819985A5B1959 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x57F JUMP JUMPDEST PUSH32 0xB26C0BF32D8D3EFF0D0561D0B30F4BF8962A18678833B276FCBBE06C48E9EAAA DUP10 CALLER PUSH1 0x0 DUP12 DUP12 DUP12 DUP12 DUP12 PUSH2 0x989 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP14 AND TIMESTAMP PUSH2 0x2A92 JUMP JUMPDEST DUP12 DUP12 PUSH1 0x40 MLOAD PUSH2 0x9A2 SWAP12 SWAP11 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2AAA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP4 DUP3 DUP2 EQ PUSH2 0xA05 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4172726179206C656E6774687320646F206E6F74206D61746368000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x57F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xB1E JUMPI DUP9 DUP9 DUP3 DUP2 DUP2 LT PUSH2 0xA25 JUMPI PUSH2 0xA25 PUSH2 0x2B63 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xA3A SWAP2 SWAP1 PUSH2 0x2732 JUMP JUMPDEST SWAP2 POP DUP7 DUP7 DUP3 DUP2 DUP2 LT PUSH2 0xA4E JUMPI PUSH2 0xA4E PUSH2 0x2B63 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD SWAP3 POP PUSH1 0x99 PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP4 GT ISZERO PUSH2 0xABE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x82DADEEADCE840E8DEDE40D0D2CED PUSH1 0x8B SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x57F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xADB JUMPI PUSH2 0xAD6 DUP6 DUP5 PUSH2 0x1EAC JUMP JUMPDEST PUSH2 0xAEF JUMP JUMPDEST PUSH2 0xAEF PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP7 DUP6 PUSH2 0x1FF0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x99 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP5 SWAP1 SUB SWAP1 SSTORE PUSH2 0xB17 DUP2 PUSH2 0x2B79 JUMP JUMPDEST SWAP1 POP PUSH2 0xA0B JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x97 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xB92 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546F6B656E20697320616C72656164792077686974656C697374656400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x57F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x97 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0xFF NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0x9C DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP5 DUP7 AND SWAP5 SWAP1 SWAP5 OR SWAP1 SWAP4 SSTORE MLOAD SWAP1 DUP2 MSTORE PUSH32 0x5C6CF68A9D7E416D0EEE740661627DD794257920F1C63DDAE6C6AF81D02D12EA SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC18 PUSH1 0x1 PUSH2 0x2053 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0xC30 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH2 0xC38 PUSH2 0x20E0 JUMP JUMPDEST PUSH2 0xC40 PUSH2 0x210F JUMP JUMPDEST PUSH1 0x9A DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP3 DUP4 AND OR SWAP1 SWAP3 SSTORE PUSH1 0x9B DUP1 SLOAD SWAP3 DUP6 AND SWAP3 DUP3 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE PUSH1 0x9D DUP1 SLOAD PUSH1 0xFF NOT SWAP1 DUP2 AND PUSH1 0x1 SWAP1 DUP2 OR SWAP1 SWAP3 SSTORE PUSH20 0x7CEB23FD6BC0ADD59E62AC25578270CFF1B9F619 PUSH1 0x0 MSTORE PUSH32 0x1A0ACAC70E8CAB5A31AC0C028653F1612AEC657B1C8333C74EABA0C30E0EE391 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x9C PUSH1 0x20 MSTORE PUSH32 0x54CB885AAE8EFE3410AF7107761EDCAE51EE12661F9443184B5E9D063DDF7FA5 DUP1 SLOAD SWAP1 SWAP2 AND PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 OR SWAP1 SSTORE PUSH7 0x6A94D74F430000 PUSH1 0x98 SSTORE DUP1 ISZERO PUSH2 0xD59 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x97 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xDC6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546F6B656E206973206E6F742077686974656C69737465640000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x57F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x97 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE SWAP1 MLOAD SWAP2 DUP3 MSTORE PUSH32 0xDC0548BC90523A9E943EA77D199875FDC1E4F8A419B6D53A595B5E6671480E5 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x9A SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 DUP4 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH32 0x605CA4E43489FB38B91AA63DD9147CD3847957694B080B9285EC898B34269F0C SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x9A DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xEB0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x57F SWAP1 PUSH2 0x2B92 JUMP JUMPDEST PUSH2 0xEBA PUSH1 0x0 PUSH2 0x213E JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x9B SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 DUP4 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH32 0xA8ABE0398416476DB5B05737CD4DA3B3CBDE5012D978A6A6C3FD49D321753536 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x9B DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9C PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD DUP2 MLOAD PUSH4 0x313CE567 PUSH1 0xE0 SHL DUP2 MSTORE SWAP2 MLOAD SWAP4 SWAP5 DUP6 SWAP5 SWAP2 AND SWAP3 PUSH4 0x313CE567 SWAP3 PUSH1 0x4 DUP1 DUP3 ADD SWAP4 SWAP2 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF7D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xFA1 SWAP2 SWAP1 PUSH2 0x2BC7 JUMP JUMPDEST PUSH2 0xFAC SWAP1 PUSH1 0xA PUSH2 0x2CD0 JUMP JUMPDEST PUSH1 0x9B SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9C PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SLOAD SWAP1 MLOAD PUSH4 0xA4B943FB PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP8 AND SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP10 AND SWAP3 AND SWAP1 PUSH4 0xA4B943FB SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x101D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1041 SWAP2 SWAP1 PUSH2 0x2CDF JUMP JUMPDEST PUSH2 0x104B SWAP2 SWAP1 PUSH2 0x2CF8 JUMP JUMPDEST PUSH2 0x1055 SWAP2 SWAP1 PUSH2 0x2CF8 JUMP JUMPDEST PUSH2 0x105F SWAP2 SWAP1 PUSH2 0x2D2D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2710 PUSH2 0x1072 PUSH2 0x1F4 DUP5 PUSH2 0x2CF8 JUMP JUMPDEST PUSH2 0x107C SWAP2 SWAP1 PUSH2 0x2D2D JUMP JUMPDEST PUSH1 0x9B SLOAD PUSH1 0x40 MLOAD PUSH4 0xA4B943FB PUSH1 0xE0 SHL DUP2 MSTORE PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE PUSH1 0x4 DUP3 ADD MSTORE SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xA4B943FB SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x10DE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1102 SWAP2 SWAP1 PUSH2 0x2CDF JUMP JUMPDEST PUSH2 0x1114 DUP4 PUSH8 0xDE0B6B3A7640000 PUSH2 0x2CF8 JUMP JUMPDEST PUSH2 0x111E SWAP2 SWAP1 PUSH2 0x2D2D JUMP JUMPDEST SWAP4 POP POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x98 SLOAD PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP4 SWAP1 MSTORE PUSH32 0x9DC2340C6769757C8D7DFE3A65A3F1E297ED8F919BED31501223AC8AA85DC63D SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x98 SSTORE JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x118F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x57F SWAP1 PUSH2 0x29A3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x97 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x11F7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546869732063757272656E6379206973206E6F742077686974656C6973746564 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x57F JUMP JUMPDEST PUSH1 0x1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND GT PUSH2 0x1220 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x57F SWAP1 PUSH2 0x29EA JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND GT ISZERO PUSH2 0x1252 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x57F SWAP1 PUSH2 0x2A2E JUMP JUMPDEST PUSH2 0xA8C0 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND LT ISZERO PUSH2 0x12AD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D696E696D756D206475726174696F6E20697320313220686F75727300000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x57F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12BD DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 PUSH2 0x15B1 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH2 0x132B JUMPI PUSH1 0x98 SLOAD PUSH2 0x12E3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP11 AND PUSH2 0x2A92 JUMP JUMPDEST CALLVALUE EQ PUSH2 0x1326 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x125B98DBDC9C9958DD08199959481CD95B9D PUSH1 0x72 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x57F JUMP JUMPDEST PUSH2 0x14D8 JUMP JUMPDEST PUSH1 0x98 SLOAD CALLVALUE EQ PUSH2 0x137C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E636F7272656374204F50454E494E475F4645452073656E74000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x57F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x13C3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x13E7 SWAP2 SWAP1 PUSH2 0x2CDF JUMP JUMPDEST SWAP1 POP PUSH2 0x1407 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND CALLER ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP14 AND PUSH2 0x2190 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x144E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1472 SWAP2 SWAP1 PUSH2 0x2CDF JUMP JUMPDEST SWAP1 POP PUSH2 0x147E DUP3 DUP3 PUSH2 0x2D41 JUMP JUMPDEST DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND EQ PUSH2 0x14D5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243323020746F6B656E207472616E73666572206661696C65640000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x57F JUMP JUMPDEST POP POP JUMPDEST PUSH1 0x98 SLOAD PUSH1 0x0 DUP1 DUP1 MSTORE PUSH1 0x99 PUSH1 0x20 MSTORE PUSH32 0x235D629DC802037DED8C61CB27FB29E40FA01B299719D8F991FFE20BDCC59F4F DUP1 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x1516 SWAP1 DUP5 SWAP1 PUSH2 0x2A92 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH32 0xB26C0BF32D8D3EFF0D0561D0B30F4BF8962A18678833B276FCBBE06C48E9EAAA SWAP1 POP DUP10 CALLER PUSH1 0x1 DUP12 DUP12 DUP12 DUP12 DUP12 PUSH2 0x989 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP14 AND TIMESTAMP PUSH2 0x2A92 JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1583 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x57F SWAP1 PUSH2 0x2B92 JUMP JUMPDEST PUSH1 0x9D DUP1 SLOAD PUSH1 0xFF NOT DUP2 AND PUSH1 0xFF SWAP1 SWAP2 AND ISZERO OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0xFF AND PUSH2 0x15A9 JUMPI PUSH2 0xEBA PUSH2 0x21C8 JUMP JUMPDEST PUSH2 0xEBA PUSH2 0x223D JUMP JUMPDEST PUSH1 0x9D SLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH1 0xFF AND PUSH2 0x15FD JUMPI PUSH2 0x2710 PUSH2 0x1F4 PUSH2 0x15D9 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP8 AND PUSH2 0x2D58 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH2 0x15EC SWAP2 SWAP1 PUSH2 0x2CF8 JUMP JUMPDEST PUSH2 0x15F6 SWAP2 SWAP1 PUSH2 0x2D2D JUMP JUMPDEST SWAP1 POP PUSH2 0x19F8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH2 0x16C1 JUMPI PUSH1 0x9B SLOAD PUSH1 0x40 MLOAD PUSH4 0xA4B943FB PUSH1 0xE0 SHL DUP2 MSTORE PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE SWAP11 POP PUSH8 0xDE0B6B3A7640000 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP12 AND SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xA4B943FB SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1682 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x16A6 SWAP2 SWAP1 PUSH2 0x2CDF JUMP JUMPDEST PUSH2 0x16B0 SWAP2 SWAP1 PUSH2 0x2CF8 JUMP JUMPDEST PUSH2 0x16BA SWAP2 SWAP1 PUSH2 0x2D2D JUMP JUMPDEST SWAP1 POP PUSH2 0x17BC JUMP JUMPDEST DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x16FF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1723 SWAP2 SWAP1 PUSH2 0x2BC7 JUMP JUMPDEST PUSH2 0x172E SWAP1 PUSH1 0xA PUSH2 0x2CD0 JUMP JUMPDEST PUSH1 0x9B SLOAD PUSH1 0x40 MLOAD PUSH4 0xA4B943FB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP13 AND SWAP3 AND SWAP1 PUSH4 0xA4B943FB SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1781 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x17A5 SWAP2 SWAP1 PUSH2 0x2CDF JUMP JUMPDEST PUSH2 0x17AF SWAP2 SWAP1 PUSH2 0x2CF8 JUMP JUMPDEST PUSH2 0x17B9 SWAP2 SWAP1 PUSH2 0x2D2D JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9C PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD DUP2 MLOAD PUSH4 0x313CE567 PUSH1 0xE0 SHL DUP2 MSTORE SWAP2 MLOAD SWAP4 SWAP5 AND SWAP3 PUSH4 0x313CE567 SWAP3 PUSH1 0x4 DUP1 DUP5 ADD SWAP4 SWAP2 SWAP3 SWAP2 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1813 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1837 SWAP2 SWAP1 PUSH2 0x2BC7 JUMP JUMPDEST PUSH2 0x1842 SWAP1 PUSH1 0xA PUSH2 0x2CD0 JUMP JUMPDEST PUSH1 0x9B SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9C PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SLOAD SWAP1 MLOAD PUSH4 0xA4B943FB PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP12 AND SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP12 AND SWAP3 AND SWAP1 PUSH4 0xA4B943FB SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x18B3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x18D7 SWAP2 SWAP1 PUSH2 0x2CDF JUMP JUMPDEST PUSH2 0x18E1 SWAP2 SWAP1 PUSH2 0x2CF8 JUMP JUMPDEST PUSH2 0x18EB SWAP2 SWAP1 PUSH2 0x2CF8 JUMP JUMPDEST PUSH2 0x18F5 SWAP2 SWAP1 PUSH2 0x2D2D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH2 0x1906 DUP4 PUSH2 0x2710 PUSH2 0x2CF8 JUMP JUMPDEST PUSH2 0x1910 SWAP2 SWAP1 PUSH2 0x2D2D JUMP JUMPDEST SWAP1 POP PUSH2 0x2710 DUP2 GT PUSH2 0x1924 JUMPI PUSH1 0x0 SWAP4 POP PUSH2 0x19F4 JUMP JUMPDEST PUSH2 0x2710 DUP2 GT DUP1 ISZERO PUSH2 0x1937 JUMPI POP PUSH2 0x2AF8 DUP2 GT ISZERO JUMPDEST ISZERO PUSH2 0x1978 JUMPI PUSH2 0x2710 PUSH2 0x1952 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP10 AND PUSH2 0x2D58 JUMP JUMPDEST PUSH2 0x195E SWAP1 PUSH2 0x1F4 PUSH2 0x2D58 JUMP JUMPDEST PUSH2 0x1968 SWAP2 SWAP1 PUSH2 0x2D87 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP4 POP PUSH2 0x19F4 JUMP JUMPDEST PUSH2 0x2AF8 DUP2 GT DUP1 ISZERO PUSH2 0x198B JUMPI POP PUSH2 0x30D4 DUP2 GT ISZERO JUMPDEST ISZERO PUSH2 0x19B2 JUMPI PUSH2 0x2710 PUSH2 0x19A6 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP10 AND PUSH2 0x2D58 JUMP JUMPDEST PUSH2 0x195E SWAP1 PUSH2 0x3E8 PUSH2 0x2D58 JUMP JUMPDEST PUSH2 0x30D4 DUP2 GT ISZERO PUSH2 0x19F4 JUMPI PUSH2 0x2710 PUSH2 0x19D2 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP10 AND PUSH2 0x2D58 JUMP JUMPDEST PUSH2 0x19DE SWAP1 PUSH2 0x7D0 PUSH2 0x2D58 JUMP JUMPDEST PUSH2 0x19E8 SWAP2 SWAP1 PUSH2 0x2D87 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP4 POP JUMPDEST POP POP POP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1A2D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x57F SWAP1 PUSH2 0x2B92 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1A92 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x57F JUMP JUMPDEST PUSH2 0x1A9B DUP2 PUSH2 0x213E JUMP JUMPDEST POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xD59 JUMPI DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x1ABD JUMPI PUSH2 0x1ABD PUSH2 0x2B63 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD ISZERO PUSH2 0x1BDE JUMPI PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1AEB JUMPI PUSH2 0x1AEB PUSH2 0x2B63 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1BD9 JUMPI DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x1B17 JUMPI PUSH2 0x1B17 PUSH2 0x2B63 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x23B872DD ADDRESS DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1B44 JUMPI PUSH2 0x1B44 PUSH2 0x2B63 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1B62 JUMPI PUSH2 0x1B62 PUSH2 0x2B63 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP7 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1BC0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1BD4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST PUSH2 0x1D05 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1BFB JUMPI PUSH2 0x1BFB PUSH2 0x2B63 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1D05 JUMPI PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1C32 JUMPI PUSH2 0x1C32 PUSH2 0x2B63 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x1C90 JUMPI PUSH2 0x1BD9 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1C61 JUMPI PUSH2 0x1C61 PUSH2 0x2B63 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1C7F JUMPI PUSH2 0x1C7F PUSH2 0x2B63 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH2 0x1EAC JUMP JUMPDEST PUSH2 0x1D05 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1CA5 JUMPI PUSH2 0x1CA5 PUSH2 0x2B63 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1CC3 JUMPI PUSH2 0x1CC3 PUSH2 0x2B63 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x60 ADD MLOAD DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1CE1 JUMPI PUSH2 0x1CE1 PUSH2 0x2B63 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1FF0 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1D19 JUMPI PUSH2 0x1D19 PUSH2 0x2B63 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x80 ADD MLOAD GT ISZERO PUSH2 0x1DA0 JUMPI DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x1D3D JUMPI PUSH2 0x1D3D PUSH2 0x2B63 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x80 ADD MLOAD PUSH1 0x99 PUSH1 0x0 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1D5F JUMPI PUSH2 0x1D5F PUSH2 0x2B63 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1D9A SWAP2 SWAP1 PUSH2 0x2A92 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMPDEST PUSH32 0xFDF87137985FCE097C2059F7E3BD28B9104995CAD66709FDECBAA5E8E48DA9AF DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1DD3 JUMPI PUSH2 0x1DD3 PUSH2 0x2B63 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1DF1 JUMPI PUSH2 0x1DF1 PUSH2 0x2B63 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1E0F JUMPI PUSH2 0x1E0F PUSH2 0x2B63 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1E2D JUMPI PUSH2 0x1E2D PUSH2 0x2B63 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x60 ADD MLOAD DUP8 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x1E4B JUMPI PUSH2 0x1E4B PUSH2 0x2B63 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x1E94 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND DUP2 MSTORE SWAP4 SWAP1 SWAP5 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP1 ISZERO ISZERO PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x1EA5 DUP2 PUSH2 0x2B79 JUMP JUMPDEST SWAP1 POP PUSH2 0x1AA3 JUMP JUMPDEST DUP1 SELFBALANCE LT ISZERO PUSH2 0x1EFC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5F68616E646C6545746865725472616E7366657220696E736F6C76656E740000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x57F JUMP JUMPDEST PUSH1 0x0 GAS SWAP1 POP PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 DUP4 SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1F51 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1F56 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x1FEA JUMPI PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 DUP5 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1FAE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1FC2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x1FEA SWAP4 POP PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 SWAP3 POP DUP8 SWAP2 POP DUP7 SWAP1 POP PUSH2 0x1FF0 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0xD59 SWAP1 DUP5 SWAP1 PUSH4 0xA9059CBB PUSH1 0xE0 SHL SWAP1 PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0x22B7 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x209A JUMPI DUP2 PUSH1 0xFF AND PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0x2076 JUMPI POP ADDRESS EXTCODESIZE ISZERO JUMPDEST PUSH2 0x2092 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x57F SWAP1 PUSH2 0x2DAD JUMP JUMPDEST POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF DUP1 DUP5 AND SWAP2 AND LT PUSH2 0x20C1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x57F SWAP1 PUSH2 0x2DAD JUMP JUMPDEST POP PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0xFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x1 SWAP1 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2107 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x57F SWAP1 PUSH2 0x2DFB JUMP JUMPDEST PUSH2 0xEBA PUSH2 0x2389 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2136 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x57F SWAP1 PUSH2 0x2DFB JUMP JUMPDEST PUSH2 0xEBA PUSH2 0x23B9 JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x1FEA SWAP1 DUP6 SWAP1 PUSH4 0x23B872DD PUSH1 0xE0 SHL SWAP1 PUSH1 0x84 ADD PUSH2 0x201C JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x21EB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x57F SWAP1 PUSH2 0x29A3 JUMP JUMPDEST PUSH1 0x65 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x2220 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0xFF AND PUSH2 0x2286 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x14185D5CD8589B194E881B9BDD081C185D5CD959 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x57F JUMP JUMPDEST PUSH1 0x65 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA CALLER PUSH2 0x2220 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x230C DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x23EC SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0xD59 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x232A SWAP2 SWAP1 PUSH2 0x2E46 JUMP JUMPDEST PUSH2 0xD59 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x57F JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x23B0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x57F SWAP1 PUSH2 0x2DFB JUMP JUMPDEST PUSH2 0xEBA CALLER PUSH2 0x213E JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x23E0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x57F SWAP1 PUSH2 0x2DFB JUMP JUMPDEST PUSH1 0x65 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 PUSH2 0x23FB DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x2403 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x2464 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1C8818D85B1B PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x57F JUMP JUMPDEST DUP5 EXTCODESIZE PUSH2 0x24B2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x57F JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x24CE SWAP2 SWAP1 PUSH2 0x2E8F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x250B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2510 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x19F8 DUP3 DUP3 DUP7 PUSH1 0x60 DUP4 ISZERO PUSH2 0x252A JUMPI POP DUP2 PUSH2 0x1124 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x253A JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x57F SWAP2 SWAP1 PUSH2 0x2EAB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1A9B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x20DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x20DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x25B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 CALLDATALOAD PUSH2 0x25BF DUP2 PUSH2 0x2554 JUMP JUMPDEST SWAP8 POP PUSH2 0x25CD PUSH1 0x20 DUP11 ADD PUSH2 0x2569 JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH2 0x25DD DUP2 PUSH2 0x2554 JUMP JUMPDEST SWAP6 POP PUSH2 0x25EB PUSH1 0x60 DUP11 ADD PUSH2 0x2569 JUMP JUMPDEST SWAP5 POP PUSH2 0x25F9 PUSH1 0x80 DUP11 ADD PUSH2 0x2580 JUMP JUMPDEST SWAP4 POP PUSH2 0x2607 PUSH1 0xA0 DUP11 ADD PUSH2 0x2580 JUMP JUMPDEST SWAP3 POP PUSH2 0x2615 PUSH1 0xC0 DUP11 ADD PUSH2 0x2580 JUMP JUMPDEST SWAP2 POP PUSH1 0xE0 DUP10 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 SWAP1 SWAP4 SWAP7 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x263D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x2654 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x266F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x268E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x26A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x26B1 DUP10 DUP4 DUP11 ADD PUSH2 0x262B JUMP JUMPDEST SWAP1 SWAP8 POP SWAP6 POP PUSH1 0x20 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x26CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26D7 DUP9 DUP3 DUP10 ADD PUSH2 0x262B JUMP JUMPDEST SWAP1 SWAP5 POP SWAP3 POP POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x26EB DUP2 PUSH2 0x2554 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x270C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x2717 DUP2 PUSH2 0x2554 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x2727 DUP2 PUSH2 0x2554 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2744 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1124 DUP2 PUSH2 0x2554 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2764 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x276F DUP2 PUSH2 0x2554 JUMP JUMPDEST SWAP3 POP PUSH2 0x277D PUSH1 0x20 DUP6 ADD PUSH2 0x2569 JUMP JUMPDEST SWAP2 POP PUSH2 0x278B PUSH1 0x40 DUP6 ADD PUSH2 0x2580 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x27A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x27C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH2 0x27D1 DUP2 PUSH2 0x2554 JUMP JUMPDEST SWAP6 POP PUSH2 0x27DF PUSH1 0x20 DUP9 ADD PUSH2 0x2569 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH2 0x27EF DUP2 PUSH2 0x2554 JUMP JUMPDEST SWAP4 POP PUSH2 0x27FD PUSH1 0x60 DUP9 ADD PUSH2 0x2569 JUMP JUMPDEST SWAP3 POP PUSH2 0x280B PUSH1 0x80 DUP9 ADD PUSH2 0x2580 JUMP JUMPDEST SWAP2 POP PUSH2 0x2819 PUSH1 0xA0 DUP9 ADD PUSH2 0x2580 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xA0 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x285D JUMPI PUSH2 0x285D PUSH2 0x2825 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x288B JUMPI PUSH2 0x288B PUSH2 0x2825 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1A9B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x28B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x28CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x28DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x28F1 JUMPI PUSH2 0x28F1 PUSH2 0x2825 JUMP JUMPDEST PUSH2 0x28FF DUP5 DUP3 PUSH1 0x5 SHL ADD PUSH2 0x2863 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 DUP2 ADD SWAP3 POP PUSH1 0xA0 SWAP2 DUP3 MUL DUP5 ADD DUP6 ADD SWAP2 DUP9 DUP4 GT ISZERO PUSH2 0x291E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0x2997 JUMPI DUP1 DUP6 DUP11 SUB SLT ISZERO PUSH2 0x293B JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST PUSH2 0x2943 PUSH2 0x283B JUMP JUMPDEST DUP6 CALLDATALOAD PUSH2 0x294E DUP2 PUSH2 0x2554 JUMP JUMPDEST DUP2 MSTORE DUP6 DUP8 ADD CALLDATALOAD PUSH2 0x295D DUP2 PUSH2 0x2554 JUMP JUMPDEST DUP2 DUP9 ADD MSTORE PUSH1 0x40 DUP7 DUP2 ADD CALLDATALOAD PUSH2 0x2970 DUP2 PUSH2 0x2893 JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE PUSH1 0x60 DUP7 DUP2 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x80 DUP1 DUP8 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE DUP5 MSTORE SWAP4 DUP5 ADD SWAP4 SWAP3 DUP6 ADD SWAP3 PUSH2 0x2923 JUMP JUMPDEST POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x10 SWAP1 DUP3 ADD MSTORE PUSH16 0x14185D5CD8589B194E881C185D5CD959 PUSH1 0x82 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x29DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1124 DUP2 PUSH2 0x2554 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x526166666C6573206D7573742068617665206174206C65617374203220746963 PUSH1 0x40 DUP3 ADD MSTORE PUSH4 0x6B657473 PUSH1 0xE0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2E SWAP1 DUP3 ADD MSTORE PUSH32 0x5F6D696E696D756D5469636B657473536F6C642073686F756C64203C3D205F6E PUSH1 0x40 DUP3 ADD MSTORE PUSH14 0x756D6265724F665469636B657473 PUSH1 0x90 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x2AA5 JUMPI PUSH2 0x2AA5 PUSH2 0x2A7C JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 DUP2 AND DUP3 MSTORE DUP12 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x160 DUP2 ADD PUSH1 0x2 DUP12 LT PUSH2 0x2AE1 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP11 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x2AFC PUSH1 0x60 DUP4 ADD DUP12 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP9 AND PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP8 AND PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP7 AND PUSH1 0xE0 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP6 AND PUSH2 0x100 DUP4 ADD MSTORE PUSH2 0x120 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH2 0x140 ADD MSTORE SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x2B8B JUMPI PUSH2 0x2B8B PUSH2 0x2A7C JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2BD9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x1124 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH2 0x2C25 JUMPI DUP2 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x2C0B JUMPI PUSH2 0x2C0B PUSH2 0x2A7C JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH2 0x2C18 JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH2 0x2BEF JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2C3C JUMPI POP PUSH1 0x1 PUSH2 0x2CCA JUMP JUMPDEST DUP2 PUSH2 0x2C49 JUMPI POP PUSH1 0x0 PUSH2 0x2CCA JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x2C5F JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x2C69 JUMPI PUSH2 0x2C85 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x2CCA JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x2C7A JUMPI PUSH2 0x2C7A PUSH2 0x2A7C JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH2 0x2CCA JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x2CA8 JUMPI POP DUP2 DUP2 EXP PUSH2 0x2CCA JUMP JUMPDEST PUSH2 0x2CB2 DUP4 DUP4 PUSH2 0x2BEA JUMP JUMPDEST DUP1 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x2CC6 JUMPI PUSH2 0x2CC6 PUSH2 0x2A7C JUMP JUMPDEST MUL SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1124 PUSH1 0xFF DUP5 AND DUP4 PUSH2 0x2C2D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2CF1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x2D12 JUMPI PUSH2 0x2D12 PUSH2 0x2A7C JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2D3C JUMPI PUSH2 0x2D3C PUSH2 0x2D17 JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x2D53 JUMPI PUSH2 0x2D53 PUSH2 0x2A7C JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP1 DUP4 AND DUP2 DUP6 AND DUP2 DUP4 DIV DUP2 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x2D7E JUMPI PUSH2 0x2D7E PUSH2 0x2A7C JUMP JUMPDEST MUL SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP1 DUP5 AND DUP1 PUSH2 0x2DA1 JUMPI PUSH2 0x2DA1 PUSH2 0x2D17 JUMP JUMPDEST SWAP3 AND SWAP2 SWAP1 SWAP2 DIV SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2E SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x40 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2B SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x40 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2E58 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1124 DUP2 PUSH2 0x2893 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2E7E JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2E66 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1FEA JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x2EA1 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x2E63 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x2ECA DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x2E63 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH9 0xB29D7129F9F074F938 0xF8 PUSH18 0xB06E8B2A7E504A4734C5DA5B7316DD9C3620 DUP16 MLOAD PUSH5 0x736F6C6343 STOP ADDMOD 0xE STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "5": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x4"
    },
    "7": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "CALLDATASIZE",
      "path": "36"
    },
    "8": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "LT",
      "path": "36"
    },
    "9": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1B7"
    },
    "12": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "13": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "15": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "CALLDATALOAD",
      "path": "36"
    },
    "16": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0xE0"
    },
    "18": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "SHR",
      "path": "36"
    },
    "19": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "DUP1",
      "path": "36"
    },
    "20": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH4",
      "path": "36",
      "value": "0x724E78DA"
    },
    "25": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "GT",
      "path": "36"
    },
    "26": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0xEC"
    },
    "29": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "30": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "DUP1",
      "path": "36"
    },
    "31": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH4",
      "path": "36",
      "value": "0xA21AFC76"
    },
    "36": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "GT",
      "path": "36"
    },
    "37": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x8A"
    },
    "40": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "41": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "DUP1",
      "path": "36"
    },
    "42": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH4",
      "path": "36",
      "value": "0xC4AE3168"
    },
    "47": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "GT",
      "path": "36"
    },
    "48": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x64"
    },
    "51": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "52": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "DUP1",
      "path": "36"
    },
    "53": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH4",
      "path": "36",
      "value": "0xC4AE3168"
    },
    "58": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "EQ",
      "path": "36"
    },
    "59": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x4E7"
    },
    "62": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "63": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "DUP1",
      "path": "36"
    },
    "64": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH4",
      "path": "36",
      "value": "0xDA653F00"
    },
    "69": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "EQ",
      "path": "36"
    },
    "70": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x4FC"
    },
    "73": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "74": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "DUP1",
      "path": "36"
    },
    "75": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH4",
      "path": "36",
      "value": "0xF2FDE38B"
    },
    "80": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "EQ",
      "path": "36"
    },
    "81": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x51C"
    },
    "84": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "85": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "DUP1",
      "path": "36"
    },
    "86": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH4",
      "path": "36",
      "value": "0xFCC76B80"
    },
    "91": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "EQ",
      "path": "36"
    },
    "92": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x53C"
    },
    "95": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "96": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "98": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "DUP1",
      "path": "36"
    },
    "99": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "REVERT",
      "path": "36"
    },
    "100": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "101": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "DUP1",
      "path": "36"
    },
    "102": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH4",
      "path": "36",
      "value": "0xA21AFC76"
    },
    "107": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "EQ",
      "path": "36"
    },
    "108": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x492"
    },
    "111": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "112": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "DUP1",
      "path": "36"
    },
    "113": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH4",
      "path": "36",
      "value": "0xB3F8D40D"
    },
    "118": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "EQ",
      "path": "36"
    },
    "119": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x4BF"
    },
    "122": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "123": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "DUP1",
      "path": "36"
    },
    "124": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH4",
      "path": "36",
      "value": "0xC2F90A2B"
    },
    "129": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "EQ",
      "path": "36"
    },
    "130": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x4D2"
    },
    "133": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "134": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "136": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "DUP1",
      "path": "36"
    },
    "137": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "REVERT",
      "path": "36"
    },
    "138": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "139": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "DUP1",
      "path": "36"
    },
    "140": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH4",
      "path": "36",
      "value": "0x8406C079"
    },
    "145": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "GT",
      "path": "36"
    },
    "146": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0xC6"
    },
    "149": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "150": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "DUP1",
      "path": "36"
    },
    "151": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH4",
      "path": "36",
      "value": "0x8406C079"
    },
    "156": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "EQ",
      "path": "36"
    },
    "157": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x3FE"
    },
    "160": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "161": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "DUP1",
      "path": "36"
    },
    "162": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH4",
      "path": "36",
      "value": "0x86375994"
    },
    "167": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "EQ",
      "path": "36"
    },
    "168": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x41E"
    },
    "171": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "172": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "DUP1",
      "path": "36"
    },
    "173": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH4",
      "path": "36",
      "value": "0x8DA5CB5B"
    },
    "178": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "EQ",
      "path": "36"
    },
    "179": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x43E"
    },
    "182": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "183": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "DUP1",
      "path": "36"
    },
    "184": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH4",
      "path": "36",
      "value": "0x95E3D9AB"
    },
    "189": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "EQ",
      "path": "36"
    },
    "190": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x45C"
    },
    "193": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "194": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "196": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "DUP1",
      "path": "36"
    },
    "197": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "REVERT",
      "path": "36"
    },
    "198": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "199": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "DUP1",
      "path": "36"
    },
    "200": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH4",
      "path": "36",
      "value": "0x724E78DA"
    },
    "205": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "EQ",
      "path": "36"
    },
    "206": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x386"
    },
    "209": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "210": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "DUP1",
      "path": "36"
    },
    "211": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH4",
      "path": "36",
      "value": "0x744476B6"
    },
    "216": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "EQ",
      "path": "36"
    },
    "217": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x3A6"
    },
    "220": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "221": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "DUP1",
      "path": "36"
    },
    "222": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH4",
      "path": "36",
      "value": "0x7B631DA5"
    },
    "227": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "EQ",
      "path": "36"
    },
    "228": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x3C6"
    },
    "231": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "232": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "234": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "DUP1",
      "path": "36"
    },
    "235": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "REVERT",
      "path": "36"
    },
    "236": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "237": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "DUP1",
      "path": "36"
    },
    "238": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH4",
      "path": "36",
      "value": "0x4E4D58BB"
    },
    "243": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "GT",
      "path": "36"
    },
    "244": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x159"
    },
    "247": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "248": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "DUP1",
      "path": "36"
    },
    "249": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH4",
      "path": "36",
      "value": "0x6548E9BC"
    },
    "254": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "GT",
      "path": "36"
    },
    "255": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x133"
    },
    "258": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "259": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "DUP1",
      "path": "36"
    },
    "260": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH4",
      "path": "36",
      "value": "0x6548E9BC"
    },
    "265": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "EQ",
      "path": "36"
    },
    "266": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x321"
    },
    "269": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "270": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "DUP1",
      "path": "36"
    },
    "271": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH4",
      "path": "36",
      "value": "0x66998E50"
    },
    "276": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "EQ",
      "path": "36"
    },
    "277": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x341"
    },
    "280": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "281": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "DUP1",
      "path": "36"
    },
    "282": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH4",
      "path": "36",
      "value": "0x697CA930"
    },
    "287": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "EQ",
      "path": "36"
    },
    "288": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x357"
    },
    "291": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "292": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "DUP1",
      "path": "36"
    },
    "293": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH4",
      "path": "36",
      "value": "0x715018A6"
    },
    "298": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "EQ",
      "path": "36"
    },
    "299": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x371"
    },
    "302": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "303": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "305": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "DUP1",
      "path": "36"
    },
    "306": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "REVERT",
      "path": "36"
    },
    "307": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "308": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "DUP1",
      "path": "36"
    },
    "309": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH4",
      "path": "36",
      "value": "0x4E4D58BB"
    },
    "314": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "EQ",
      "path": "36"
    },
    "315": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2D3"
    },
    "318": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "319": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "DUP1",
      "path": "36"
    },
    "320": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH4",
      "path": "36",
      "value": "0x52DEFBD0"
    },
    "325": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "EQ",
      "path": "36"
    },
    "326": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2E9"
    },
    "329": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "330": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "DUP1",
      "path": "36"
    },
    "331": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH4",
      "path": "36",
      "value": "0x5C975ABB"
    },
    "336": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "EQ",
      "path": "36"
    },
    "337": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x309"
    },
    "340": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "341": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "343": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "DUP1",
      "path": "36"
    },
    "344": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "REVERT",
      "path": "36"
    },
    "345": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "346": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "DUP1",
      "path": "36"
    },
    "347": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH4",
      "path": "36",
      "value": "0x34F65FA2"
    },
    "352": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "GT",
      "path": "36"
    },
    "353": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x195"
    },
    "356": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "357": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "DUP1",
      "path": "36"
    },
    "358": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH4",
      "path": "36",
      "value": "0x34F65FA2"
    },
    "363": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "EQ",
      "path": "36"
    },
    "364": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x21A"
    },
    "367": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "368": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "DUP1",
      "path": "36"
    },
    "369": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH4",
      "path": "36",
      "value": "0x436CC138"
    },
    "374": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "EQ",
      "path": "36"
    },
    "375": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x23A"
    },
    "378": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "379": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "DUP1",
      "path": "36"
    },
    "380": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH4",
      "path": "36",
      "value": "0x43B938C5"
    },
    "385": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "EQ",
      "path": "36"
    },
    "386": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x27A"
    },
    "389": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "390": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "DUP1",
      "path": "36"
    },
    "391": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH4",
      "path": "36",
      "value": "0x485CC955"
    },
    "396": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "EQ",
      "path": "36"
    },
    "397": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2B3"
    },
    "400": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "401": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "403": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "DUP1",
      "path": "36"
    },
    "404": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "REVERT",
      "path": "36"
    },
    "405": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "406": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "DUP1",
      "path": "36"
    },
    "407": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH4",
      "path": "36",
      "value": "0x23BBCB29"
    },
    "412": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "EQ",
      "path": "36"
    },
    "413": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1BC"
    },
    "416": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "417": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "DUP1",
      "path": "36"
    },
    "418": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH4",
      "path": "36",
      "value": "0x2BF78DD8"
    },
    "423": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "EQ",
      "path": "36"
    },
    "424": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1D1"
    },
    "427": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "428": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "DUP1",
      "path": "36"
    },
    "429": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH4",
      "path": "36",
      "value": "0x31F91A84"
    },
    "434": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "EQ",
      "path": "36"
    },
    "435": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1FA"
    },
    "438": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "439": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "440": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "442": {
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "DUP1",
      "path": "36"
    },
    "443": {
      "first_revert": true,
      "fn": null,
      "offset": [
        1273,
        19269
      ],
      "op": "REVERT",
      "path": "36"
    },
    "444": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        5770,
        7442
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "445": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        5770,
        7442
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1CF"
    },
    "448": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        5770,
        7442
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1CA"
    },
    "451": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        5770,
        7442
      ],
      "op": "CALLDATASIZE",
      "path": "36"
    },
    "452": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        5770,
        7442
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x4"
    },
    "454": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        5770,
        7442
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2597"
    },
    "457": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "jump": "i",
      "offset": [
        5770,
        7442
      ],
      "op": "JUMP",
      "path": "36"
    },
    "458": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        5770,
        7442
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "459": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        5770,
        7442
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x55C"
    },
    "462": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "jump": "i",
      "offset": [
        5770,
        7442
      ],
      "op": "JUMP",
      "path": "36"
    },
    "463": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        5770,
        7442
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "464": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        5770,
        7442
      ],
      "op": "STOP",
      "path": "36"
    },
    "465": {
      "offset": [
        2150,
        2176
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "466": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        2150,
        2176
      ],
      "op": "CALLVALUE",
      "path": "36"
    },
    "467": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        2150,
        2176
      ],
      "op": "DUP1",
      "path": "36"
    },
    "468": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        2150,
        2176
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "469": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        2150,
        2176
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1DD"
    },
    "472": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        2150,
        2176
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "473": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        2150,
        2176
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "475": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        2150,
        2176
      ],
      "op": "DUP1",
      "path": "36"
    },
    "476": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        2150,
        2176
      ],
      "op": "REVERT",
      "path": "36"
    },
    "477": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        2150,
        2176
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "478": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        2150,
        2176
      ],
      "op": "POP",
      "path": "36"
    },
    "479": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        2150,
        2176
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1E7"
    },
    "482": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        2150,
        2176
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x98"
    },
    "484": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        2150,
        2176
      ],
      "op": "SLOAD",
      "path": "36"
    },
    "485": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        2150,
        2176
      ],
      "op": "DUP2",
      "path": "36"
    },
    "486": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        2150,
        2176
      ],
      "op": "JUMP",
      "path": "36"
    },
    "487": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        2150,
        2176
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "488": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        2150,
        2176
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "490": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        2150,
        2176
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "491": {
      "op": "SWAP1"
    },
    "492": {
      "op": "DUP2"
    },
    "493": {
      "op": "MSTORE"
    },
    "494": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "496": {
      "op": "ADD"
    },
    "497": {
      "offset": [
        2150,
        2176
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "498": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        2150,
        2176
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "500": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        2150,
        2176
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "501": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        2150,
        2176
      ],
      "op": "DUP1",
      "path": "36"
    },
    "502": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        2150,
        2176
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "503": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        2150,
        2176
      ],
      "op": "SUB",
      "path": "36"
    },
    "504": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        2150,
        2176
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "505": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        2150,
        2176
      ],
      "op": "RETURN",
      "path": "36"
    },
    "506": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15232,
        16145
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "507": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15232,
        16145
      ],
      "op": "CALLVALUE",
      "path": "36"
    },
    "508": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15232,
        16145
      ],
      "op": "DUP1",
      "path": "36"
    },
    "509": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15232,
        16145
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "510": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15232,
        16145
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x206"
    },
    "513": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15232,
        16145
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "514": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15232,
        16145
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "516": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15232,
        16145
      ],
      "op": "DUP1",
      "path": "36"
    },
    "517": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15232,
        16145
      ],
      "op": "REVERT",
      "path": "36"
    },
    "518": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15232,
        16145
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "519": {
      "op": "POP"
    },
    "520": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15232,
        16145
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1CF"
    },
    "523": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15232,
        16145
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x215"
    },
    "526": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15232,
        16145
      ],
      "op": "CALLDATASIZE",
      "path": "36"
    },
    "527": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15232,
        16145
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x4"
    },
    "529": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15232,
        16145
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2676"
    },
    "532": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "jump": "i",
      "offset": [
        15232,
        16145
      ],
      "op": "JUMP",
      "path": "36"
    },
    "533": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15232,
        16145
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "534": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15232,
        16145
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x9B5"
    },
    "537": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "jump": "i",
      "offset": [
        15232,
        16145
      ],
      "op": "JUMP",
      "path": "36"
    },
    "538": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14092,
        14523
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "539": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14092,
        14523
      ],
      "op": "CALLVALUE",
      "path": "36"
    },
    "540": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14092,
        14523
      ],
      "op": "DUP1",
      "path": "36"
    },
    "541": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14092,
        14523
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "542": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14092,
        14523
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x226"
    },
    "545": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14092,
        14523
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "546": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14092,
        14523
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "548": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14092,
        14523
      ],
      "op": "DUP1",
      "path": "36"
    },
    "549": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14092,
        14523
      ],
      "op": "REVERT",
      "path": "36"
    },
    "550": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14092,
        14523
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "551": {
      "op": "POP"
    },
    "552": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14092,
        14523
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1CF"
    },
    "555": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14092,
        14523
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x235"
    },
    "558": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14092,
        14523
      ],
      "op": "CALLDATASIZE",
      "path": "36"
    },
    "559": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14092,
        14523
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x4"
    },
    "561": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14092,
        14523
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x26F9"
    },
    "564": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "jump": "i",
      "offset": [
        14092,
        14523
      ],
      "op": "JUMP",
      "path": "36"
    },
    "565": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14092,
        14523
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "566": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14092,
        14523
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0xB29"
    },
    "569": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "jump": "i",
      "offset": [
        14092,
        14523
      ],
      "op": "JUMP",
      "path": "36"
    },
    "570": {
      "offset": [
        2005,
        2058
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "571": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        2005,
        2058
      ],
      "op": "CALLVALUE",
      "path": "36"
    },
    "572": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        2005,
        2058
      ],
      "op": "DUP1",
      "path": "36"
    },
    "573": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        2005,
        2058
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "574": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        2005,
        2058
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x246"
    },
    "577": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        2005,
        2058
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "578": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        2005,
        2058
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "580": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        2005,
        2058
      ],
      "op": "DUP1",
      "path": "36"
    },
    "581": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        2005,
        2058
      ],
      "op": "REVERT",
      "path": "36"
    },
    "582": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        2005,
        2058
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "583": {
      "op": "POP"
    },
    "584": {
      "offset": [
        2005,
        2058
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x26A"
    },
    "587": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        2005,
        2058
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x255"
    },
    "590": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        2005,
        2058
      ],
      "op": "CALLDATASIZE",
      "path": "36"
    },
    "591": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        2005,
        2058
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x4"
    },
    "593": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        2005,
        2058
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2732"
    },
    "596": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "jump": "i",
      "offset": [
        2005,
        2058
      ],
      "op": "JUMP",
      "path": "36"
    },
    "597": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        2005,
        2058
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "598": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        2005,
        2058
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x97"
    },
    "600": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        2005,
        2058
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "602": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        2005,
        2058
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "603": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        2005,
        2058
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "605": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        2005,
        2058
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "606": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        2005,
        2058
      ],
      "op": "DUP2",
      "path": "36"
    },
    "607": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        2005,
        2058
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "608": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        2005,
        2058
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "610": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        2005,
        2058
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "611": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        2005,
        2058
      ],
      "op": "KECCAK256",
      "path": "36"
    },
    "612": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        2005,
        2058
      ],
      "op": "SLOAD",
      "path": "36"
    },
    "613": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        2005,
        2058
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0xFF"
    },
    "615": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        2005,
        2058
      ],
      "op": "AND",
      "path": "36"
    },
    "616": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        2005,
        2058
      ],
      "op": "DUP2",
      "path": "36"
    },
    "617": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        2005,
        2058
      ],
      "op": "JUMP",
      "path": "36"
    },
    "618": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        2005,
        2058
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "619": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        2005,
        2058
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "621": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        2005,
        2058
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "622": {
      "op": "SWAP1"
    },
    "623": {
      "op": "ISZERO"
    },
    "624": {
      "op": "ISZERO"
    },
    "625": {
      "op": "DUP2"
    },
    "626": {
      "op": "MSTORE"
    },
    "627": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "629": {
      "op": "ADD"
    },
    "630": {
      "offset": [
        2005,
        2058
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1F1"
    },
    "633": {
      "op": "JUMP"
    },
    "634": {
      "fn": "MockMainnetEscrow.isCurrencyWhitelisted",
      "offset": [
        16400,
        16538
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "635": {
      "fn": "MockMainnetEscrow.isCurrencyWhitelisted",
      "offset": [
        16400,
        16538
      ],
      "op": "CALLVALUE",
      "path": "36"
    },
    "636": {
      "fn": "MockMainnetEscrow.isCurrencyWhitelisted",
      "offset": [
        16400,
        16538
      ],
      "op": "DUP1",
      "path": "36"
    },
    "637": {
      "fn": "MockMainnetEscrow.isCurrencyWhitelisted",
      "offset": [
        16400,
        16538
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "638": {
      "fn": "MockMainnetEscrow.isCurrencyWhitelisted",
      "offset": [
        16400,
        16538
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x286"
    },
    "641": {
      "fn": "MockMainnetEscrow.isCurrencyWhitelisted",
      "offset": [
        16400,
        16538
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "642": {
      "fn": "MockMainnetEscrow.isCurrencyWhitelisted",
      "offset": [
        16400,
        16538
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "644": {
      "fn": "MockMainnetEscrow.isCurrencyWhitelisted",
      "offset": [
        16400,
        16538
      ],
      "op": "DUP1",
      "path": "36"
    },
    "645": {
      "fn": "MockMainnetEscrow.isCurrencyWhitelisted",
      "offset": [
        16400,
        16538
      ],
      "op": "REVERT",
      "path": "36"
    },
    "646": {
      "fn": "MockMainnetEscrow.isCurrencyWhitelisted",
      "offset": [
        16400,
        16538
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "647": {
      "op": "POP"
    },
    "648": {
      "fn": "MockMainnetEscrow.isCurrencyWhitelisted",
      "offset": [
        16400,
        16538
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x26A"
    },
    "651": {
      "fn": "MockMainnetEscrow.isCurrencyWhitelisted",
      "offset": [
        16400,
        16538
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x295"
    },
    "654": {
      "fn": "MockMainnetEscrow.isCurrencyWhitelisted",
      "offset": [
        16400,
        16538
      ],
      "op": "CALLDATASIZE",
      "path": "36"
    },
    "655": {
      "fn": "MockMainnetEscrow.isCurrencyWhitelisted",
      "offset": [
        16400,
        16538
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x4"
    },
    "657": {
      "fn": "MockMainnetEscrow.isCurrencyWhitelisted",
      "offset": [
        16400,
        16538
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2732"
    },
    "660": {
      "fn": "MockMainnetEscrow.isCurrencyWhitelisted",
      "jump": "i",
      "offset": [
        16400,
        16538
      ],
      "op": "JUMP",
      "path": "36"
    },
    "661": {
      "fn": "MockMainnetEscrow.isCurrencyWhitelisted",
      "offset": [
        16400,
        16538
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "662": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "664": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "666": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "668": {
      "op": "SHL"
    },
    "669": {
      "op": "SUB"
    },
    "670": {
      "fn": "MockMainnetEscrow.isCurrencyWhitelisted",
      "offset": [
        16497,
        16531
      ],
      "op": "AND",
      "path": "36",
      "statement": 0
    },
    "671": {
      "fn": "MockMainnetEscrow.isCurrencyWhitelisted",
      "offset": [
        16474,
        16478
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "673": {
      "fn": "MockMainnetEscrow.isCurrencyWhitelisted",
      "offset": [
        16497,
        16531
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "674": {
      "fn": "MockMainnetEscrow.isCurrencyWhitelisted",
      "offset": [
        16497,
        16531
      ],
      "op": "DUP2",
      "path": "36"
    },
    "675": {
      "fn": "MockMainnetEscrow.isCurrencyWhitelisted",
      "offset": [
        16497,
        16531
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "676": {
      "fn": "MockMainnetEscrow.isCurrencyWhitelisted",
      "offset": [
        16497,
        16518
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x97"
    },
    "678": {
      "fn": "MockMainnetEscrow.isCurrencyWhitelisted",
      "offset": [
        16497,
        16531
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "680": {
      "fn": "MockMainnetEscrow.isCurrencyWhitelisted",
      "offset": [
        16497,
        16531
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "681": {
      "fn": "MockMainnetEscrow.isCurrencyWhitelisted",
      "offset": [
        16497,
        16531
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "683": {
      "fn": "MockMainnetEscrow.isCurrencyWhitelisted",
      "offset": [
        16497,
        16531
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "684": {
      "fn": "MockMainnetEscrow.isCurrencyWhitelisted",
      "offset": [
        16497,
        16531
      ],
      "op": "KECCAK256",
      "path": "36"
    },
    "685": {
      "fn": "MockMainnetEscrow.isCurrencyWhitelisted",
      "offset": [
        16497,
        16531
      ],
      "op": "SLOAD",
      "path": "36"
    },
    "686": {
      "fn": "MockMainnetEscrow.isCurrencyWhitelisted",
      "offset": [
        16497,
        16531
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0xFF"
    },
    "688": {
      "fn": "MockMainnetEscrow.isCurrencyWhitelisted",
      "offset": [
        16497,
        16531
      ],
      "op": "AND",
      "path": "36"
    },
    "689": {
      "fn": "MockMainnetEscrow.isCurrencyWhitelisted",
      "offset": [
        16497,
        16531
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "690": {
      "fn": "MockMainnetEscrow.isCurrencyWhitelisted",
      "offset": [
        16400,
        16538
      ],
      "op": "JUMP",
      "path": "36"
    },
    "691": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4064,
        4629
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "692": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4064,
        4629
      ],
      "op": "CALLVALUE",
      "path": "36"
    },
    "693": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4064,
        4629
      ],
      "op": "DUP1",
      "path": "36"
    },
    "694": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4064,
        4629
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "695": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4064,
        4629
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2BF"
    },
    "698": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4064,
        4629
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "699": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4064,
        4629
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "701": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4064,
        4629
      ],
      "op": "DUP1",
      "path": "36"
    },
    "702": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4064,
        4629
      ],
      "op": "REVERT",
      "path": "36"
    },
    "703": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4064,
        4629
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "704": {
      "op": "POP"
    },
    "705": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4064,
        4629
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1CF"
    },
    "708": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4064,
        4629
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2CE"
    },
    "711": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4064,
        4629
      ],
      "op": "CALLDATASIZE",
      "path": "36"
    },
    "712": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4064,
        4629
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x4"
    },
    "714": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4064,
        4629
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x26F9"
    },
    "717": {
      "fn": "MockMainnetEscrow.initialize",
      "jump": "i",
      "offset": [
        4064,
        4629
      ],
      "op": "JUMP",
      "path": "36"
    },
    "718": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4064,
        4629
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "719": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4064,
        4629
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0xC0C"
    },
    "722": {
      "fn": "MockMainnetEscrow.initialize",
      "jump": "i",
      "offset": [
        4064,
        4629
      ],
      "op": "JUMP",
      "path": "36"
    },
    "723": {
      "offset": [
        2235,
        2290
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "724": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        2235,
        2290
      ],
      "op": "CALLVALUE",
      "path": "36"
    },
    "725": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        2235,
        2290
      ],
      "op": "DUP1",
      "path": "36"
    },
    "726": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        2235,
        2290
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "727": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        2235,
        2290
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2DF"
    },
    "730": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        2235,
        2290
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "731": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        2235,
        2290
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "733": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        2235,
        2290
      ],
      "op": "DUP1",
      "path": "36"
    },
    "734": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        2235,
        2290
      ],
      "op": "REVERT",
      "path": "36"
    },
    "735": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        2235,
        2290
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "736": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        2235,
        2290
      ],
      "op": "POP",
      "path": "36"
    },
    "737": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        2235,
        2290
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1E7"
    },
    "740": {
      "offset": [
        2287,
        2290
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1F4"
    },
    "743": {
      "offset": [
        2235,
        2290
      ],
      "op": "DUP2",
      "path": "36"
    },
    "744": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        2235,
        2290
      ],
      "op": "JUMP",
      "path": "36"
    },
    "745": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14648,
        14949
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "746": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14648,
        14949
      ],
      "op": "CALLVALUE",
      "path": "36"
    },
    "747": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14648,
        14949
      ],
      "op": "DUP1",
      "path": "36"
    },
    "748": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14648,
        14949
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "749": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14648,
        14949
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2F5"
    },
    "752": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14648,
        14949
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "753": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14648,
        14949
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "755": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14648,
        14949
      ],
      "op": "DUP1",
      "path": "36"
    },
    "756": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14648,
        14949
      ],
      "op": "REVERT",
      "path": "36"
    },
    "757": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14648,
        14949
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "758": {
      "op": "POP"
    },
    "759": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14648,
        14949
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1CF"
    },
    "762": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14648,
        14949
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x304"
    },
    "765": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14648,
        14949
      ],
      "op": "CALLDATASIZE",
      "path": "36"
    },
    "766": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14648,
        14949
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x4"
    },
    "768": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14648,
        14949
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2732"
    },
    "771": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "jump": "i",
      "offset": [
        14648,
        14949
      ],
      "op": "JUMP",
      "path": "36"
    },
    "772": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14648,
        14949
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "773": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14648,
        14949
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0xD5E"
    },
    "776": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "jump": "i",
      "offset": [
        14648,
        14949
      ],
      "op": "JUMP",
      "path": "36"
    },
    "777": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1341,
        1425
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "778": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1341,
        1425
      ],
      "op": "CALLVALUE",
      "path": "2"
    },
    "779": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1341,
        1425
      ],
      "op": "DUP1",
      "path": "2"
    },
    "780": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1341,
        1425
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "781": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1341,
        1425
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x315"
    },
    "784": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1341,
        1425
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "785": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1341,
        1425
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "787": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1341,
        1425
      ],
      "op": "DUP1",
      "path": "2"
    },
    "788": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1341,
        1425
      ],
      "op": "REVERT",
      "path": "2"
    },
    "789": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1341,
        1425
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "790": {
      "op": "POP"
    },
    "791": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1411,
        1418
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 1,
      "value": "0x65"
    },
    "793": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1411,
        1418
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "794": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1411,
        1418
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xFF"
    },
    "796": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1411,
        1418
      ],
      "op": "AND",
      "path": "2"
    },
    "797": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1341,
        1425
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x26A"
    },
    "800": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1341,
        1425
      ],
      "op": "JUMP",
      "path": "2"
    },
    "801": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        13002,
        13132
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "802": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        13002,
        13132
      ],
      "op": "CALLVALUE",
      "path": "36"
    },
    "803": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        13002,
        13132
      ],
      "op": "DUP1",
      "path": "36"
    },
    "804": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        13002,
        13132
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "805": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        13002,
        13132
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x32D"
    },
    "808": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        13002,
        13132
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "809": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        13002,
        13132
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "811": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        13002,
        13132
      ],
      "op": "DUP1",
      "path": "36"
    },
    "812": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        13002,
        13132
      ],
      "op": "REVERT",
      "path": "36"
    },
    "813": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        13002,
        13132
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "814": {
      "op": "POP"
    },
    "815": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        13002,
        13132
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1CF"
    },
    "818": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        13002,
        13132
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x33C"
    },
    "821": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        13002,
        13132
      ],
      "op": "CALLDATASIZE",
      "path": "36"
    },
    "822": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        13002,
        13132
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x4"
    },
    "824": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        13002,
        13132
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2732"
    },
    "827": {
      "fn": "MockMainnetEscrow.setRelayer",
      "jump": "i",
      "offset": [
        13002,
        13132
      ],
      "op": "JUMP",
      "path": "36"
    },
    "828": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        13002,
        13132
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "829": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        13002,
        13132
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0xE1D"
    },
    "832": {
      "fn": "MockMainnetEscrow.setRelayer",
      "jump": "i",
      "offset": [
        13002,
        13132
      ],
      "op": "JUMP",
      "path": "36"
    },
    "833": {
      "offset": [
        2296,
        2355
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "834": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        2296,
        2355
      ],
      "op": "CALLVALUE",
      "path": "36"
    },
    "835": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        2296,
        2355
      ],
      "op": "DUP1",
      "path": "36"
    },
    "836": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        2296,
        2355
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "837": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        2296,
        2355
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x34D"
    },
    "840": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        2296,
        2355
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "841": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        2296,
        2355
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "843": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        2296,
        2355
      ],
      "op": "DUP1",
      "path": "36"
    },
    "844": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        2296,
        2355
      ],
      "op": "REVERT",
      "path": "36"
    },
    "845": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        2296,
        2355
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "846": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        2296,
        2355
      ],
      "op": "POP",
      "path": "36"
    },
    "847": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        2296,
        2355
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1E7"
    },
    "850": {
      "offset": [
        2350,
        2355
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2710"
    },
    "853": {
      "offset": [
        2296,
        2355
      ],
      "op": "DUP2",
      "path": "36"
    },
    "854": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        2296,
        2355
      ],
      "op": "JUMP",
      "path": "36"
    },
    "855": {
      "offset": [
        3031,
        3060
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "856": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        3031,
        3060
      ],
      "op": "CALLVALUE",
      "path": "36"
    },
    "857": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        3031,
        3060
      ],
      "op": "DUP1",
      "path": "36"
    },
    "858": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        3031,
        3060
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "859": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        3031,
        3060
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x363"
    },
    "862": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        3031,
        3060
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "863": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        3031,
        3060
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "865": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        3031,
        3060
      ],
      "op": "DUP1",
      "path": "36"
    },
    "866": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        3031,
        3060
      ],
      "op": "REVERT",
      "path": "36"
    },
    "867": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        3031,
        3060
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "868": {
      "op": "POP"
    },
    "869": {
      "offset": [
        3031,
        3060
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x9D"
    },
    "871": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        3031,
        3060
      ],
      "op": "SLOAD",
      "path": "36"
    },
    "872": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        3031,
        3060
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x26A"
    },
    "875": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        3031,
        3060
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "876": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        3031,
        3060
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0xFF"
    },
    "878": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        3031,
        3060
      ],
      "op": "AND",
      "path": "36"
    },
    "879": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        3031,
        3060
      ],
      "op": "DUP2",
      "path": "36"
    },
    "880": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        3031,
        3060
      ],
      "op": "JUMP",
      "path": "36"
    },
    "881": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1908,
        2009
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "882": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1908,
        2009
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "883": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1908,
        2009
      ],
      "op": "DUP1",
      "path": "0"
    },
    "884": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1908,
        2009
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "885": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1908,
        2009
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x37D"
    },
    "888": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1908,
        2009
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "889": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1908,
        2009
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "891": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1908,
        2009
      ],
      "op": "DUP1",
      "path": "0"
    },
    "892": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1908,
        2009
      ],
      "op": "REVERT",
      "path": "0"
    },
    "893": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1908,
        2009
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "894": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1908,
        2009
      ],
      "op": "POP",
      "path": "0"
    },
    "895": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1908,
        2009
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1CF"
    },
    "898": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1908,
        2009
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xE86"
    },
    "901": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "jump": "i",
      "offset": [
        1908,
        2009
      ],
      "op": "JUMP",
      "path": "0"
    },
    "902": {
      "fn": "MockMainnetEscrow.setPriceFeed",
      "offset": [
        13215,
        13428
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "903": {
      "fn": "MockMainnetEscrow.setPriceFeed",
      "offset": [
        13215,
        13428
      ],
      "op": "CALLVALUE",
      "path": "36"
    },
    "904": {
      "fn": "MockMainnetEscrow.setPriceFeed",
      "offset": [
        13215,
        13428
      ],
      "op": "DUP1",
      "path": "36"
    },
    "905": {
      "fn": "MockMainnetEscrow.setPriceFeed",
      "offset": [
        13215,
        13428
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "906": {
      "fn": "MockMainnetEscrow.setPriceFeed",
      "offset": [
        13215,
        13428
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x392"
    },
    "909": {
      "fn": "MockMainnetEscrow.setPriceFeed",
      "offset": [
        13215,
        13428
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "910": {
      "fn": "MockMainnetEscrow.setPriceFeed",
      "offset": [
        13215,
        13428
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "912": {
      "fn": "MockMainnetEscrow.setPriceFeed",
      "offset": [
        13215,
        13428
      ],
      "op": "DUP1",
      "path": "36"
    },
    "913": {
      "fn": "MockMainnetEscrow.setPriceFeed",
      "offset": [
        13215,
        13428
      ],
      "op": "REVERT",
      "path": "36"
    },
    "914": {
      "fn": "MockMainnetEscrow.setPriceFeed",
      "offset": [
        13215,
        13428
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "915": {
      "op": "POP"
    },
    "916": {
      "fn": "MockMainnetEscrow.setPriceFeed",
      "offset": [
        13215,
        13428
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1CF"
    },
    "919": {
      "fn": "MockMainnetEscrow.setPriceFeed",
      "offset": [
        13215,
        13428
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x3A1"
    },
    "922": {
      "fn": "MockMainnetEscrow.setPriceFeed",
      "offset": [
        13215,
        13428
      ],
      "op": "CALLDATASIZE",
      "path": "36"
    },
    "923": {
      "fn": "MockMainnetEscrow.setPriceFeed",
      "offset": [
        13215,
        13428
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x4"
    },
    "925": {
      "fn": "MockMainnetEscrow.setPriceFeed",
      "offset": [
        13215,
        13428
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2732"
    },
    "928": {
      "fn": "MockMainnetEscrow.setPriceFeed",
      "jump": "i",
      "offset": [
        13215,
        13428
      ],
      "op": "JUMP",
      "path": "36"
    },
    "929": {
      "fn": "MockMainnetEscrow.setPriceFeed",
      "offset": [
        13215,
        13428
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "930": {
      "fn": "MockMainnetEscrow.setPriceFeed",
      "offset": [
        13215,
        13428
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0xEBC"
    },
    "933": {
      "fn": "MockMainnetEscrow.setPriceFeed",
      "jump": "i",
      "offset": [
        13215,
        13428
      ],
      "op": "JUMP",
      "path": "36"
    },
    "934": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18543,
        19267
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "935": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18543,
        19267
      ],
      "op": "CALLVALUE",
      "path": "36"
    },
    "936": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18543,
        19267
      ],
      "op": "DUP1",
      "path": "36"
    },
    "937": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18543,
        19267
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "938": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18543,
        19267
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x3B2"
    },
    "941": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18543,
        19267
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "942": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18543,
        19267
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "944": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18543,
        19267
      ],
      "op": "DUP1",
      "path": "36"
    },
    "945": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18543,
        19267
      ],
      "op": "REVERT",
      "path": "36"
    },
    "946": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18543,
        19267
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "947": {
      "op": "POP"
    },
    "948": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18543,
        19267
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1E7"
    },
    "951": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18543,
        19267
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x3C1"
    },
    "954": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18543,
        19267
      ],
      "op": "CALLDATASIZE",
      "path": "36"
    },
    "955": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18543,
        19267
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x4"
    },
    "957": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18543,
        19267
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x274F"
    },
    "960": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "jump": "i",
      "offset": [
        18543,
        19267
      ],
      "op": "JUMP",
      "path": "36"
    },
    "961": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18543,
        19267
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "962": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18543,
        19267
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0xF25"
    },
    "965": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "jump": "i",
      "offset": [
        18543,
        19267
      ],
      "op": "JUMP",
      "path": "36"
    },
    "966": {
      "offset": [
        2751,
        2794
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "967": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        2751,
        2794
      ],
      "op": "CALLVALUE",
      "path": "36"
    },
    "968": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        2751,
        2794
      ],
      "op": "DUP1",
      "path": "36"
    },
    "969": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        2751,
        2794
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "970": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        2751,
        2794
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x3D2"
    },
    "973": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        2751,
        2794
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "974": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        2751,
        2794
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "976": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        2751,
        2794
      ],
      "op": "DUP1",
      "path": "36"
    },
    "977": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        2751,
        2794
      ],
      "op": "REVERT",
      "path": "36"
    },
    "978": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        2751,
        2794
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "979": {
      "op": "POP"
    },
    "980": {
      "offset": [
        2751,
        2794
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x9B"
    },
    "982": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        2751,
        2794
      ],
      "op": "SLOAD",
      "path": "36"
    },
    "983": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        2751,
        2794
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x3E6"
    },
    "986": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        2751,
        2794
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "987": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "989": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "991": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "993": {
      "op": "SHL"
    },
    "994": {
      "op": "SUB"
    },
    "995": {
      "offset": [
        2751,
        2794
      ],
      "op": "AND",
      "path": "36"
    },
    "996": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        2751,
        2794
      ],
      "op": "DUP2",
      "path": "36"
    },
    "997": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        2751,
        2794
      ],
      "op": "JUMP",
      "path": "36"
    },
    "998": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        2751,
        2794
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "999": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        2751,
        2794
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "1001": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        2751,
        2794
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "1002": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1004": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1006": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1008": {
      "op": "SHL"
    },
    "1009": {
      "op": "SUB"
    },
    "1010": {
      "op": "SWAP1"
    },
    "1011": {
      "op": "SWAP2"
    },
    "1012": {
      "op": "AND"
    },
    "1013": {
      "op": "DUP2"
    },
    "1014": {
      "op": "MSTORE"
    },
    "1015": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1017": {
      "op": "ADD"
    },
    "1018": {
      "offset": [
        2751,
        2794
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1F1"
    },
    "1021": {
      "op": "JUMP"
    },
    "1022": {
      "offset": [
        2631,
        2653
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "1023": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        2631,
        2653
      ],
      "op": "CALLVALUE",
      "path": "36"
    },
    "1024": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        2631,
        2653
      ],
      "op": "DUP1",
      "path": "36"
    },
    "1025": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        2631,
        2653
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "1026": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        2631,
        2653
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x40A"
    },
    "1029": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        2631,
        2653
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "1030": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        2631,
        2653
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "1032": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        2631,
        2653
      ],
      "op": "DUP1",
      "path": "36"
    },
    "1033": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        2631,
        2653
      ],
      "op": "REVERT",
      "path": "36"
    },
    "1034": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        2631,
        2653
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "1035": {
      "op": "POP"
    },
    "1036": {
      "offset": [
        2631,
        2653
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x9A"
    },
    "1038": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        2631,
        2653
      ],
      "op": "SLOAD",
      "path": "36"
    },
    "1039": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        2631,
        2653
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x3E6"
    },
    "1042": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        2631,
        2653
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "1043": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1045": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1047": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1049": {
      "op": "SHL"
    },
    "1050": {
      "op": "SUB"
    },
    "1051": {
      "offset": [
        2631,
        2653
      ],
      "op": "AND",
      "path": "36"
    },
    "1052": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        2631,
        2653
      ],
      "op": "DUP2",
      "path": "36"
    },
    "1053": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        2631,
        2653
      ],
      "op": "JUMP",
      "path": "36"
    },
    "1054": {
      "fn": "MockMainnetEscrow.setOpeningFee",
      "offset": [
        13686,
        13839
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "1055": {
      "fn": "MockMainnetEscrow.setOpeningFee",
      "offset": [
        13686,
        13839
      ],
      "op": "CALLVALUE",
      "path": "36"
    },
    "1056": {
      "fn": "MockMainnetEscrow.setOpeningFee",
      "offset": [
        13686,
        13839
      ],
      "op": "DUP1",
      "path": "36"
    },
    "1057": {
      "fn": "MockMainnetEscrow.setOpeningFee",
      "offset": [
        13686,
        13839
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "1058": {
      "fn": "MockMainnetEscrow.setOpeningFee",
      "offset": [
        13686,
        13839
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x42A"
    },
    "1061": {
      "fn": "MockMainnetEscrow.setOpeningFee",
      "offset": [
        13686,
        13839
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "1062": {
      "fn": "MockMainnetEscrow.setOpeningFee",
      "offset": [
        13686,
        13839
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "1064": {
      "fn": "MockMainnetEscrow.setOpeningFee",
      "offset": [
        13686,
        13839
      ],
      "op": "DUP1",
      "path": "36"
    },
    "1065": {
      "fn": "MockMainnetEscrow.setOpeningFee",
      "offset": [
        13686,
        13839
      ],
      "op": "REVERT",
      "path": "36"
    },
    "1066": {
      "fn": "MockMainnetEscrow.setOpeningFee",
      "offset": [
        13686,
        13839
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "1067": {
      "op": "POP"
    },
    "1068": {
      "fn": "MockMainnetEscrow.setOpeningFee",
      "offset": [
        13686,
        13839
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1CF"
    },
    "1071": {
      "fn": "MockMainnetEscrow.setOpeningFee",
      "offset": [
        13686,
        13839
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x439"
    },
    "1074": {
      "fn": "MockMainnetEscrow.setOpeningFee",
      "offset": [
        13686,
        13839
      ],
      "op": "CALLDATASIZE",
      "path": "36"
    },
    "1075": {
      "fn": "MockMainnetEscrow.setOpeningFee",
      "offset": [
        13686,
        13839
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x4"
    },
    "1077": {
      "fn": "MockMainnetEscrow.setOpeningFee",
      "offset": [
        13686,
        13839
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2794"
    },
    "1080": {
      "fn": "MockMainnetEscrow.setOpeningFee",
      "jump": "i",
      "offset": [
        13686,
        13839
      ],
      "op": "JUMP",
      "path": "36"
    },
    "1081": {
      "fn": "MockMainnetEscrow.setOpeningFee",
      "offset": [
        13686,
        13839
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "1082": {
      "fn": "MockMainnetEscrow.setOpeningFee",
      "offset": [
        13686,
        13839
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x112B"
    },
    "1085": {
      "fn": "MockMainnetEscrow.setOpeningFee",
      "jump": "i",
      "offset": [
        13686,
        13839
      ],
      "op": "JUMP",
      "path": "36"
    },
    "1086": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        1276,
        1361
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1087": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        1276,
        1361
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "1088": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        1276,
        1361
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1089": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        1276,
        1361
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "1090": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        1276,
        1361
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x44A"
    },
    "1093": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        1276,
        1361
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1094": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        1276,
        1361
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1096": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        1276,
        1361
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1097": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        1276,
        1361
      ],
      "op": "REVERT",
      "path": "0"
    },
    "1098": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        1276,
        1361
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1099": {
      "op": "POP"
    },
    "1100": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        1348,
        1354
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 2,
      "value": "0x33"
    },
    "1102": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        1348,
        1354
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1103": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1105": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1107": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1109": {
      "op": "SHL"
    },
    "1110": {
      "op": "SUB"
    },
    "1111": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        1348,
        1354
      ],
      "op": "AND",
      "path": "0"
    },
    "1112": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        1276,
        1361
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3E6"
    },
    "1115": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        1276,
        1361
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1116": {
      "offset": [
        2889,
        2952
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "1117": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        2889,
        2952
      ],
      "op": "CALLVALUE",
      "path": "36"
    },
    "1118": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        2889,
        2952
      ],
      "op": "DUP1",
      "path": "36"
    },
    "1119": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        2889,
        2952
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "1120": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        2889,
        2952
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x468"
    },
    "1123": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        2889,
        2952
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "1124": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        2889,
        2952
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "1126": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        2889,
        2952
      ],
      "op": "DUP1",
      "path": "36"
    },
    "1127": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        2889,
        2952
      ],
      "op": "REVERT",
      "path": "36"
    },
    "1128": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        2889,
        2952
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "1129": {
      "op": "POP"
    },
    "1130": {
      "offset": [
        2889,
        2952
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x3E6"
    },
    "1133": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        2889,
        2952
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x477"
    },
    "1136": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        2889,
        2952
      ],
      "op": "CALLDATASIZE",
      "path": "36"
    },
    "1137": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        2889,
        2952
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x4"
    },
    "1139": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        2889,
        2952
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2732"
    },
    "1142": {
      "fn": "OwnableUpgradeable.owner",
      "jump": "i",
      "offset": [
        2889,
        2952
      ],
      "op": "JUMP",
      "path": "36"
    },
    "1143": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        2889,
        2952
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "1144": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        2889,
        2952
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x9C"
    },
    "1146": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        2889,
        2952
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "1148": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        2889,
        2952
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "1149": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        2889,
        2952
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "1151": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        2889,
        2952
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "1152": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        2889,
        2952
      ],
      "op": "DUP2",
      "path": "36"
    },
    "1153": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        2889,
        2952
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "1154": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        2889,
        2952
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "1156": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        2889,
        2952
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "1157": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        2889,
        2952
      ],
      "op": "KECCAK256",
      "path": "36"
    },
    "1158": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        2889,
        2952
      ],
      "op": "SLOAD",
      "path": "36"
    },
    "1159": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1161": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1163": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1165": {
      "op": "SHL"
    },
    "1166": {
      "op": "SUB"
    },
    "1167": {
      "offset": [
        2889,
        2952
      ],
      "op": "AND",
      "path": "36"
    },
    "1168": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        2889,
        2952
      ],
      "op": "DUP2",
      "path": "36"
    },
    "1169": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        2889,
        2952
      ],
      "op": "JUMP",
      "path": "36"
    },
    "1170": {
      "offset": [
        2489,
        2544
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "1171": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        2489,
        2544
      ],
      "op": "CALLVALUE",
      "path": "36"
    },
    "1172": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        2489,
        2544
      ],
      "op": "DUP1",
      "path": "36"
    },
    "1173": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        2489,
        2544
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "1174": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        2489,
        2544
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x49E"
    },
    "1177": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        2489,
        2544
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "1178": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        2489,
        2544
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "1180": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        2489,
        2544
      ],
      "op": "DUP1",
      "path": "36"
    },
    "1181": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        2489,
        2544
      ],
      "op": "REVERT",
      "path": "36"
    },
    "1182": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        2489,
        2544
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "1183": {
      "op": "POP"
    },
    "1184": {
      "offset": [
        2489,
        2544
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1E7"
    },
    "1187": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        2489,
        2544
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x4AD"
    },
    "1190": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        2489,
        2544
      ],
      "op": "CALLDATASIZE",
      "path": "36"
    },
    "1191": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        2489,
        2544
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x4"
    },
    "1193": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        2489,
        2544
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2732"
    },
    "1196": {
      "fn": "OwnableUpgradeable.owner",
      "jump": "i",
      "offset": [
        2489,
        2544
      ],
      "op": "JUMP",
      "path": "36"
    },
    "1197": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        2489,
        2544
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "1198": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        2489,
        2544
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x99"
    },
    "1200": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        2489,
        2544
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "1202": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        2489,
        2544
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "1203": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        2489,
        2544
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "1205": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        2489,
        2544
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "1206": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        2489,
        2544
      ],
      "op": "DUP2",
      "path": "36"
    },
    "1207": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        2489,
        2544
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "1208": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        2489,
        2544
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "1210": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        2489,
        2544
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "1211": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        2489,
        2544
      ],
      "op": "KECCAK256",
      "path": "36"
    },
    "1212": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        2489,
        2544
      ],
      "op": "SLOAD",
      "path": "36"
    },
    "1213": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        2489,
        2544
      ],
      "op": "DUP2",
      "path": "36"
    },
    "1214": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        2489,
        2544
      ],
      "op": "JUMP",
      "path": "36"
    },
    "1215": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8521,
        10367
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "1216": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8521,
        10367
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1CF"
    },
    "1219": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8521,
        10367
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x4CD"
    },
    "1222": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8521,
        10367
      ],
      "op": "CALLDATASIZE",
      "path": "36"
    },
    "1223": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8521,
        10367
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x4"
    },
    "1225": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8521,
        10367
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2597"
    },
    "1228": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "jump": "i",
      "offset": [
        8521,
        10367
      ],
      "op": "JUMP",
      "path": "36"
    },
    "1229": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8521,
        10367
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "1230": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8521,
        10367
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x116C"
    },
    "1233": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "jump": "i",
      "offset": [
        8521,
        10367
      ],
      "op": "JUMP",
      "path": "36"
    },
    "1234": {
      "fn": "MockMainnetEscrow.togglePriceFeed",
      "offset": [
        13517,
        13618
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "1235": {
      "fn": "MockMainnetEscrow.togglePriceFeed",
      "offset": [
        13517,
        13618
      ],
      "op": "CALLVALUE",
      "path": "36"
    },
    "1236": {
      "fn": "MockMainnetEscrow.togglePriceFeed",
      "offset": [
        13517,
        13618
      ],
      "op": "DUP1",
      "path": "36"
    },
    "1237": {
      "fn": "MockMainnetEscrow.togglePriceFeed",
      "offset": [
        13517,
        13618
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "1238": {
      "fn": "MockMainnetEscrow.togglePriceFeed",
      "offset": [
        13517,
        13618
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x4DE"
    },
    "1241": {
      "fn": "MockMainnetEscrow.togglePriceFeed",
      "offset": [
        13517,
        13618
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "1242": {
      "fn": "MockMainnetEscrow.togglePriceFeed",
      "offset": [
        13517,
        13618
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "1244": {
      "fn": "MockMainnetEscrow.togglePriceFeed",
      "offset": [
        13517,
        13618
      ],
      "op": "DUP1",
      "path": "36"
    },
    "1245": {
      "fn": "MockMainnetEscrow.togglePriceFeed",
      "offset": [
        13517,
        13618
      ],
      "op": "REVERT",
      "path": "36"
    },
    "1246": {
      "fn": "MockMainnetEscrow.togglePriceFeed",
      "offset": [
        13517,
        13618
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "1247": {
      "fn": "MockMainnetEscrow.togglePriceFeed",
      "offset": [
        13517,
        13618
      ],
      "op": "POP",
      "path": "36"
    },
    "1248": {
      "fn": "MockMainnetEscrow.togglePriceFeed",
      "offset": [
        13517,
        13618
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1CF"
    },
    "1251": {
      "fn": "MockMainnetEscrow.togglePriceFeed",
      "offset": [
        13517,
        13618
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1559"
    },
    "1254": {
      "fn": "MockMainnetEscrow.togglePriceFeed",
      "jump": "i",
      "offset": [
        13517,
        13618
      ],
      "op": "JUMP",
      "path": "36"
    },
    "1255": {
      "fn": "MockMainnetEscrow.togglePause",
      "offset": [
        12833,
        12930
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "1256": {
      "fn": "MockMainnetEscrow.togglePause",
      "offset": [
        12833,
        12930
      ],
      "op": "CALLVALUE",
      "path": "36"
    },
    "1257": {
      "fn": "MockMainnetEscrow.togglePause",
      "offset": [
        12833,
        12930
      ],
      "op": "DUP1",
      "path": "36"
    },
    "1258": {
      "fn": "MockMainnetEscrow.togglePause",
      "offset": [
        12833,
        12930
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "1259": {
      "fn": "MockMainnetEscrow.togglePause",
      "offset": [
        12833,
        12930
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x4F3"
    },
    "1262": {
      "fn": "MockMainnetEscrow.togglePause",
      "offset": [
        12833,
        12930
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "1263": {
      "fn": "MockMainnetEscrow.togglePause",
      "offset": [
        12833,
        12930
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "1265": {
      "fn": "MockMainnetEscrow.togglePause",
      "offset": [
        12833,
        12930
      ],
      "op": "DUP1",
      "path": "36"
    },
    "1266": {
      "fn": "MockMainnetEscrow.togglePause",
      "offset": [
        12833,
        12930
      ],
      "op": "REVERT",
      "path": "36"
    },
    "1267": {
      "fn": "MockMainnetEscrow.togglePause",
      "offset": [
        12833,
        12930
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "1268": {
      "fn": "MockMainnetEscrow.togglePause",
      "offset": [
        12833,
        12930
      ],
      "op": "POP",
      "path": "36"
    },
    "1269": {
      "fn": "MockMainnetEscrow.togglePause",
      "offset": [
        12833,
        12930
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1CF"
    },
    "1272": {
      "fn": "MockMainnetEscrow.togglePause",
      "offset": [
        12833,
        12930
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1597"
    },
    "1275": {
      "fn": "MockMainnetEscrow.togglePause",
      "jump": "i",
      "offset": [
        12833,
        12930
      ],
      "op": "JUMP",
      "path": "36"
    },
    "1276": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        16544,
        18537
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "1277": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        16544,
        18537
      ],
      "op": "CALLVALUE",
      "path": "36"
    },
    "1278": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        16544,
        18537
      ],
      "op": "DUP1",
      "path": "36"
    },
    "1279": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        16544,
        18537
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "1280": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        16544,
        18537
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x508"
    },
    "1283": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        16544,
        18537
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "1284": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        16544,
        18537
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "1286": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        16544,
        18537
      ],
      "op": "DUP1",
      "path": "36"
    },
    "1287": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        16544,
        18537
      ],
      "op": "REVERT",
      "path": "36"
    },
    "1288": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        16544,
        18537
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "1289": {
      "op": "POP"
    },
    "1290": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        16544,
        18537
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1E7"
    },
    "1293": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        16544,
        18537
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x517"
    },
    "1296": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        16544,
        18537
      ],
      "op": "CALLDATASIZE",
      "path": "36"
    },
    "1297": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        16544,
        18537
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x4"
    },
    "1299": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        16544,
        18537
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x27AD"
    },
    "1302": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "jump": "i",
      "offset": [
        16544,
        18537
      ],
      "op": "JUMP",
      "path": "36"
    },
    "1303": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        16544,
        18537
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "1304": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        16544,
        18537
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x15B1"
    },
    "1307": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "jump": "i",
      "offset": [
        16544,
        18537
      ],
      "op": "JUMP",
      "path": "36"
    },
    "1308": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2158,
        2356
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1309": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2158,
        2356
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "1310": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2158,
        2356
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1311": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2158,
        2356
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "1312": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2158,
        2356
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x528"
    },
    "1315": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2158,
        2356
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1316": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2158,
        2356
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1318": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2158,
        2356
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1319": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2158,
        2356
      ],
      "op": "REVERT",
      "path": "0"
    },
    "1320": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2158,
        2356
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1321": {
      "op": "POP"
    },
    "1322": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2158,
        2356
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1CF"
    },
    "1325": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2158,
        2356
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x537"
    },
    "1328": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2158,
        2356
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "1329": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2158,
        2356
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "1331": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2158,
        2356
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2732"
    },
    "1334": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "jump": "i",
      "offset": [
        2158,
        2356
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1335": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2158,
        2356
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1336": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2158,
        2356
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1A03"
    },
    "1339": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "jump": "i",
      "offset": [
        2158,
        2356
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1340": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10466,
        11904
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "1341": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10466,
        11904
      ],
      "op": "CALLVALUE",
      "path": "36"
    },
    "1342": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10466,
        11904
      ],
      "op": "DUP1",
      "path": "36"
    },
    "1343": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10466,
        11904
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "1344": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10466,
        11904
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x548"
    },
    "1347": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10466,
        11904
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "1348": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10466,
        11904
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "1350": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10466,
        11904
      ],
      "op": "DUP1",
      "path": "36"
    },
    "1351": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10466,
        11904
      ],
      "op": "REVERT",
      "path": "36"
    },
    "1352": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10466,
        11904
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "1353": {
      "op": "POP"
    },
    "1354": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10466,
        11904
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1CF"
    },
    "1357": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10466,
        11904
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x557"
    },
    "1360": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10466,
        11904
      ],
      "op": "CALLDATASIZE",
      "path": "36"
    },
    "1361": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10466,
        11904
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x4"
    },
    "1363": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10466,
        11904
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x28A1"
    },
    "1366": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "jump": "i",
      "offset": [
        10466,
        11904
      ],
      "op": "JUMP",
      "path": "36"
    },
    "1367": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10466,
        11904
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "1368": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10466,
        11904
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1A9E"
    },
    "1371": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "jump": "i",
      "offset": [
        10466,
        11904
      ],
      "op": "JUMP",
      "path": "36"
    },
    "1372": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        5770,
        7442
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "1373": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1411,
        1418
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x65"
    },
    "1375": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1411,
        1418
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1376": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1411,
        1418
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xFF"
    },
    "1378": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1411,
        1418
      ],
      "op": "AND",
      "path": "2"
    },
    "1379": {
      "offset": [
        1654,
        1663
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "1380": {
      "offset": [
        1646,
        1684
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x588"
    },
    "1383": {
      "offset": [
        1646,
        1684
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1384": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1646,
        1684
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1386": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1646,
        1684
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1387": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1391": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1393": {
      "op": "SHL"
    },
    "1394": {
      "offset": [
        1646,
        1684
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1395": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1646,
        1684
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1396": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1646,
        1684
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "1398": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1646,
        1684
      ],
      "op": "ADD",
      "path": "2"
    },
    "1399": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1646,
        1684
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x57F"
    },
    "1402": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1646,
        1684
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1403": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1646,
        1684
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x29A3"
    },
    "1406": {
      "fn": "PausableUpgradeable.paused",
      "jump": "i",
      "offset": [
        1646,
        1684
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1407": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1646,
        1684
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1408": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1646,
        1684
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1410": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1646,
        1684
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1411": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1646,
        1684
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1412": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1646,
        1684
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1413": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1646,
        1684
      ],
      "op": "SUB",
      "path": "2"
    },
    "1414": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1646,
        1684
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1415": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1646,
        1684
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "2"
    },
    "1416": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1646,
        1684
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1417": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6094
      ],
      "op": "PUSH1",
      "path": "36",
      "statement": 3,
      "value": "0x40"
    },
    "1419": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6094
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "1420": {
      "op": "PUSH4",
      "value": "0x31A9108F"
    },
    "1425": {
      "op": "PUSH1",
      "value": "0xE1"
    },
    "1427": {
      "op": "SHL"
    },
    "1428": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6094
      ],
      "op": "DUP2",
      "path": "36"
    },
    "1429": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6094
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "1430": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1432": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1434": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "1436": {
      "op": "SHL"
    },
    "1437": {
      "op": "SUB"
    },
    "1438": {
      "op": "DUP9"
    },
    "1439": {
      "op": "AND"
    },
    "1440": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6094
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x4"
    },
    "1442": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6094
      ],
      "op": "DUP3",
      "path": "36"
    },
    "1443": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6094
      ],
      "op": "ADD",
      "path": "36"
    },
    "1444": {
      "op": "MSTORE"
    },
    "1445": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1447": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1449": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1451": {
      "op": "SHL"
    },
    "1452": {
      "op": "SUB"
    },
    "1453": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6086
      ],
      "op": "DUP10",
      "path": "36"
    },
    "1454": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6086
      ],
      "op": "AND",
      "path": "36"
    },
    "1455": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6086
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "1456": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6086
      ],
      "op": "PUSH4",
      "path": "36",
      "value": "0x6352211E"
    },
    "1461": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6086
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "1462": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1464": {
      "op": "ADD"
    },
    "1465": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6094
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "1467": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6094
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "1469": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6094
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "1470": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6094
      ],
      "op": "DUP1",
      "path": "36"
    },
    "1471": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6094
      ],
      "op": "DUP4",
      "path": "36"
    },
    "1472": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6094
      ],
      "op": "SUB",
      "path": "36"
    },
    "1473": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6094
      ],
      "op": "DUP2",
      "path": "36"
    },
    "1474": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6094
      ],
      "op": "DUP7",
      "path": "36"
    },
    "1475": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6094
      ],
      "op": "GAS",
      "path": "36"
    },
    "1476": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6094
      ],
      "op": "STATICCALL",
      "path": "36"
    },
    "1477": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6094
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "1478": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6094
      ],
      "op": "DUP1",
      "path": "36"
    },
    "1479": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6094
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "1480": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6094
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x5D5"
    },
    "1483": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6094
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "1484": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6094
      ],
      "op": "RETURNDATASIZE",
      "path": "36"
    },
    "1485": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6094
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "1487": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6094
      ],
      "op": "DUP1",
      "path": "36"
    },
    "1488": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6094
      ],
      "op": "RETURNDATACOPY",
      "path": "36"
    },
    "1489": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6094
      ],
      "op": "RETURNDATASIZE",
      "path": "36"
    },
    "1490": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6094
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "1492": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6094
      ],
      "op": "REVERT",
      "path": "36"
    },
    "1493": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6094
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "1494": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6094
      ],
      "op": "POP",
      "path": "36"
    },
    "1495": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6094
      ],
      "op": "POP",
      "path": "36"
    },
    "1496": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6094
      ],
      "op": "POP",
      "path": "36"
    },
    "1497": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6094
      ],
      "op": "POP",
      "path": "36"
    },
    "1498": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6094
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "1500": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6094
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "1501": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6094
      ],
      "op": "RETURNDATASIZE",
      "path": "36"
    },
    "1502": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6094
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x1F"
    },
    "1504": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6094
      ],
      "op": "NOT",
      "path": "36"
    },
    "1505": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6094
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x1F"
    },
    "1507": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6094
      ],
      "op": "DUP3",
      "path": "36"
    },
    "1508": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6094
      ],
      "op": "ADD",
      "path": "36"
    },
    "1509": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6094
      ],
      "op": "AND",
      "path": "36"
    },
    "1510": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6094
      ],
      "op": "DUP3",
      "path": "36"
    },
    "1511": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6094
      ],
      "op": "ADD",
      "path": "36"
    },
    "1512": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6094
      ],
      "op": "DUP1",
      "path": "36"
    },
    "1513": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6094
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "1515": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6094
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "1516": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6094
      ],
      "op": "POP",
      "path": "36"
    },
    "1517": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6094
      ],
      "op": "DUP2",
      "path": "36"
    },
    "1518": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6094
      ],
      "op": "ADD",
      "path": "36"
    },
    "1519": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6094
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "1520": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6094
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x5F9"
    },
    "1523": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6094
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "1524": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6094
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "1525": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6094
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x29CD"
    },
    "1528": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "jump": "i",
      "offset": [
        6055,
        6094
      ],
      "op": "JUMP",
      "path": "36"
    },
    "1529": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6055,
        6094
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "1530": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1532": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1534": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1536": {
      "op": "SHL"
    },
    "1537": {
      "op": "SUB"
    },
    "1538": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6041,
        6094
      ],
      "op": "AND",
      "path": "36"
    },
    "1539": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6041,
        6051
      ],
      "op": "CALLER",
      "path": "36"
    },
    "1540": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1542": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1544": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1546": {
      "op": "SHL"
    },
    "1547": {
      "op": "SUB"
    },
    "1548": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6041,
        6094
      ],
      "op": "AND",
      "path": "36"
    },
    "1549": {
      "branch": 99,
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6041,
        6094
      ],
      "op": "EQ",
      "path": "36"
    },
    "1550": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6033,
        6122
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x659"
    },
    "1553": {
      "branch": 99,
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6033,
        6122
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "1554": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6033,
        6122
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "1556": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6033,
        6122
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "1557": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1561": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1563": {
      "op": "SHL"
    },
    "1564": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6033,
        6122
      ],
      "op": "DUP2",
      "path": "36"
    },
    "1565": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6033,
        6122
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "1566": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1568": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6033,
        6122
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x4"
    },
    "1570": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6033,
        6122
      ],
      "op": "DUP3",
      "path": "36"
    },
    "1571": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6033,
        6122
      ],
      "op": "ADD",
      "path": "36"
    },
    "1572": {
      "op": "MSTORE"
    },
    "1573": {
      "op": "PUSH1",
      "value": "0x17"
    },
    "1575": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1577": {
      "op": "DUP3"
    },
    "1578": {
      "op": "ADD"
    },
    "1579": {
      "op": "MSTORE"
    },
    "1580": {
      "op": "PUSH32",
      "value": "0x596F7520646F206E6F74206F776E2074686973204E4654000000000000000000"
    },
    "1613": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1615": {
      "op": "DUP3"
    },
    "1616": {
      "op": "ADD"
    },
    "1617": {
      "op": "MSTORE"
    },
    "1618": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1620": {
      "op": "ADD"
    },
    "1621": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6033,
        6122
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x57F"
    },
    "1624": {
      "op": "JUMP"
    },
    "1625": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6033,
        6122
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "1626": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1628": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1630": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1632": {
      "op": "SHL"
    },
    "1633": {
      "op": "SUB"
    },
    "1634": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6140,
        6181
      ],
      "op": "DUP7",
      "path": "36",
      "statement": 4
    },
    "1635": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6140,
        6181
      ],
      "op": "AND",
      "path": "36"
    },
    "1636": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6140,
        6181
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "1638": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6140,
        6181
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "1639": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6140,
        6181
      ],
      "op": "DUP2",
      "path": "36"
    },
    "1640": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6140,
        6181
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "1641": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6140,
        6161
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x97"
    },
    "1643": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6140,
        6181
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "1645": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6140,
        6181
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "1646": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6140,
        6181
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "1648": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6140,
        6181
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "1649": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6140,
        6181
      ],
      "op": "KECCAK256",
      "path": "36"
    },
    "1650": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6140,
        6181
      ],
      "op": "SLOAD",
      "path": "36"
    },
    "1651": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6140,
        6181
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0xFF"
    },
    "1653": {
      "branch": 100,
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6140,
        6181
      ],
      "op": "AND",
      "path": "36"
    },
    "1654": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6132,
        6218
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x6C1"
    },
    "1657": {
      "branch": 100,
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6132,
        6218
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "1658": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6132,
        6218
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "1660": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6132,
        6218
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "1661": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1665": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1667": {
      "op": "SHL"
    },
    "1668": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6132,
        6218
      ],
      "op": "DUP2",
      "path": "36"
    },
    "1669": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6132,
        6218
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "1670": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1672": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6132,
        6218
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x4"
    },
    "1674": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6132,
        6218
      ],
      "op": "DUP3",
      "path": "36"
    },
    "1675": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6132,
        6218
      ],
      "op": "ADD",
      "path": "36"
    },
    "1676": {
      "op": "DUP2"
    },
    "1677": {
      "op": "SWAP1"
    },
    "1678": {
      "op": "MSTORE"
    },
    "1679": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1681": {
      "op": "DUP3"
    },
    "1682": {
      "op": "ADD"
    },
    "1683": {
      "op": "MSTORE"
    },
    "1684": {
      "op": "PUSH32",
      "value": "0x546869732063757272656E6379206973206E6F742077686974656C6973746564"
    },
    "1717": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1719": {
      "op": "DUP3"
    },
    "1720": {
      "op": "ADD"
    },
    "1721": {
      "op": "MSTORE"
    },
    "1722": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1724": {
      "op": "ADD"
    },
    "1725": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6132,
        6218
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x57F"
    },
    "1728": {
      "op": "JUMP"
    },
    "1729": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6132,
        6218
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "1730": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6255,
        6256
      ],
      "op": "PUSH1",
      "path": "36",
      "statement": 5,
      "value": "0x1"
    },
    "1732": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6236,
        6252
      ],
      "op": "DUP5",
      "path": "36"
    },
    "1733": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1735": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1737": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1739": {
      "op": "SHL"
    },
    "1740": {
      "op": "SUB"
    },
    "1741": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6236,
        6256
      ],
      "op": "AND",
      "path": "36"
    },
    "1742": {
      "branch": 101,
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6236,
        6256
      ],
      "op": "GT",
      "path": "36"
    },
    "1743": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6228,
        6297
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x6EA"
    },
    "1746": {
      "branch": 101,
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6228,
        6297
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "1747": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6228,
        6297
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "1749": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6228,
        6297
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "1750": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1754": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1756": {
      "op": "SHL"
    },
    "1757": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6228,
        6297
      ],
      "op": "DUP2",
      "path": "36"
    },
    "1758": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6228,
        6297
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "1759": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6228,
        6297
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x4"
    },
    "1761": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6228,
        6297
      ],
      "op": "ADD",
      "path": "36"
    },
    "1762": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6228,
        6297
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x57F"
    },
    "1765": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6228,
        6297
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "1766": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6228,
        6297
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x29EA"
    },
    "1769": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "jump": "i",
      "offset": [
        6228,
        6297
      ],
      "op": "JUMP",
      "path": "36"
    },
    "1770": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6228,
        6297
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "1771": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6338,
        6354
      ],
      "op": "DUP4",
      "path": "36",
      "statement": 6
    },
    "1772": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1774": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1776": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1778": {
      "op": "SHL"
    },
    "1779": {
      "op": "SUB"
    },
    "1780": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6315,
        6354
      ],
      "op": "AND",
      "path": "36"
    },
    "1781": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6315,
        6334
      ],
      "op": "DUP4",
      "path": "36"
    },
    "1782": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1784": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1786": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1788": {
      "op": "SHL"
    },
    "1789": {
      "op": "SUB"
    },
    "1790": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6315,
        6354
      ],
      "op": "AND",
      "path": "36"
    },
    "1791": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6315,
        6354
      ],
      "op": "GT",
      "path": "36"
    },
    "1792": {
      "branch": 102,
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6315,
        6354
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "1793": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6307,
        6405
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x71C"
    },
    "1796": {
      "branch": 102,
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6307,
        6405
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "1797": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6307,
        6405
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "1799": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6307,
        6405
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "1800": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1804": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1806": {
      "op": "SHL"
    },
    "1807": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6307,
        6405
      ],
      "op": "DUP2",
      "path": "36"
    },
    "1808": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6307,
        6405
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "1809": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6307,
        6405
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x4"
    },
    "1811": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6307,
        6405
      ],
      "op": "ADD",
      "path": "36"
    },
    "1812": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6307,
        6405
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x57F"
    },
    "1815": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6307,
        6405
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "1816": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6307,
        6405
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2A2E"
    },
    "1819": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "jump": "i",
      "offset": [
        6307,
        6405
      ],
      "op": "JUMP",
      "path": "36"
    },
    "1820": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6307,
        6405
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "1821": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6445,
        6450
      ],
      "op": "PUSH2",
      "path": "36",
      "statement": 7,
      "value": "0xA8C0"
    },
    "1824": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6423,
        6441
      ],
      "op": "DUP3",
      "path": "36"
    },
    "1825": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1827": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1829": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1831": {
      "op": "SHL"
    },
    "1832": {
      "op": "SUB"
    },
    "1833": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6423,
        6450
      ],
      "op": "AND",
      "path": "36"
    },
    "1834": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6423,
        6450
      ],
      "op": "LT",
      "path": "36"
    },
    "1835": {
      "branch": 103,
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6423,
        6450
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "1836": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6415,
        6483
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x777"
    },
    "1839": {
      "branch": 103,
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6415,
        6483
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "1840": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6415,
        6483
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "1842": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6415,
        6483
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "1843": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1847": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1849": {
      "op": "SHL"
    },
    "1850": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6415,
        6483
      ],
      "op": "DUP2",
      "path": "36"
    },
    "1851": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6415,
        6483
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "1852": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1854": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6415,
        6483
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x4"
    },
    "1856": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6415,
        6483
      ],
      "op": "DUP3",
      "path": "36"
    },
    "1857": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6415,
        6483
      ],
      "op": "ADD",
      "path": "36"
    },
    "1858": {
      "op": "MSTORE"
    },
    "1859": {
      "op": "PUSH1",
      "value": "0x1C"
    },
    "1861": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1863": {
      "op": "DUP3"
    },
    "1864": {
      "op": "ADD"
    },
    "1865": {
      "op": "MSTORE"
    },
    "1866": {
      "op": "PUSH32",
      "value": "0x4D696E696D756D206475726174696F6E20697320313220686F75727300000000"
    },
    "1899": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1901": {
      "op": "DUP3"
    },
    "1902": {
      "op": "ADD"
    },
    "1903": {
      "op": "MSTORE"
    },
    "1904": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1906": {
      "op": "ADD"
    },
    "1907": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6415,
        6483
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x57F"
    },
    "1910": {
      "op": "JUMP"
    },
    "1911": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6415,
        6483
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "1912": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6579,
        6602
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "1914": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6605,
        6682
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x784"
    },
    "1917": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6625,
        6643
      ],
      "op": "DUP8",
      "path": "36"
    },
    "1918": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6645,
        6660
      ],
      "op": "DUP8",
      "path": "36"
    },
    "1919": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6662,
        6681
      ],
      "op": "DUP7",
      "path": "36"
    },
    "1920": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6605,
        6624
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0xF25"
    },
    "1923": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "jump": "i",
      "offset": [
        6605,
        6682
      ],
      "op": "JUMP",
      "path": "36"
    },
    "1924": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6605,
        6682
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "1925": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6579,
        6682
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "1926": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6579,
        6682
      ],
      "op": "POP",
      "path": "36"
    },
    "1927": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6729,
        6744
      ],
      "op": "DUP1",
      "path": "36",
      "statement": 8
    },
    "1928": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6715,
        6726
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x98"
    },
    "1930": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6715,
        6726
      ],
      "op": "SLOAD",
      "path": "36"
    },
    "1931": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6715,
        6744
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x794"
    },
    "1934": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6715,
        6744
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "1935": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6715,
        6744
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "1936": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6715,
        6744
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2A92"
    },
    "1939": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "jump": "i",
      "offset": [
        6715,
        6744
      ],
      "op": "JUMP",
      "path": "36"
    },
    "1940": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6715,
        6744
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "1941": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6701,
        6710
      ],
      "op": "CALLVALUE",
      "path": "36"
    },
    "1942": {
      "branch": 104,
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6701,
        6745
      ],
      "op": "EQ",
      "path": "36"
    },
    "1943": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6693,
        6769
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x7D8"
    },
    "1946": {
      "branch": 104,
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6693,
        6769
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "1947": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6693,
        6769
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "1949": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6693,
        6769
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "1950": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1954": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1956": {
      "op": "SHL"
    },
    "1957": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6693,
        6769
      ],
      "op": "DUP2",
      "path": "36"
    },
    "1958": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6693,
        6769
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "1959": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1961": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6693,
        6769
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x4"
    },
    "1963": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6693,
        6769
      ],
      "op": "DUP3",
      "path": "36"
    },
    "1964": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6693,
        6769
      ],
      "op": "ADD",
      "path": "36"
    },
    "1965": {
      "op": "MSTORE"
    },
    "1966": {
      "op": "PUSH1",
      "value": "0x13"
    },
    "1968": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1970": {
      "op": "DUP3"
    },
    "1971": {
      "op": "ADD"
    },
    "1972": {
      "op": "MSTORE"
    },
    "1973": {
      "op": "PUSH19",
      "value": "0x125B98DBDC9C9958DD081999595CC81CD95B9D"
    },
    "1993": {
      "op": "PUSH1",
      "value": "0x6A"
    },
    "1995": {
      "op": "SHL"
    },
    "1996": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1998": {
      "op": "DUP3"
    },
    "1999": {
      "op": "ADD"
    },
    "2000": {
      "op": "MSTORE"
    },
    "2001": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2003": {
      "op": "ADD"
    },
    "2004": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6693,
        6769
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x57F"
    },
    "2007": {
      "op": "JUMP"
    },
    "2008": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6693,
        6769
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "2009": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6815,
        6826
      ],
      "op": "PUSH1",
      "path": "36",
      "statement": 9,
      "value": "0x98"
    },
    "2011": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6815,
        6826
      ],
      "op": "SLOAD",
      "path": "36"
    },
    "2012": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6779,
        6811
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "2014": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6779,
        6811
      ],
      "op": "DUP1",
      "path": "36"
    },
    "2015": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6779,
        6811
      ],
      "op": "DUP1",
      "path": "36"
    },
    "2016": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6779,
        6811
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "2017": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6779,
        6799
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x99"
    },
    "2019": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6779,
        6811
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "2021": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6779,
        6811
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "2022": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6779,
        6811
      ],
      "op": "PUSH32",
      "path": "36",
      "value": "0x235D629DC802037DED8C61CB27FB29E40FA01B299719D8F991FFE20BDCC59F4F"
    },
    "2055": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6779,
        6826
      ],
      "op": "DUP1",
      "path": "36"
    },
    "2056": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6779,
        6826
      ],
      "op": "SLOAD",
      "path": "36"
    },
    "2057": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6779,
        6811
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "2058": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6779,
        6811
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "2059": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6779,
        6811
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "2060": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6779,
        6826
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x816"
    },
    "2063": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6779,
        6826
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "2064": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6815,
        6826
      ],
      "op": "DUP5",
      "path": "36"
    },
    "2065": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6815,
        6826
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "2066": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6779,
        6826
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2A92"
    },
    "2069": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "jump": "i",
      "offset": [
        6779,
        6826
      ],
      "op": "JUMP",
      "path": "36"
    },
    "2070": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6779,
        6826
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "2071": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6779,
        6826
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "2072": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6779,
        6826
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "2073": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6779,
        6826
      ],
      "op": "SSTORE",
      "path": "36"
    },
    "2074": {
      "op": "POP"
    },
    "2075": {
      "op": "POP"
    },
    "2076": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6886,
        6957
      ],
      "op": "PUSH1",
      "path": "36",
      "statement": 10,
      "value": "0x40"
    },
    "2078": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6886,
        6957
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "2079": {
      "op": "PUSH4",
      "value": "0x23B872DD"
    },
    "2084": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2086": {
      "op": "SHL"
    },
    "2087": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6886,
        6957
      ],
      "op": "DUP2",
      "path": "36"
    },
    "2088": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6886,
        6957
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "2089": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6923,
        6933
      ],
      "op": "CALLER",
      "path": "36"
    },
    "2090": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6886,
        6957
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x4"
    },
    "2092": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6886,
        6957
      ],
      "op": "DUP3",
      "path": "36"
    },
    "2093": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6886,
        6957
      ],
      "op": "ADD",
      "path": "36"
    },
    "2094": {
      "op": "MSTORE"
    },
    "2095": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6943,
        6947
      ],
      "op": "ADDRESS",
      "path": "36"
    },
    "2096": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2098": {
      "op": "DUP3"
    },
    "2099": {
      "op": "ADD"
    },
    "2100": {
      "op": "MSTORE"
    },
    "2101": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2103": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2105": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2107": {
      "op": "SHL"
    },
    "2108": {
      "op": "SUB"
    },
    "2109": {
      "op": "DUP10"
    },
    "2110": {
      "op": "AND"
    },
    "2111": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2113": {
      "op": "DUP3"
    },
    "2114": {
      "op": "ADD"
    },
    "2115": {
      "op": "MSTORE"
    },
    "2116": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2118": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2120": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2122": {
      "op": "SHL"
    },
    "2123": {
      "op": "SUB"
    },
    "2124": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6886,
        6922
      ],
      "op": "DUP11",
      "path": "36"
    },
    "2125": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6886,
        6922
      ],
      "op": "AND",
      "path": "36"
    },
    "2126": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6886,
        6922
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "2127": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6886,
        6922
      ],
      "op": "PUSH4",
      "path": "36",
      "value": "0x23B872DD"
    },
    "2132": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6886,
        6922
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "2133": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2135": {
      "op": "ADD"
    },
    "2136": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6886,
        6957
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "2138": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6886,
        6957
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "2140": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6886,
        6957
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "2141": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6886,
        6957
      ],
      "op": "DUP1",
      "path": "36"
    },
    "2142": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6886,
        6957
      ],
      "op": "DUP4",
      "path": "36"
    },
    "2143": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6886,
        6957
      ],
      "op": "SUB",
      "path": "36"
    },
    "2144": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6886,
        6957
      ],
      "op": "DUP2",
      "path": "36"
    },
    "2145": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6886,
        6957
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "2147": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6886,
        6957
      ],
      "op": "DUP8",
      "path": "36"
    },
    "2148": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6886,
        6957
      ],
      "op": "DUP1",
      "path": "36"
    },
    "2149": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6886,
        6957
      ],
      "op": "EXTCODESIZE",
      "path": "36"
    },
    "2150": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6886,
        6957
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "2151": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6886,
        6957
      ],
      "op": "DUP1",
      "path": "36"
    },
    "2152": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6886,
        6957
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "2153": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6886,
        6957
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x871"
    },
    "2156": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6886,
        6957
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "2157": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6886,
        6957
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "2159": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6886,
        6957
      ],
      "op": "DUP1",
      "path": "36"
    },
    "2160": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6886,
        6957
      ],
      "op": "REVERT",
      "path": "36"
    },
    "2161": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6886,
        6957
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "2162": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6886,
        6957
      ],
      "op": "POP",
      "path": "36"
    },
    "2163": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6886,
        6957
      ],
      "op": "GAS",
      "path": "36"
    },
    "2164": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6886,
        6957
      ],
      "op": "CALL",
      "path": "36"
    },
    "2165": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6886,
        6957
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "2166": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6886,
        6957
      ],
      "op": "DUP1",
      "path": "36"
    },
    "2167": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6886,
        6957
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "2168": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6886,
        6957
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x885"
    },
    "2171": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6886,
        6957
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "2172": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6886,
        6957
      ],
      "op": "RETURNDATASIZE",
      "path": "36"
    },
    "2173": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6886,
        6957
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "2175": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6886,
        6957
      ],
      "op": "DUP1",
      "path": "36"
    },
    "2176": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6886,
        6957
      ],
      "op": "RETURNDATACOPY",
      "path": "36"
    },
    "2177": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6886,
        6957
      ],
      "op": "RETURNDATASIZE",
      "path": "36"
    },
    "2178": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6886,
        6957
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "2180": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6886,
        6957
      ],
      "op": "REVERT",
      "path": "36"
    },
    "2181": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6886,
        6957
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "2182": {
      "op": "POP"
    },
    "2183": {
      "op": "POP"
    },
    "2184": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7031
      ],
      "op": "PUSH1",
      "path": "36",
      "statement": 11,
      "value": "0x40"
    },
    "2186": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7031
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "2187": {
      "op": "PUSH4",
      "value": "0x31A9108F"
    },
    "2192": {
      "op": "PUSH1",
      "value": "0xE1"
    },
    "2194": {
      "op": "SHL"
    },
    "2195": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7031
      ],
      "op": "DUP2",
      "path": "36"
    },
    "2196": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7031
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "2197": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2199": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2201": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2203": {
      "op": "SHL"
    },
    "2204": {
      "op": "SUB"
    },
    "2205": {
      "op": "DUP12"
    },
    "2206": {
      "op": "AND"
    },
    "2207": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7031
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x4"
    },
    "2209": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7031
      ],
      "op": "DUP3",
      "path": "36"
    },
    "2210": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7031
      ],
      "op": "ADD",
      "path": "36"
    },
    "2211": {
      "op": "MSTORE"
    },
    "2212": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2214": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2216": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2218": {
      "op": "SHL"
    },
    "2219": {
      "op": "SUB"
    },
    "2220": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7023
      ],
      "op": "DUP13",
      "path": "36"
    },
    "2221": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7023
      ],
      "op": "AND",
      "path": "36"
    },
    "2222": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7023
      ],
      "op": "SWAP3",
      "path": "36"
    },
    "2223": {
      "op": "POP"
    },
    "2224": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7023
      ],
      "op": "PUSH4",
      "path": "36",
      "value": "0x6352211E"
    },
    "2229": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7023
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "2230": {
      "op": "POP"
    },
    "2231": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2233": {
      "op": "ADD"
    },
    "2234": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7031
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "2236": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7031
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "2238": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7031
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "2239": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7031
      ],
      "op": "DUP1",
      "path": "36"
    },
    "2240": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7031
      ],
      "op": "DUP4",
      "path": "36"
    },
    "2241": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7031
      ],
      "op": "SUB",
      "path": "36"
    },
    "2242": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7031
      ],
      "op": "DUP2",
      "path": "36"
    },
    "2243": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7031
      ],
      "op": "DUP7",
      "path": "36"
    },
    "2244": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7031
      ],
      "op": "GAS",
      "path": "36"
    },
    "2245": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7031
      ],
      "op": "STATICCALL",
      "path": "36"
    },
    "2246": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7031
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "2247": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7031
      ],
      "op": "DUP1",
      "path": "36"
    },
    "2248": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7031
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "2249": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7031
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x8D6"
    },
    "2252": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7031
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "2253": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7031
      ],
      "op": "RETURNDATASIZE",
      "path": "36"
    },
    "2254": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7031
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "2256": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7031
      ],
      "op": "DUP1",
      "path": "36"
    },
    "2257": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7031
      ],
      "op": "RETURNDATACOPY",
      "path": "36"
    },
    "2258": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7031
      ],
      "op": "RETURNDATASIZE",
      "path": "36"
    },
    "2259": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7031
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "2261": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7031
      ],
      "op": "REVERT",
      "path": "36"
    },
    "2262": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7031
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "2263": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7031
      ],
      "op": "POP",
      "path": "36"
    },
    "2264": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7031
      ],
      "op": "POP",
      "path": "36"
    },
    "2265": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7031
      ],
      "op": "POP",
      "path": "36"
    },
    "2266": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7031
      ],
      "op": "POP",
      "path": "36"
    },
    "2267": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7031
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "2269": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7031
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "2270": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7031
      ],
      "op": "RETURNDATASIZE",
      "path": "36"
    },
    "2271": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7031
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x1F"
    },
    "2273": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7031
      ],
      "op": "NOT",
      "path": "36"
    },
    "2274": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7031
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x1F"
    },
    "2276": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7031
      ],
      "op": "DUP3",
      "path": "36"
    },
    "2277": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7031
      ],
      "op": "ADD",
      "path": "36"
    },
    "2278": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7031
      ],
      "op": "AND",
      "path": "36"
    },
    "2279": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7031
      ],
      "op": "DUP3",
      "path": "36"
    },
    "2280": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7031
      ],
      "op": "ADD",
      "path": "36"
    },
    "2281": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7031
      ],
      "op": "DUP1",
      "path": "36"
    },
    "2282": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7031
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "2284": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7031
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "2285": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7031
      ],
      "op": "POP",
      "path": "36"
    },
    "2286": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7031
      ],
      "op": "DUP2",
      "path": "36"
    },
    "2287": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7031
      ],
      "op": "ADD",
      "path": "36"
    },
    "2288": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7031
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "2289": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7031
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x8FA"
    },
    "2292": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7031
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "2293": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7031
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "2294": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7031
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x29CD"
    },
    "2297": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "jump": "i",
      "offset": [
        6992,
        7031
      ],
      "op": "JUMP",
      "path": "36"
    },
    "2298": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6992,
        7031
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "2299": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2301": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2303": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2305": {
      "op": "SHL"
    },
    "2306": {
      "op": "SUB"
    },
    "2307": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6975,
        7031
      ],
      "op": "AND",
      "path": "36"
    },
    "2308": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6983,
        6987
      ],
      "op": "ADDRESS",
      "path": "36"
    },
    "2309": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2311": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2313": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2315": {
      "op": "SHL"
    },
    "2316": {
      "op": "SUB"
    },
    "2317": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6975,
        7031
      ],
      "op": "AND",
      "path": "36"
    },
    "2318": {
      "branch": 105,
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6975,
        7031
      ],
      "op": "EQ",
      "path": "36"
    },
    "2319": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6967,
        7051
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x94C"
    },
    "2322": {
      "branch": 105,
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6967,
        7051
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "2323": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6967,
        7051
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "2325": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6967,
        7051
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "2326": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2330": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2332": {
      "op": "SHL"
    },
    "2333": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6967,
        7051
      ],
      "op": "DUP2",
      "path": "36"
    },
    "2334": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6967,
        7051
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "2335": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2337": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6967,
        7051
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x4"
    },
    "2339": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6967,
        7051
      ],
      "op": "DUP3",
      "path": "36"
    },
    "2340": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6967,
        7051
      ],
      "op": "ADD",
      "path": "36"
    },
    "2341": {
      "op": "MSTORE"
    },
    "2342": {
      "op": "PUSH1",
      "value": "0xF"
    },
    "2344": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2346": {
      "op": "DUP3"
    },
    "2347": {
      "op": "ADD"
    },
    "2348": {
      "op": "MSTORE"
    },
    "2349": {
      "op": "PUSH15",
      "value": "0x151C985B9CD9995C8819985A5B1959"
    },
    "2365": {
      "op": "PUSH1",
      "value": "0x8A"
    },
    "2367": {
      "op": "SHL"
    },
    "2368": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2370": {
      "op": "DUP3"
    },
    "2371": {
      "op": "ADD"
    },
    "2372": {
      "op": "MSTORE"
    },
    "2373": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2375": {
      "op": "ADD"
    },
    "2376": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6967,
        7051
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x57F"
    },
    "2379": {
      "op": "JUMP"
    },
    "2380": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6967,
        7051
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "2381": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        7067,
        7435
      ],
      "op": "PUSH32",
      "path": "36",
      "statement": 12,
      "value": "0xB26C0BF32D8D3EFF0D0561D0B30F4BF8962A18678833B276FCBBE06C48E9EAAA"
    },
    "2414": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        7094,
        7108
      ],
      "op": "DUP10",
      "path": "36"
    },
    "2415": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        7122,
        7132
      ],
      "op": "CALLER",
      "path": "36"
    },
    "2416": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        7146,
        7163
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "2418": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        7177,
        7183
      ],
      "op": "DUP12",
      "path": "36"
    },
    "2419": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        7198,
        7216
      ],
      "op": "DUP12",
      "path": "36"
    },
    "2420": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        7231,
        7246
      ],
      "op": "DUP12",
      "path": "36"
    },
    "2421": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        7261,
        7277
      ],
      "op": "DUP12",
      "path": "36"
    },
    "2422": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        7292,
        7311
      ],
      "op": "DUP12",
      "path": "36"
    },
    "2423": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        7333,
        7369
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x989"
    },
    "2426": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2428": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2430": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2432": {
      "op": "SHL"
    },
    "2433": {
      "op": "SUB"
    },
    "2434": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        7333,
        7369
      ],
      "op": "DUP14",
      "path": "36"
    },
    "2435": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        7333,
        7369
      ],
      "op": "AND",
      "path": "36"
    },
    "2436": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        7333,
        7348
      ],
      "op": "TIMESTAMP",
      "path": "36"
    },
    "2437": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        7333,
        7369
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2A92"
    },
    "2440": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "jump": "i",
      "offset": [
        7333,
        7369
      ],
      "op": "JUMP",
      "path": "36"
    },
    "2441": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        7333,
        7369
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "2442": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        7385,
        7396
      ],
      "op": "DUP12",
      "path": "36"
    },
    "2443": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        7410,
        7425
      ],
      "op": "DUP12",
      "path": "36"
    },
    "2444": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        7067,
        7435
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "2446": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        7067,
        7435
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "2447": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        7067,
        7435
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x9A2"
    },
    "2450": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        7067,
        7435
      ],
      "op": "SWAP12",
      "path": "36"
    },
    "2451": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        7067,
        7435
      ],
      "op": "SWAP11",
      "path": "36"
    },
    "2452": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        7067,
        7435
      ],
      "op": "SWAP10",
      "path": "36"
    },
    "2453": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        7067,
        7435
      ],
      "op": "SWAP9",
      "path": "36"
    },
    "2454": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        7067,
        7435
      ],
      "op": "SWAP8",
      "path": "36"
    },
    "2455": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        7067,
        7435
      ],
      "op": "SWAP7",
      "path": "36"
    },
    "2456": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        7067,
        7435
      ],
      "op": "SWAP6",
      "path": "36"
    },
    "2457": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        7067,
        7435
      ],
      "op": "SWAP5",
      "path": "36"
    },
    "2458": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        7067,
        7435
      ],
      "op": "SWAP4",
      "path": "36"
    },
    "2459": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        7067,
        7435
      ],
      "op": "SWAP3",
      "path": "36"
    },
    "2460": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        7067,
        7435
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "2461": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        7067,
        7435
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "2462": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        7067,
        7435
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2AAA"
    },
    "2465": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "jump": "i",
      "offset": [
        7067,
        7435
      ],
      "op": "JUMP",
      "path": "36"
    },
    "2466": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        7067,
        7435
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "2467": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        7067,
        7435
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "2469": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        7067,
        7435
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "2470": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        7067,
        7435
      ],
      "op": "DUP1",
      "path": "36"
    },
    "2471": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        7067,
        7435
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "2472": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        7067,
        7435
      ],
      "op": "SUB",
      "path": "36"
    },
    "2473": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        7067,
        7435
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "2474": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        7067,
        7435
      ],
      "op": "LOG1",
      "path": "36"
    },
    "2475": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        6023,
        7442
      ],
      "op": "POP",
      "path": "36"
    },
    "2476": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        5770,
        7442
      ],
      "op": "POP",
      "path": "36"
    },
    "2477": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        5770,
        7442
      ],
      "op": "POP",
      "path": "36"
    },
    "2478": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        5770,
        7442
      ],
      "op": "POP",
      "path": "36"
    },
    "2479": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        5770,
        7442
      ],
      "op": "POP",
      "path": "36"
    },
    "2480": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        5770,
        7442
      ],
      "op": "POP",
      "path": "36"
    },
    "2481": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        5770,
        7442
      ],
      "op": "POP",
      "path": "36"
    },
    "2482": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        5770,
        7442
      ],
      "op": "POP",
      "path": "36"
    },
    "2483": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "offset": [
        5770,
        7442
      ],
      "op": "POP",
      "path": "36"
    },
    "2484": {
      "fn": "MockMainnetEscrow.createERC721Raffle",
      "jump": "o",
      "offset": [
        5770,
        7442
      ],
      "op": "JUMP",
      "path": "36"
    },
    "2485": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15232,
        16145
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "2486": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15369,
        15382
      ],
      "op": "DUP4",
      "path": "36"
    },
    "2487": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15407,
        15429
      ],
      "op": "DUP3",
      "path": "36",
      "statement": 13
    },
    "2488": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15407,
        15429
      ],
      "op": "DUP2",
      "path": "36"
    },
    "2489": {
      "branch": 106,
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15407,
        15429
      ],
      "op": "EQ",
      "path": "36"
    },
    "2490": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15399,
        15460
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0xA05"
    },
    "2493": {
      "branch": 106,
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15399,
        15460
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "2494": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15399,
        15460
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "2496": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15399,
        15460
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "2497": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2501": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2503": {
      "op": "SHL"
    },
    "2504": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15399,
        15460
      ],
      "op": "DUP2",
      "path": "36"
    },
    "2505": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15399,
        15460
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "2506": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2508": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15399,
        15460
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x4"
    },
    "2510": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15399,
        15460
      ],
      "op": "DUP3",
      "path": "36"
    },
    "2511": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15399,
        15460
      ],
      "op": "ADD",
      "path": "36"
    },
    "2512": {
      "op": "MSTORE"
    },
    "2513": {
      "op": "PUSH1",
      "value": "0x1A"
    },
    "2515": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2517": {
      "op": "DUP3"
    },
    "2518": {
      "op": "ADD"
    },
    "2519": {
      "op": "MSTORE"
    },
    "2520": {
      "op": "PUSH32",
      "value": "0x4172726179206C656E6774687320646F206E6F74206D61746368000000000000"
    },
    "2553": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2555": {
      "op": "DUP3"
    },
    "2556": {
      "op": "ADD"
    },
    "2557": {
      "op": "MSTORE"
    },
    "2558": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2560": {
      "op": "ADD"
    },
    "2561": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15399,
        15460
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x57F"
    },
    "2564": {
      "op": "JUMP"
    },
    "2565": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15399,
        15460
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "2566": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15470,
        15484
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "2568": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15494,
        15514
      ],
      "op": "DUP1",
      "path": "36"
    },
    "2569": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15529,
        15538
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "2571": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15524,
        16139
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "2572": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15544,
        15547
      ],
      "op": "DUP4",
      "path": "36"
    },
    "2573": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15540,
        15541
      ],
      "op": "DUP2",
      "path": "36"
    },
    "2574": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15540,
        15547
      ],
      "op": "LT",
      "path": "36"
    },
    "2575": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15524,
        16139
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "2576": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15524,
        16139
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0xB1E"
    },
    "2579": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15524,
        16139
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "2580": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15583,
        15596
      ],
      "op": "DUP9",
      "path": "36",
      "statement": 14
    },
    "2581": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15583,
        15596
      ],
      "op": "DUP9",
      "path": "36"
    },
    "2582": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15597,
        15598
      ],
      "op": "DUP3",
      "path": "36"
    },
    "2583": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15583,
        15599
      ],
      "op": "DUP2",
      "path": "36"
    },
    "2584": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15583,
        15599
      ],
      "op": "DUP2",
      "path": "36"
    },
    "2585": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15583,
        15599
      ],
      "op": "LT",
      "path": "36"
    },
    "2586": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15583,
        15599
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0xA25"
    },
    "2589": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15583,
        15599
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "2590": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15583,
        15599
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0xA25"
    },
    "2593": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15583,
        15599
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2B63"
    },
    "2596": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "jump": "i",
      "offset": [
        15583,
        15599
      ],
      "op": "JUMP",
      "path": "36"
    },
    "2597": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15583,
        15599
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "2598": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15583,
        15599
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "2599": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15583,
        15599
      ],
      "op": "POP",
      "path": "36"
    },
    "2600": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15583,
        15599
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "2602": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15583,
        15599
      ],
      "op": "MUL",
      "path": "36"
    },
    "2603": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15583,
        15599
      ],
      "op": "ADD",
      "path": "36"
    },
    "2604": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15583,
        15599
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "2606": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15583,
        15599
      ],
      "op": "DUP2",
      "path": "36"
    },
    "2607": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15583,
        15599
      ],
      "op": "ADD",
      "path": "36"
    },
    "2608": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15583,
        15599
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "2609": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15583,
        15599
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0xA3A"
    },
    "2612": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15583,
        15599
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "2613": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15583,
        15599
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "2614": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15583,
        15599
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2732"
    },
    "2617": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "jump": "i",
      "offset": [
        15583,
        15599
      ],
      "op": "JUMP",
      "path": "36"
    },
    "2618": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15583,
        15599
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "2619": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15568,
        15599
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "2620": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15568,
        15599
      ],
      "op": "POP",
      "path": "36"
    },
    "2621": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15622,
        15630
      ],
      "op": "DUP7",
      "path": "36",
      "statement": 15
    },
    "2622": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15622,
        15630
      ],
      "op": "DUP7",
      "path": "36"
    },
    "2623": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15631,
        15632
      ],
      "op": "DUP3",
      "path": "36"
    },
    "2624": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15622,
        15633
      ],
      "op": "DUP2",
      "path": "36"
    },
    "2625": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15622,
        15633
      ],
      "op": "DUP2",
      "path": "36"
    },
    "2626": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15622,
        15633
      ],
      "op": "LT",
      "path": "36"
    },
    "2627": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15622,
        15633
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0xA4E"
    },
    "2630": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15622,
        15633
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "2631": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15622,
        15633
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0xA4E"
    },
    "2634": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15622,
        15633
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2B63"
    },
    "2637": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "jump": "i",
      "offset": [
        15622,
        15633
      ],
      "op": "JUMP",
      "path": "36"
    },
    "2638": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15622,
        15633
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "2639": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15622,
        15633
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "2640": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15622,
        15633
      ],
      "op": "POP",
      "path": "36"
    },
    "2641": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15622,
        15633
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "2643": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15622,
        15633
      ],
      "op": "MUL",
      "path": "36"
    },
    "2644": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15622,
        15633
      ],
      "op": "ADD",
      "path": "36"
    },
    "2645": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15622,
        15633
      ],
      "op": "CALLDATALOAD",
      "path": "36"
    },
    "2646": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15613,
        15633
      ],
      "op": "SWAP3",
      "path": "36"
    },
    "2647": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15613,
        15633
      ],
      "op": "POP",
      "path": "36"
    },
    "2648": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15665,
        15685
      ],
      "op": "PUSH1",
      "path": "36",
      "statement": 16,
      "value": "0x99"
    },
    "2650": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15665,
        15699
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "2652": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15686,
        15698
      ],
      "op": "DUP4",
      "path": "36"
    },
    "2653": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2655": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2657": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2659": {
      "op": "SHL"
    },
    "2660": {
      "op": "SUB"
    },
    "2661": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15665,
        15699
      ],
      "op": "AND",
      "path": "36"
    },
    "2662": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2664": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2666": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2668": {
      "op": "SHL"
    },
    "2669": {
      "op": "SUB"
    },
    "2670": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15665,
        15699
      ],
      "op": "AND",
      "path": "36"
    },
    "2671": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15665,
        15699
      ],
      "op": "DUP2",
      "path": "36"
    },
    "2672": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15665,
        15699
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "2673": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15665,
        15699
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "2675": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15665,
        15699
      ],
      "op": "ADD",
      "path": "36"
    },
    "2676": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15665,
        15699
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "2677": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15665,
        15699
      ],
      "op": "DUP2",
      "path": "36"
    },
    "2678": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15665,
        15699
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "2679": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15665,
        15699
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "2681": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15665,
        15699
      ],
      "op": "ADD",
      "path": "36"
    },
    "2682": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15665,
        15699
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "2684": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15665,
        15699
      ],
      "op": "KECCAK256",
      "path": "36"
    },
    "2685": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15665,
        15699
      ],
      "op": "SLOAD",
      "path": "36"
    },
    "2686": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15655,
        15661
      ],
      "op": "DUP4",
      "path": "36"
    },
    "2687": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15655,
        15699
      ],
      "op": "GT",
      "path": "36"
    },
    "2688": {
      "branch": 107,
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15655,
        15699
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "2689": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15647,
        15719
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0xABE"
    },
    "2692": {
      "branch": 107,
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15647,
        15719
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "2693": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15647,
        15719
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "2695": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15647,
        15719
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "2696": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2700": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2702": {
      "op": "SHL"
    },
    "2703": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15647,
        15719
      ],
      "op": "DUP2",
      "path": "36"
    },
    "2704": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15647,
        15719
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "2705": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2707": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15647,
        15719
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x4"
    },
    "2709": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15647,
        15719
      ],
      "op": "DUP3",
      "path": "36"
    },
    "2710": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15647,
        15719
      ],
      "op": "ADD",
      "path": "36"
    },
    "2711": {
      "op": "MSTORE"
    },
    "2712": {
      "op": "PUSH1",
      "value": "0xF"
    },
    "2714": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2716": {
      "op": "DUP3"
    },
    "2717": {
      "op": "ADD"
    },
    "2718": {
      "op": "MSTORE"
    },
    "2719": {
      "op": "PUSH15",
      "value": "0x82DADEEADCE840E8DEDE40D0D2CED"
    },
    "2735": {
      "op": "PUSH1",
      "value": "0x8B"
    },
    "2737": {
      "op": "SHL"
    },
    "2738": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2740": {
      "op": "DUP3"
    },
    "2741": {
      "op": "ADD"
    },
    "2742": {
      "op": "MSTORE"
    },
    "2743": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2745": {
      "op": "ADD"
    },
    "2746": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15647,
        15719
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x57F"
    },
    "2749": {
      "op": "JUMP"
    },
    "2750": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15647,
        15719
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "2751": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2753": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2755": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2757": {
      "op": "SHL"
    },
    "2758": {
      "op": "SUB"
    },
    "2759": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15736,
        15762
      ],
      "op": "DUP3",
      "path": "36"
    },
    "2760": {
      "branch": 108,
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15736,
        15762
      ],
      "op": "AND",
      "path": "36"
    },
    "2761": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15733,
        15937
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0xADB"
    },
    "2764": {
      "branch": 108,
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15733,
        15937
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "2765": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15781,
        15820
      ],
      "op": "PUSH2",
      "path": "36",
      "statement": 17,
      "value": "0xAD6"
    },
    "2768": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15802,
        15811
      ],
      "op": "DUP6",
      "path": "36"
    },
    "2769": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15813,
        15819
      ],
      "op": "DUP5",
      "path": "36"
    },
    "2770": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15781,
        15801
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1EAC"
    },
    "2773": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "jump": "i",
      "offset": [
        15781,
        15820
      ],
      "op": "JUMP",
      "path": "36"
    },
    "2774": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15781,
        15820
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "2775": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15733,
        15937
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0xAEF"
    },
    "2778": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15733,
        15937
      ],
      "op": "JUMP",
      "path": "36"
    },
    "2779": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15733,
        15937
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "2780": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15870,
        15922
      ],
      "op": "PUSH2",
      "path": "36",
      "statement": 18,
      "value": "0xAEF"
    },
    "2783": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2785": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2787": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2789": {
      "op": "SHL"
    },
    "2790": {
      "op": "SUB"
    },
    "2791": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15870,
        15903
      ],
      "op": "DUP4",
      "path": "36"
    },
    "2792": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15870,
        15903
      ],
      "op": "AND",
      "path": "36"
    },
    "2793": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15904,
        15913
      ],
      "op": "DUP7",
      "path": "36"
    },
    "2794": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15915,
        15921
      ],
      "op": "DUP6",
      "path": "36"
    },
    "2795": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15870,
        15903
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1FF0"
    },
    "2798": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "jump": "i",
      "offset": [
        15870,
        15922
      ],
      "op": "JUMP",
      "path": "36"
    },
    "2799": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15870,
        15922
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "2800": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2802": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2804": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2806": {
      "op": "SHL"
    },
    "2807": {
      "op": "SUB"
    },
    "2808": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        16070,
        16104
      ],
      "op": "DUP3",
      "path": "36",
      "statement": 19
    },
    "2809": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        16070,
        16104
      ],
      "op": "AND",
      "path": "36"
    },
    "2810": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        16070,
        16104
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "2812": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        16070,
        16104
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "2813": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        16070,
        16104
      ],
      "op": "DUP2",
      "path": "36"
    },
    "2814": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        16070,
        16104
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "2815": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        16070,
        16090
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x99"
    },
    "2817": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        16070,
        16104
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "2819": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        16070,
        16104
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "2820": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        16070,
        16104
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "2822": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        16070,
        16104
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "2823": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        16070,
        16104
      ],
      "op": "KECCAK256",
      "path": "36"
    },
    "2824": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        16070,
        16114
      ],
      "op": "DUP1",
      "path": "36"
    },
    "2825": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        16070,
        16114
      ],
      "op": "SLOAD",
      "path": "36"
    },
    "2826": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        16070,
        16114
      ],
      "op": "DUP5",
      "path": "36"
    },
    "2827": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        16070,
        16114
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "2828": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        16070,
        16114
      ],
      "op": "SUB",
      "path": "36"
    },
    "2829": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        16070,
        16114
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "2830": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        16070,
        16114
      ],
      "op": "SSTORE",
      "path": "36"
    },
    "2831": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15549,
        15552
      ],
      "op": "PUSH2",
      "path": "36",
      "statement": 20,
      "value": "0xB17"
    },
    "2834": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15549,
        15552
      ],
      "op": "DUP2",
      "path": "36"
    },
    "2835": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15549,
        15552
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2B79"
    },
    "2838": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "jump": "i",
      "offset": [
        15549,
        15552
      ],
      "op": "JUMP",
      "path": "36"
    },
    "2839": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15549,
        15552
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "2840": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15549,
        15552
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "2841": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15549,
        15552
      ],
      "op": "POP",
      "path": "36"
    },
    "2842": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15524,
        16139
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0xA0B"
    },
    "2845": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15524,
        16139
      ],
      "op": "JUMP",
      "path": "36"
    },
    "2846": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15524,
        16139
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "2847": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15524,
        16139
      ],
      "op": "POP",
      "path": "36"
    },
    "2848": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15345,
        16145
      ],
      "op": "POP",
      "path": "36"
    },
    "2849": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15345,
        16145
      ],
      "op": "POP",
      "path": "36"
    },
    "2850": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15345,
        16145
      ],
      "op": "POP",
      "path": "36"
    },
    "2851": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15232,
        16145
      ],
      "op": "POP",
      "path": "36"
    },
    "2852": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15232,
        16145
      ],
      "op": "POP",
      "path": "36"
    },
    "2853": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15232,
        16145
      ],
      "op": "POP",
      "path": "36"
    },
    "2854": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15232,
        16145
      ],
      "op": "POP",
      "path": "36"
    },
    "2855": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "offset": [
        15232,
        16145
      ],
      "op": "POP",
      "path": "36"
    },
    "2856": {
      "fn": "MockMainnetEscrow.withdrawFees",
      "jump": "o",
      "offset": [
        15232,
        16145
      ],
      "op": "JUMP",
      "path": "36"
    },
    "2857": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14092,
        14523
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "2858": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2860": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2862": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2864": {
      "op": "SHL"
    },
    "2865": {
      "op": "SUB"
    },
    "2866": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14217,
        14265
      ],
      "op": "DUP3",
      "path": "36",
      "statement": 21
    },
    "2867": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14217,
        14265
      ],
      "op": "AND",
      "path": "36"
    },
    "2868": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14217,
        14265
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "2870": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14217,
        14265
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "2871": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14217,
        14265
      ],
      "op": "DUP2",
      "path": "36"
    },
    "2872": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14217,
        14265
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "2873": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14217,
        14238
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x97"
    },
    "2875": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14217,
        14265
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "2877": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14217,
        14265
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "2878": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14217,
        14265
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "2880": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14217,
        14265
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "2881": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14217,
        14265
      ],
      "op": "KECCAK256",
      "path": "36"
    },
    "2882": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14217,
        14265
      ],
      "op": "SLOAD",
      "path": "36"
    },
    "2883": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14217,
        14265
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0xFF"
    },
    "2885": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14217,
        14265
      ],
      "op": "AND",
      "path": "36"
    },
    "2886": {
      "branch": 109,
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14216,
        14265
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "2887": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14208,
        14298
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0xB92"
    },
    "2890": {
      "branch": 109,
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14208,
        14298
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "2891": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14208,
        14298
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "2893": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14208,
        14298
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "2894": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2898": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2900": {
      "op": "SHL"
    },
    "2901": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14208,
        14298
      ],
      "op": "DUP2",
      "path": "36"
    },
    "2902": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14208,
        14298
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "2903": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2905": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14208,
        14298
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x4"
    },
    "2907": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14208,
        14298
      ],
      "op": "DUP3",
      "path": "36"
    },
    "2908": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14208,
        14298
      ],
      "op": "ADD",
      "path": "36"
    },
    "2909": {
      "op": "MSTORE"
    },
    "2910": {
      "op": "PUSH1",
      "value": "0x1C"
    },
    "2912": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2914": {
      "op": "DUP3"
    },
    "2915": {
      "op": "ADD"
    },
    "2916": {
      "op": "MSTORE"
    },
    "2917": {
      "op": "PUSH32",
      "value": "0x546F6B656E20697320616C72656164792077686974656C697374656400000000"
    },
    "2950": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2952": {
      "op": "DUP3"
    },
    "2953": {
      "op": "ADD"
    },
    "2954": {
      "op": "MSTORE"
    },
    "2955": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2957": {
      "op": "ADD"
    },
    "2958": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14208,
        14298
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x57F"
    },
    "2961": {
      "op": "JUMP"
    },
    "2962": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14208,
        14298
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "2963": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2965": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2967": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2969": {
      "op": "SHL"
    },
    "2970": {
      "op": "SUB"
    },
    "2971": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14308,
        14356
      ],
      "op": "DUP3",
      "path": "36",
      "statement": 22
    },
    "2972": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14308,
        14356
      ],
      "op": "DUP2",
      "path": "36"
    },
    "2973": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14308,
        14356
      ],
      "op": "AND",
      "path": "36"
    },
    "2974": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14308,
        14356
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "2976": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14308,
        14356
      ],
      "op": "DUP2",
      "path": "36"
    },
    "2977": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14308,
        14356
      ],
      "op": "DUP2",
      "path": "36"
    },
    "2978": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14308,
        14356
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "2979": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14308,
        14329
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x97"
    },
    "2981": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14308,
        14356
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "2983": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14308,
        14356
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "2984": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14308,
        14356
      ],
      "op": "DUP2",
      "path": "36"
    },
    "2985": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14308,
        14356
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "2986": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14308,
        14356
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "2988": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14308,
        14356
      ],
      "op": "DUP1",
      "path": "36"
    },
    "2989": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14308,
        14356
      ],
      "op": "DUP4",
      "path": "36"
    },
    "2990": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14308,
        14356
      ],
      "op": "KECCAK256",
      "path": "36"
    },
    "2991": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14308,
        14363
      ],
      "op": "DUP1",
      "path": "36"
    },
    "2992": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14308,
        14363
      ],
      "op": "SLOAD",
      "path": "36"
    },
    "2993": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14359,
        14363
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x1"
    },
    "2995": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "2997": {
      "op": "NOT"
    },
    "2998": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14308,
        14363
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "2999": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14308,
        14363
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "3000": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14308,
        14363
      ],
      "op": "AND",
      "path": "36"
    },
    "3001": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14308,
        14363
      ],
      "op": "OR",
      "path": "36"
    },
    "3002": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14308,
        14363
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "3003": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14308,
        14363
      ],
      "op": "SSTORE",
      "path": "36"
    },
    "3004": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14373,
        14401
      ],
      "op": "PUSH1",
      "path": "36",
      "statement": 23,
      "value": "0x9C"
    },
    "3006": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14373,
        14428
      ],
      "op": "DUP3",
      "path": "36"
    },
    "3007": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14373,
        14428
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "3008": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14373,
        14428
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "3009": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14373,
        14428
      ],
      "op": "DUP3",
      "path": "36"
    },
    "3010": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14373,
        14428
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "3011": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14373,
        14428
      ],
      "op": "KECCAK256",
      "path": "36"
    },
    "3012": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14373,
        14456
      ],
      "op": "DUP1",
      "path": "36"
    },
    "3013": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14373,
        14456
      ],
      "op": "SLOAD",
      "path": "36"
    },
    "3014": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3016": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3018": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3020": {
      "op": "SHL"
    },
    "3021": {
      "op": "SUB"
    },
    "3022": {
      "op": "NOT"
    },
    "3023": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14373,
        14456
      ],
      "op": "AND",
      "path": "36"
    },
    "3024": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14373,
        14456
      ],
      "op": "SWAP5",
      "path": "36"
    },
    "3025": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14373,
        14456
      ],
      "op": "DUP7",
      "path": "36"
    },
    "3026": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14373,
        14456
      ],
      "op": "AND",
      "path": "36"
    },
    "3027": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14373,
        14456
      ],
      "op": "SWAP5",
      "path": "36"
    },
    "3028": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14373,
        14456
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "3029": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14373,
        14456
      ],
      "op": "SWAP5",
      "path": "36"
    },
    "3030": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14373,
        14456
      ],
      "op": "OR",
      "path": "36"
    },
    "3031": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14373,
        14456
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "3032": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14373,
        14456
      ],
      "op": "SWAP4",
      "path": "36"
    },
    "3033": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14373,
        14456
      ],
      "op": "SSTORE",
      "path": "36"
    },
    "3034": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14471,
        14516
      ],
      "op": "MLOAD",
      "path": "36",
      "statement": 24
    },
    "3035": {
      "op": "SWAP1"
    },
    "3036": {
      "op": "DUP2"
    },
    "3037": {
      "op": "MSTORE"
    },
    "3038": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14471,
        14516
      ],
      "op": "PUSH32",
      "path": "36",
      "value": "0x5C6CF68A9D7E416D0EEE740661627DD794257920F1C63DDAE6C6AF81D02D12EA"
    },
    "3071": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14471,
        14516
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "3072": {
      "op": "ADD"
    },
    "3073": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14471,
        14516
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "3075": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14471,
        14516
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "3076": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14471,
        14516
      ],
      "op": "DUP1",
      "path": "36"
    },
    "3077": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14471,
        14516
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "3078": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14471,
        14516
      ],
      "op": "SUB",
      "path": "36"
    },
    "3079": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14471,
        14516
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "3080": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14471,
        14516
      ],
      "op": "LOG1",
      "path": "36"
    },
    "3081": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14092,
        14523
      ],
      "op": "POP",
      "path": "36"
    },
    "3082": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "offset": [
        14092,
        14523
      ],
      "op": "POP",
      "path": "36"
    },
    "3083": {
      "fn": "MockMainnetEscrow.whitelistCurrency",
      "jump": "o",
      "offset": [
        14092,
        14523
      ],
      "op": "JUMP",
      "path": "36"
    },
    "3084": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4064,
        4629
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "3085": {
      "offset": [
        3111,
        3130
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "3087": {
      "offset": [
        3133,
        3158
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xC18"
    },
    "3090": {
      "offset": [
        3156,
        3157
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "3092": {
      "offset": [
        3133,
        3155
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2053"
    },
    "3095": {
      "jump": "i",
      "offset": [
        3133,
        3158
      ],
      "op": "JUMP",
      "path": "1"
    },
    "3096": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        3133,
        3158
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "3097": {
      "offset": [
        3111,
        3158
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3098": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        3111,
        3158
      ],
      "op": "POP",
      "path": "1"
    },
    "3099": {
      "offset": [
        3172,
        3186
      ],
      "op": "DUP1",
      "path": "1"
    },
    "3100": {
      "offset": [
        3168,
        3233
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "3101": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        3168,
        3233
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xC30"
    },
    "3104": {
      "offset": [
        3168,
        3233
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "3105": {
      "offset": [
        3202,
        3215
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "3107": {
      "offset": [
        3202,
        3222
      ],
      "op": "DUP1",
      "path": "1"
    },
    "3108": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        3202,
        3222
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "3109": {
      "op": "PUSH2",
      "value": "0xFF00"
    },
    "3112": {
      "op": "NOT"
    },
    "3113": {
      "offset": [
        3202,
        3222
      ],
      "op": "AND",
      "path": "1"
    },
    "3114": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        3202,
        3222
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x100"
    },
    "3117": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        3202,
        3222
      ],
      "op": "OR",
      "path": "1"
    },
    "3118": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        3202,
        3222
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3119": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        3202,
        3222
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "3120": {
      "offset": [
        3168,
        3233
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "3121": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4159,
        4175
      ],
      "op": "PUSH2",
      "path": "36",
      "statement": 25,
      "value": "0xC38"
    },
    "3124": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4159,
        4173
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x20E0"
    },
    "3127": {
      "fn": "MockMainnetEscrow.initialize",
      "jump": "i",
      "offset": [
        4159,
        4175
      ],
      "op": "JUMP",
      "path": "36"
    },
    "3128": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4159,
        4175
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "3129": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4185,
        4202
      ],
      "op": "PUSH2",
      "path": "36",
      "statement": 26,
      "value": "0xC40"
    },
    "3132": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4185,
        4200
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x210F"
    },
    "3135": {
      "fn": "MockMainnetEscrow.initialize",
      "jump": "i",
      "offset": [
        4185,
        4202
      ],
      "op": "JUMP",
      "path": "36"
    },
    "3136": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4185,
        4202
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "3137": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4213,
        4220
      ],
      "op": "PUSH1",
      "path": "36",
      "statement": 27,
      "value": "0x9A"
    },
    "3139": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4213,
        4231
      ],
      "op": "DUP1",
      "path": "36"
    },
    "3140": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4213,
        4231
      ],
      "op": "SLOAD",
      "path": "36"
    },
    "3141": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3143": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3145": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3147": {
      "op": "SHL"
    },
    "3148": {
      "op": "SUB"
    },
    "3149": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4213,
        4231
      ],
      "op": "DUP1",
      "path": "36"
    },
    "3150": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4213,
        4231
      ],
      "op": "DUP7",
      "path": "36"
    },
    "3151": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4213,
        4231
      ],
      "op": "AND",
      "path": "36"
    },
    "3152": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3154": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3156": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3158": {
      "op": "SHL"
    },
    "3159": {
      "op": "SUB"
    },
    "3160": {
      "op": "NOT"
    },
    "3161": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4213,
        4231
      ],
      "op": "SWAP3",
      "path": "36"
    },
    "3162": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4213,
        4231
      ],
      "op": "DUP4",
      "path": "36"
    },
    "3163": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4213,
        4231
      ],
      "op": "AND",
      "path": "36"
    },
    "3164": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4213,
        4231
      ],
      "op": "OR",
      "path": "36"
    },
    "3165": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4213,
        4231
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "3166": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4213,
        4231
      ],
      "op": "SWAP3",
      "path": "36"
    },
    "3167": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4213,
        4231
      ],
      "op": "SSTORE",
      "path": "36"
    },
    "3168": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4241,
        4258
      ],
      "op": "PUSH1",
      "path": "36",
      "statement": 28,
      "value": "0x9B"
    },
    "3170": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4241,
        4299
      ],
      "op": "DUP1",
      "path": "36"
    },
    "3171": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4241,
        4299
      ],
      "op": "SLOAD",
      "path": "36"
    },
    "3172": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4241,
        4299
      ],
      "op": "SWAP3",
      "path": "36"
    },
    "3173": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4241,
        4299
      ],
      "op": "DUP6",
      "path": "36"
    },
    "3174": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4241,
        4299
      ],
      "op": "AND",
      "path": "36"
    },
    "3175": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4241,
        4299
      ],
      "op": "SWAP3",
      "path": "36"
    },
    "3176": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4241,
        4299
      ],
      "op": "DUP3",
      "path": "36"
    },
    "3177": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4241,
        4299
      ],
      "op": "AND",
      "path": "36"
    },
    "3178": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4241,
        4299
      ],
      "op": "SWAP3",
      "path": "36"
    },
    "3179": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4241,
        4299
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "3180": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4241,
        4299
      ],
      "op": "SWAP3",
      "path": "36"
    },
    "3181": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4241,
        4299
      ],
      "op": "OR",
      "path": "36"
    },
    "3182": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4241,
        4299
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "3183": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4241,
        4299
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "3184": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4241,
        4299
      ],
      "op": "SSTORE",
      "path": "36"
    },
    "3185": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4309,
        4326
      ],
      "op": "PUSH1",
      "path": "36",
      "statement": 29,
      "value": "0x9D"
    },
    "3187": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4309,
        4333
      ],
      "op": "DUP1",
      "path": "36"
    },
    "3188": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4309,
        4333
      ],
      "op": "SLOAD",
      "path": "36"
    },
    "3189": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "3191": {
      "op": "NOT"
    },
    "3192": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4309,
        4333
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "3193": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4309,
        4333
      ],
      "op": "DUP2",
      "path": "36"
    },
    "3194": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4309,
        4333
      ],
      "op": "AND",
      "path": "36"
    },
    "3195": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4213,
        4231
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x1"
    },
    "3197": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4309,
        4333
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "3198": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4309,
        4333
      ],
      "op": "DUP2",
      "path": "36"
    },
    "3199": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4309,
        4333
      ],
      "op": "OR",
      "path": "36"
    },
    "3200": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4309,
        4333
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "3201": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4309,
        4333
      ],
      "op": "SWAP3",
      "path": "36"
    },
    "3202": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4309,
        4333
      ],
      "op": "SSTORE",
      "path": "36"
    },
    "3203": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4400,
        4442
      ],
      "op": "PUSH20",
      "path": "36",
      "statement": 30,
      "value": "0x7CEB23FD6BC0ADD59E62AC25578270CFF1B9F619"
    },
    "3224": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4213,
        4220
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "3226": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4378,
        4443
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "3227": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4378,
        4443
      ],
      "op": "PUSH32",
      "path": "36",
      "value": "0x1A0ACAC70E8CAB5A31AC0C028653F1612AEC657B1C8333C74EABA0C30E0EE391"
    },
    "3260": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4378,
        4450
      ],
      "op": "DUP1",
      "path": "36"
    },
    "3261": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4378,
        4450
      ],
      "op": "SLOAD",
      "path": "36"
    },
    "3262": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4378,
        4450
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "3263": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4378,
        4450
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "3264": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4378,
        4450
      ],
      "op": "AND",
      "path": "36"
    },
    "3265": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4378,
        4450
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "3266": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4378,
        4450
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "3267": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4378,
        4450
      ],
      "op": "OR",
      "path": "36"
    },
    "3268": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4378,
        4450
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "3269": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4378,
        4450
      ],
      "op": "SSTORE",
      "path": "36"
    },
    "3270": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4500,
        4528
      ],
      "op": "PUSH1",
      "path": "36",
      "statement": 31,
      "value": "0x9C"
    },
    "3272": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4378,
        4443
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "3274": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4500,
        4572
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "3275": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4500,
        4572
      ],
      "op": "PUSH32",
      "path": "36",
      "value": "0x54CB885AAE8EFE3410AF7107761EDCAE51EE12661F9443184B5E9D063DDF7FA5"
    },
    "3308": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4500,
        4588
      ],
      "op": "DUP1",
      "path": "36"
    },
    "3309": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4500,
        4588
      ],
      "op": "SLOAD",
      "path": "36"
    },
    "3310": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4500,
        4588
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "3311": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4500,
        4588
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "3312": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4500,
        4588
      ],
      "op": "AND",
      "path": "36"
    },
    "3313": {
      "offset": [
        2101,
        2143
      ],
      "op": "PUSH20",
      "path": "36",
      "value": "0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2"
    },
    "3334": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4500,
        4588
      ],
      "op": "OR",
      "path": "36"
    },
    "3335": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4500,
        4588
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "3336": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4500,
        4588
      ],
      "op": "SSTORE",
      "path": "36"
    },
    "3337": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4612,
        4622
      ],
      "op": "PUSH7",
      "path": "36",
      "statement": 32,
      "value": "0x6A94D74F430000"
    },
    "3345": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4598,
        4609
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x98"
    },
    "3347": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4598,
        4622
      ],
      "op": "SSTORE",
      "path": "36"
    },
    "3348": {
      "offset": [
        3253,
        3352
      ],
      "op": "DUP1",
      "path": "1"
    },
    "3349": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        3253,
        3352
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "3350": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        3253,
        3352
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xD59"
    },
    "3353": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        3253,
        3352
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "3354": {
      "offset": [
        3303,
        3308
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "3356": {
      "offset": [
        3287,
        3308
      ],
      "op": "DUP1",
      "path": "1"
    },
    "3357": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        3287,
        3308
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "3358": {
      "op": "PUSH2",
      "value": "0xFF00"
    },
    "3361": {
      "op": "NOT"
    },
    "3362": {
      "offset": [
        3287,
        3308
      ],
      "op": "AND",
      "path": "1"
    },
    "3363": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        3287,
        3308
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3364": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        3287,
        3308
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "3365": {
      "offset": [
        3327,
        3341
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "3367": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        3327,
        3341
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "3368": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3370": {
      "op": "DUP2"
    },
    "3371": {
      "op": "MSTORE"
    },
    "3372": {
      "offset": [
        3327,
        3341
      ],
      "op": "PUSH32",
      "path": "1",
      "value": "0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498"
    },
    "3405": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        3327,
        3341
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3406": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3408": {
      "op": "ADD"
    },
    "3409": {
      "offset": [
        3327,
        3341
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "3411": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        3327,
        3341
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "3412": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        3327,
        3341
      ],
      "op": "DUP1",
      "path": "1"
    },
    "3413": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        3327,
        3341
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "3414": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        3327,
        3341
      ],
      "op": "SUB",
      "path": "1"
    },
    "3415": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        3327,
        3341
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3416": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        3327,
        3341
      ],
      "op": "LOG1",
      "path": "1"
    },
    "3417": {
      "offset": [
        3253,
        3352
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "3418": {
      "offset": [
        3101,
        3358
      ],
      "op": "POP",
      "path": "1"
    },
    "3419": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4064,
        4629
      ],
      "op": "POP",
      "path": "36"
    },
    "3420": {
      "fn": "MockMainnetEscrow.initialize",
      "offset": [
        4064,
        4629
      ],
      "op": "POP",
      "path": "36"
    },
    "3421": {
      "fn": "MockMainnetEscrow.initialize",
      "jump": "o",
      "offset": [
        4064,
        4629
      ],
      "op": "JUMP",
      "path": "36"
    },
    "3422": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14648,
        14949
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "3423": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3425": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3427": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3429": {
      "op": "SHL"
    },
    "3430": {
      "op": "SUB"
    },
    "3431": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14737,
        14785
      ],
      "op": "DUP2",
      "path": "36",
      "statement": 33
    },
    "3432": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14737,
        14785
      ],
      "op": "AND",
      "path": "36"
    },
    "3433": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14737,
        14785
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "3435": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14737,
        14785
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "3436": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14737,
        14785
      ],
      "op": "DUP2",
      "path": "36"
    },
    "3437": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14737,
        14785
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "3438": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14737,
        14758
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x97"
    },
    "3440": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14737,
        14785
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "3442": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14737,
        14785
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "3443": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14737,
        14785
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "3445": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14737,
        14785
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "3446": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14737,
        14785
      ],
      "op": "KECCAK256",
      "path": "36"
    },
    "3447": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14737,
        14785
      ],
      "op": "SLOAD",
      "path": "36"
    },
    "3448": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14737,
        14785
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0xFF"
    },
    "3450": {
      "branch": 110,
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14737,
        14785
      ],
      "op": "AND",
      "path": "36"
    },
    "3451": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14729,
        14814
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0xDC6"
    },
    "3454": {
      "branch": 110,
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14729,
        14814
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "3455": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14729,
        14814
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "3457": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14729,
        14814
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "3458": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3462": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3464": {
      "op": "SHL"
    },
    "3465": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14729,
        14814
      ],
      "op": "DUP2",
      "path": "36"
    },
    "3466": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14729,
        14814
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "3467": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3469": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14729,
        14814
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x4"
    },
    "3471": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14729,
        14814
      ],
      "op": "DUP3",
      "path": "36"
    },
    "3472": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14729,
        14814
      ],
      "op": "ADD",
      "path": "36"
    },
    "3473": {
      "op": "MSTORE"
    },
    "3474": {
      "op": "PUSH1",
      "value": "0x18"
    },
    "3476": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3478": {
      "op": "DUP3"
    },
    "3479": {
      "op": "ADD"
    },
    "3480": {
      "op": "MSTORE"
    },
    "3481": {
      "op": "PUSH32",
      "value": "0x546F6B656E206973206E6F742077686974656C69737465640000000000000000"
    },
    "3514": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "3516": {
      "op": "DUP3"
    },
    "3517": {
      "op": "ADD"
    },
    "3518": {
      "op": "MSTORE"
    },
    "3519": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "3521": {
      "op": "ADD"
    },
    "3522": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14729,
        14814
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x57F"
    },
    "3525": {
      "op": "JUMP"
    },
    "3526": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14729,
        14814
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "3527": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3529": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3531": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3533": {
      "op": "SHL"
    },
    "3534": {
      "op": "SUB"
    },
    "3535": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14824,
        14872
      ],
      "op": "DUP2",
      "path": "36",
      "statement": 34
    },
    "3536": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14824,
        14872
      ],
      "op": "AND",
      "path": "36"
    },
    "3537": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14875,
        14880
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "3539": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14824,
        14872
      ],
      "op": "DUP2",
      "path": "36"
    },
    "3540": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14824,
        14872
      ],
      "op": "DUP2",
      "path": "36"
    },
    "3541": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14824,
        14872
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "3542": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14824,
        14845
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x97"
    },
    "3544": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14824,
        14872
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "3546": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14824,
        14872
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "3547": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14824,
        14872
      ],
      "op": "DUP2",
      "path": "36"
    },
    "3548": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14824,
        14872
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "3549": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14824,
        14872
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "3551": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14824,
        14872
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "3552": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14824,
        14872
      ],
      "op": "DUP3",
      "path": "36"
    },
    "3553": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14824,
        14872
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "3554": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14824,
        14872
      ],
      "op": "KECCAK256",
      "path": "36"
    },
    "3555": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14824,
        14880
      ],
      "op": "DUP1",
      "path": "36"
    },
    "3556": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14824,
        14880
      ],
      "op": "SLOAD",
      "path": "36"
    },
    "3557": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "3559": {
      "op": "NOT"
    },
    "3560": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14824,
        14880
      ],
      "op": "AND",
      "path": "36"
    },
    "3561": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14824,
        14880
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "3562": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14824,
        14880
      ],
      "op": "SSTORE",
      "path": "36"
    },
    "3563": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14895,
        14942
      ],
      "op": "SWAP1",
      "path": "36",
      "statement": 35
    },
    "3564": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14895,
        14942
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "3565": {
      "op": "SWAP2"
    },
    "3566": {
      "op": "DUP3"
    },
    "3567": {
      "op": "MSTORE"
    },
    "3568": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14895,
        14942
      ],
      "op": "PUSH32",
      "path": "36",
      "value": "0xDC0548BC90523A9E943EA77D199875FDC1E4F8A419B6D53A595B5E6671480E5"
    },
    "3601": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14895,
        14942
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "3602": {
      "op": "ADD"
    },
    "3603": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14895,
        14942
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "3605": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14895,
        14942
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "3606": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14895,
        14942
      ],
      "op": "DUP1",
      "path": "36"
    },
    "3607": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14895,
        14942
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "3608": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14895,
        14942
      ],
      "op": "SUB",
      "path": "36"
    },
    "3609": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14895,
        14942
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "3610": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14895,
        14942
      ],
      "op": "LOG1",
      "path": "36"
    },
    "3611": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "offset": [
        14648,
        14949
      ],
      "op": "POP",
      "path": "36"
    },
    "3612": {
      "fn": "MockMainnetEscrow.blacklistCurrency",
      "jump": "o",
      "offset": [
        14648,
        14949
      ],
      "op": "JUMP",
      "path": "36"
    },
    "3613": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        13002,
        13132
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "3614": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        13079,
        13086
      ],
      "op": "PUSH1",
      "path": "36",
      "statement": 36,
      "value": "0x9A"
    },
    "3616": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        13079,
        13086
      ],
      "op": "SLOAD",
      "path": "36"
    },
    "3617": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        13064,
        13097
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "3619": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        13064,
        13097
      ],
      "op": "DUP1",
      "path": "36"
    },
    "3620": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        13064,
        13097
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "3621": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3623": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3625": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3627": {
      "op": "SHL"
    },
    "3628": {
      "op": "SUB"
    },
    "3629": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        13079,
        13086
      ],
      "op": "SWAP3",
      "path": "36"
    },
    "3630": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        13079,
        13086
      ],
      "op": "DUP4",
      "path": "36"
    },
    "3631": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        13079,
        13086
      ],
      "op": "AND",
      "path": "36"
    },
    "3632": {
      "op": "DUP2"
    },
    "3633": {
      "op": "MSTORE"
    },
    "3634": {
      "op": "SWAP2"
    },
    "3635": {
      "op": "DUP4"
    },
    "3636": {
      "op": "AND"
    },
    "3637": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3639": {
      "op": "DUP4"
    },
    "3640": {
      "op": "ADD"
    },
    "3641": {
      "op": "MSTORE"
    },
    "3642": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        13064,
        13097
      ],
      "op": "PUSH32",
      "path": "36",
      "value": "0x605CA4E43489FB38B91AA63DD9147CD3847957694B080B9285EC898B34269F0C"
    },
    "3675": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        13064,
        13097
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "3676": {
      "op": "ADD"
    },
    "3677": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        13064,
        13097
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "3679": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        13064,
        13097
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "3680": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        13064,
        13097
      ],
      "op": "DUP1",
      "path": "36"
    },
    "3681": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        13064,
        13097
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "3682": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        13064,
        13097
      ],
      "op": "SUB",
      "path": "36"
    },
    "3683": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        13064,
        13097
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "3684": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        13064,
        13097
      ],
      "op": "LOG1",
      "path": "36"
    },
    "3685": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        13107,
        13114
      ],
      "op": "PUSH1",
      "path": "36",
      "statement": 37,
      "value": "0x9A"
    },
    "3687": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        13107,
        13125
      ],
      "op": "DUP1",
      "path": "36"
    },
    "3688": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        13107,
        13125
      ],
      "op": "SLOAD",
      "path": "36"
    },
    "3689": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3691": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3693": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3695": {
      "op": "SHL"
    },
    "3696": {
      "op": "SUB"
    },
    "3697": {
      "op": "NOT"
    },
    "3698": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        13107,
        13125
      ],
      "op": "AND",
      "path": "36"
    },
    "3699": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3701": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3703": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3705": {
      "op": "SHL"
    },
    "3706": {
      "op": "SUB"
    },
    "3707": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        13107,
        13125
      ],
      "op": "SWAP3",
      "path": "36"
    },
    "3708": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        13107,
        13125
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "3709": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        13107,
        13125
      ],
      "op": "SWAP3",
      "path": "36"
    },
    "3710": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        13107,
        13125
      ],
      "op": "AND",
      "path": "36"
    },
    "3711": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        13107,
        13125
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "3712": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        13107,
        13125
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "3713": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        13107,
        13125
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "3714": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        13107,
        13125
      ],
      "op": "OR",
      "path": "36"
    },
    "3715": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        13107,
        13125
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "3716": {
      "fn": "MockMainnetEscrow.setRelayer",
      "offset": [
        13107,
        13125
      ],
      "op": "SSTORE",
      "path": "36"
    },
    "3717": {
      "fn": "MockMainnetEscrow.setRelayer",
      "jump": "o",
      "offset": [
        13002,
        13132
      ],
      "op": "JUMP",
      "path": "36"
    },
    "3718": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1908,
        2009
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3719": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        1348,
        1354
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x33"
    },
    "3721": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        1348,
        1354
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3722": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3724": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3726": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3728": {
      "op": "SHL"
    },
    "3729": {
      "op": "SUB"
    },
    "3730": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        1348,
        1354
      ],
      "op": "AND",
      "path": "0"
    },
    "3731": {
      "fn": "ContextUpgradeable._msgSender",
      "offset": [
        929,
        939
      ],
      "op": "CALLER",
      "path": "5",
      "statement": 38
    },
    "3732": {
      "offset": [
        1488,
        1511
      ],
      "op": "EQ",
      "path": "0"
    },
    "3733": {
      "offset": [
        1480,
        1548
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xEB0"
    },
    "3736": {
      "offset": [
        1480,
        1548
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3737": {
      "fn": "ContextUpgradeable._msgSender",
      "offset": [
        1480,
        1548
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3739": {
      "fn": "ContextUpgradeable._msgSender",
      "offset": [
        1480,
        1548
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3740": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3744": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3746": {
      "op": "SHL"
    },
    "3747": {
      "offset": [
        1480,
        1548
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3748": {
      "fn": "ContextUpgradeable._msgSender",
      "offset": [
        1480,
        1548
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3749": {
      "fn": "ContextUpgradeable._msgSender",
      "offset": [
        1480,
        1548
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "3751": {
      "fn": "ContextUpgradeable._msgSender",
      "offset": [
        1480,
        1548
      ],
      "op": "ADD",
      "path": "0"
    },
    "3752": {
      "fn": "ContextUpgradeable._msgSender",
      "offset": [
        1480,
        1548
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x57F"
    },
    "3755": {
      "fn": "ContextUpgradeable._msgSender",
      "offset": [
        1480,
        1548
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3756": {
      "fn": "ContextUpgradeable._msgSender",
      "offset": [
        1480,
        1548
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2B92"
    },
    "3759": {
      "fn": "ContextUpgradeable._msgSender",
      "jump": "i",
      "offset": [
        1480,
        1548
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3760": {
      "fn": "ContextUpgradeable._msgSender",
      "offset": [
        1480,
        1548
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3761": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1972,
        2002
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 39,
      "value": "0xEBA"
    },
    "3764": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1999,
        2000
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3766": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1972,
        1990
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x213E"
    },
    "3769": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "jump": "i",
      "offset": [
        1972,
        2002
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3770": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1972,
        2002
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3771": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "jump": "o",
      "offset": [
        1908,
        2009
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3772": {
      "fn": "MockMainnetEscrow.setPriceFeed",
      "offset": [
        13215,
        13428
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "3773": {
      "fn": "MockMainnetEscrow.setPriceFeed",
      "offset": [
        13314,
        13331
      ],
      "op": "PUSH1",
      "path": "36",
      "statement": 40,
      "value": "0x9B"
    },
    "3775": {
      "fn": "MockMainnetEscrow.setPriceFeed",
      "offset": [
        13314,
        13331
      ],
      "op": "SLOAD",
      "path": "36"
    },
    "3776": {
      "fn": "MockMainnetEscrow.setPriceFeed",
      "offset": [
        13289,
        13353
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "3778": {
      "fn": "MockMainnetEscrow.setPriceFeed",
      "offset": [
        13289,
        13353
      ],
      "op": "DUP1",
      "path": "36"
    },
    "3779": {
      "fn": "MockMainnetEscrow.setPriceFeed",
      "offset": [
        13289,
        13353
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "3780": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3782": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3784": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3786": {
      "op": "SHL"
    },
    "3787": {
      "op": "SUB"
    },
    "3788": {
      "fn": "MockMainnetEscrow.setPriceFeed",
      "offset": [
        13314,
        13331
      ],
      "op": "SWAP3",
      "path": "36"
    },
    "3789": {
      "fn": "MockMainnetEscrow.setPriceFeed",
      "offset": [
        13314,
        13331
      ],
      "op": "DUP4",
      "path": "36"
    },
    "3790": {
      "fn": "MockMainnetEscrow.setPriceFeed",
      "offset": [
        13314,
        13331
      ],
      "op": "AND",
      "path": "36"
    },
    "3791": {
      "op": "DUP2"
    },
    "3792": {
      "op": "MSTORE"
    },
    "3793": {
      "op": "SWAP2"
    },
    "3794": {
      "op": "DUP4"
    },
    "3795": {
      "op": "AND"
    },
    "3796": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3798": {
      "op": "DUP4"
    },
    "3799": {
      "op": "ADD"
    },
    "3800": {
      "op": "MSTORE"
    },
    "3801": {
      "fn": "MockMainnetEscrow.setPriceFeed",
      "offset": [
        13289,
        13353
      ],
      "op": "PUSH32",
      "path": "36",
      "value": "0xA8ABE0398416476DB5B05737CD4DA3B3CBDE5012D978A6A6C3FD49D321753536"
    },
    "3834": {
      "fn": "MockMainnetEscrow.setPriceFeed",
      "offset": [
        13289,
        13353
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "3835": {
      "op": "ADD"
    },
    "3836": {
      "fn": "MockMainnetEscrow.setPriceFeed",
      "offset": [
        13289,
        13353
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "3838": {
      "fn": "MockMainnetEscrow.setPriceFeed",
      "offset": [
        13289,
        13353
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "3839": {
      "fn": "MockMainnetEscrow.setPriceFeed",
      "offset": [
        13289,
        13353
      ],
      "op": "DUP1",
      "path": "36"
    },
    "3840": {
      "fn": "MockMainnetEscrow.setPriceFeed",
      "offset": [
        13289,
        13353
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "3841": {
      "fn": "MockMainnetEscrow.setPriceFeed",
      "offset": [
        13289,
        13353
      ],
      "op": "SUB",
      "path": "36"
    },
    "3842": {
      "fn": "MockMainnetEscrow.setPriceFeed",
      "offset": [
        13289,
        13353
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "3843": {
      "fn": "MockMainnetEscrow.setPriceFeed",
      "offset": [
        13289,
        13353
      ],
      "op": "LOG1",
      "path": "36"
    },
    "3844": {
      "fn": "MockMainnetEscrow.setPriceFeed",
      "offset": [
        13363,
        13380
      ],
      "op": "PUSH1",
      "path": "36",
      "statement": 41,
      "value": "0x9B"
    },
    "3846": {
      "fn": "MockMainnetEscrow.setPriceFeed",
      "offset": [
        13363,
        13421
      ],
      "op": "DUP1",
      "path": "36"
    },
    "3847": {
      "fn": "MockMainnetEscrow.setPriceFeed",
      "offset": [
        13363,
        13421
      ],
      "op": "SLOAD",
      "path": "36"
    },
    "3848": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3850": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3852": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3854": {
      "op": "SHL"
    },
    "3855": {
      "op": "SUB"
    },
    "3856": {
      "op": "NOT"
    },
    "3857": {
      "fn": "MockMainnetEscrow.setPriceFeed",
      "offset": [
        13363,
        13421
      ],
      "op": "AND",
      "path": "36"
    },
    "3858": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3860": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3862": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3864": {
      "op": "SHL"
    },
    "3865": {
      "op": "SUB"
    },
    "3866": {
      "fn": "MockMainnetEscrow.setPriceFeed",
      "offset": [
        13363,
        13421
      ],
      "op": "SWAP3",
      "path": "36"
    },
    "3867": {
      "fn": "MockMainnetEscrow.setPriceFeed",
      "offset": [
        13363,
        13421
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "3868": {
      "fn": "MockMainnetEscrow.setPriceFeed",
      "offset": [
        13363,
        13421
      ],
      "op": "SWAP3",
      "path": "36"
    },
    "3869": {
      "fn": "MockMainnetEscrow.setPriceFeed",
      "offset": [
        13363,
        13421
      ],
      "op": "AND",
      "path": "36"
    },
    "3870": {
      "fn": "MockMainnetEscrow.setPriceFeed",
      "offset": [
        13363,
        13421
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "3871": {
      "fn": "MockMainnetEscrow.setPriceFeed",
      "offset": [
        13363,
        13421
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "3872": {
      "fn": "MockMainnetEscrow.setPriceFeed",
      "offset": [
        13363,
        13421
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "3873": {
      "fn": "MockMainnetEscrow.setPriceFeed",
      "offset": [
        13363,
        13421
      ],
      "op": "OR",
      "path": "36"
    },
    "3874": {
      "fn": "MockMainnetEscrow.setPriceFeed",
      "offset": [
        13363,
        13421
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "3875": {
      "fn": "MockMainnetEscrow.setPriceFeed",
      "offset": [
        13363,
        13421
      ],
      "op": "SSTORE",
      "path": "36"
    },
    "3876": {
      "fn": "MockMainnetEscrow.setPriceFeed",
      "jump": "o",
      "offset": [
        13215,
        13428
      ],
      "op": "JUMP",
      "path": "36"
    },
    "3877": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18543,
        19267
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "3878": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3880": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3882": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3884": {
      "op": "SHL"
    },
    "3885": {
      "op": "SUB"
    },
    "3886": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18885,
        18933
      ],
      "op": "DUP1",
      "path": "36"
    },
    "3887": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18885,
        18933
      ],
      "op": "DUP5",
      "path": "36"
    },
    "3888": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18885,
        18933
      ],
      "op": "AND",
      "path": "36"
    },
    "3889": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18673,
        18680
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "3891": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18885,
        18933
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "3892": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18885,
        18933
      ],
      "op": "DUP2",
      "path": "36"
    },
    "3893": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18885,
        18933
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "3894": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18885,
        18913
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x9C"
    },
    "3896": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18885,
        18933
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "3898": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18885,
        18933
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "3899": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18885,
        18933
      ],
      "op": "DUP2",
      "path": "36"
    },
    "3900": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18885,
        18933
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "3901": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18885,
        18933
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "3903": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18885,
        18933
      ],
      "op": "DUP1",
      "path": "36"
    },
    "3904": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18885,
        18933
      ],
      "op": "DUP4",
      "path": "36"
    },
    "3905": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18885,
        18933
      ],
      "op": "KECCAK256",
      "path": "36"
    },
    "3906": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18885,
        18933
      ],
      "op": "SLOAD",
      "path": "36"
    },
    "3907": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18945
      ],
      "op": "DUP2",
      "path": "36"
    },
    "3908": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18945
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "3909": {
      "op": "PUSH4",
      "value": "0x313CE567"
    },
    "3914": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3916": {
      "op": "SHL"
    },
    "3917": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18945
      ],
      "op": "DUP2",
      "path": "36"
    },
    "3918": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18945
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "3919": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18945
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "3920": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18945
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "3921": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18673,
        18680
      ],
      "op": "SWAP4",
      "path": "36"
    },
    "3922": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18673,
        18680
      ],
      "op": "SWAP5",
      "path": "36"
    },
    "3923": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18673,
        18680
      ],
      "op": "DUP6",
      "path": "36"
    },
    "3924": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18673,
        18680
      ],
      "op": "SWAP5",
      "path": "36"
    },
    "3925": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18885,
        18933
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "3926": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18885,
        18933
      ],
      "op": "AND",
      "path": "36"
    },
    "3927": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18885,
        18933
      ],
      "op": "SWAP3",
      "path": "36"
    },
    "3928": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18943
      ],
      "op": "PUSH4",
      "path": "36",
      "value": "0x313CE567"
    },
    "3933": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18943
      ],
      "op": "SWAP3",
      "path": "36"
    },
    "3934": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18945
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x4"
    },
    "3936": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18945
      ],
      "op": "DUP1",
      "path": "36"
    },
    "3937": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18945
      ],
      "op": "DUP3",
      "path": "36"
    },
    "3938": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18945
      ],
      "op": "ADD",
      "path": "36"
    },
    "3939": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18945
      ],
      "op": "SWAP4",
      "path": "36"
    },
    "3940": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18945
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "3941": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18945
      ],
      "op": "DUP3",
      "path": "36"
    },
    "3942": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18945
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "3943": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18945
      ],
      "op": "SUB",
      "path": "36"
    },
    "3944": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18945
      ],
      "op": "ADD",
      "path": "36"
    },
    "3945": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18945
      ],
      "op": "DUP2",
      "path": "36"
    },
    "3946": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18885,
        18933
      ],
      "op": "DUP7",
      "path": "36"
    },
    "3947": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18945
      ],
      "op": "GAS",
      "path": "36"
    },
    "3948": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18945
      ],
      "op": "STATICCALL",
      "path": "36"
    },
    "3949": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18945
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "3950": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18945
      ],
      "op": "DUP1",
      "path": "36"
    },
    "3951": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18945
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "3952": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18945
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0xF7D"
    },
    "3955": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18945
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "3956": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18945
      ],
      "op": "RETURNDATASIZE",
      "path": "36"
    },
    "3957": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18945
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "3959": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18945
      ],
      "op": "DUP1",
      "path": "36"
    },
    "3960": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18945
      ],
      "op": "RETURNDATACOPY",
      "path": "36"
    },
    "3961": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18945
      ],
      "op": "RETURNDATASIZE",
      "path": "36"
    },
    "3962": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18945
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "3964": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18945
      ],
      "op": "REVERT",
      "path": "36"
    },
    "3965": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18945
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "3966": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18945
      ],
      "op": "POP",
      "path": "36"
    },
    "3967": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18945
      ],
      "op": "POP",
      "path": "36"
    },
    "3968": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18945
      ],
      "op": "POP",
      "path": "36"
    },
    "3969": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18945
      ],
      "op": "POP",
      "path": "36"
    },
    "3970": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18945
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "3972": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18945
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "3973": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18945
      ],
      "op": "RETURNDATASIZE",
      "path": "36"
    },
    "3974": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18945
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x1F"
    },
    "3976": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18945
      ],
      "op": "NOT",
      "path": "36"
    },
    "3977": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18945
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x1F"
    },
    "3979": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18945
      ],
      "op": "DUP3",
      "path": "36"
    },
    "3980": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18945
      ],
      "op": "ADD",
      "path": "36"
    },
    "3981": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18945
      ],
      "op": "AND",
      "path": "36"
    },
    "3982": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18945
      ],
      "op": "DUP3",
      "path": "36"
    },
    "3983": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18945
      ],
      "op": "ADD",
      "path": "36"
    },
    "3984": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18945
      ],
      "op": "DUP1",
      "path": "36"
    },
    "3985": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18945
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "3987": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18945
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "3988": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18945
      ],
      "op": "POP",
      "path": "36"
    },
    "3989": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18945
      ],
      "op": "DUP2",
      "path": "36"
    },
    "3990": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18945
      ],
      "op": "ADD",
      "path": "36"
    },
    "3991": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18945
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "3992": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18945
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0xFA1"
    },
    "3995": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18945
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "3996": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18945
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "3997": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18945
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2BC7"
    },
    "4000": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "jump": "i",
      "offset": [
        18870,
        18945
      ],
      "op": "JUMP",
      "path": "36"
    },
    "4001": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18870,
        18945
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "4002": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18864,
        18945
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0xFAC"
    },
    "4005": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18864,
        18945
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "4006": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18864,
        18866
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0xA"
    },
    "4008": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18864,
        18945
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2CD0"
    },
    "4011": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "jump": "i",
      "offset": [
        18864,
        18945
      ],
      "op": "JUMP",
      "path": "36"
    },
    "4012": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18864,
        18945
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "4013": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18750
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x9B"
    },
    "4015": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18750
      ],
      "op": "SLOAD",
      "path": "36"
    },
    "4016": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4018": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4020": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4022": {
      "op": "SHL"
    },
    "4023": {
      "op": "SUB"
    },
    "4024": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18770,
        18818
      ],
      "op": "DUP8",
      "path": "36"
    },
    "4025": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18770,
        18818
      ],
      "op": "DUP2",
      "path": "36"
    },
    "4026": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18770,
        18818
      ],
      "op": "AND",
      "path": "36"
    },
    "4027": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18750
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "4029": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18770,
        18818
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "4030": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18770,
        18818
      ],
      "op": "DUP2",
      "path": "36"
    },
    "4031": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18770,
        18818
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "4032": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18770,
        18798
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x9C"
    },
    "4034": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18770,
        18818
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "4036": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18770,
        18818
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "4037": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18770,
        18818
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "4039": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18770,
        18818
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "4040": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18770,
        18818
      ],
      "op": "DUP2",
      "path": "36"
    },
    "4041": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18770,
        18818
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "4042": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18770,
        18818
      ],
      "op": "KECCAK256",
      "path": "36"
    },
    "4043": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18770,
        18818
      ],
      "op": "SLOAD",
      "path": "36"
    },
    "4044": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18819
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "4045": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18819
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "4046": {
      "op": "PUSH4",
      "value": "0xA4B943FB"
    },
    "4051": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "4053": {
      "op": "SHL"
    },
    "4054": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18819
      ],
      "op": "DUP2",
      "path": "36"
    },
    "4055": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18819
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "4056": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18770,
        18818
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "4057": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18770,
        18818
      ],
      "op": "DUP3",
      "path": "36"
    },
    "4058": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18770,
        18818
      ],
      "op": "AND",
      "path": "36"
    },
    "4059": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18819
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x4"
    },
    "4061": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18819
      ],
      "op": "DUP3",
      "path": "36"
    },
    "4062": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18819
      ],
      "op": "ADD",
      "path": "36"
    },
    "4063": {
      "op": "MSTORE"
    },
    "4064": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4066": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4068": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4070": {
      "op": "SHL"
    },
    "4071": {
      "op": "SUB"
    },
    "4072": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18859
      ],
      "op": "DUP8",
      "path": "36"
    },
    "4073": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18859
      ],
      "op": "AND",
      "path": "36"
    },
    "4074": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18859
      ],
      "op": "SWAP3",
      "path": "36"
    },
    "4075": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4077": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4079": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "4081": {
      "op": "SHL"
    },
    "4082": {
      "op": "SUB"
    },
    "4083": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18837
      ],
      "op": "DUP10",
      "path": "36"
    },
    "4084": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18837
      ],
      "op": "AND",
      "path": "36"
    },
    "4085": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18837
      ],
      "op": "SWAP3",
      "path": "36"
    },
    "4086": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18750
      ],
      "op": "AND",
      "path": "36"
    },
    "4087": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18750
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "4088": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18769
      ],
      "op": "PUSH4",
      "path": "36",
      "value": "0xA4B943FB"
    },
    "4093": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18769
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "4094": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4096": {
      "op": "ADD"
    },
    "4097": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18819
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "4099": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18819
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "4101": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18819
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "4102": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18819
      ],
      "op": "DUP1",
      "path": "36"
    },
    "4103": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18819
      ],
      "op": "DUP4",
      "path": "36"
    },
    "4104": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18819
      ],
      "op": "SUB",
      "path": "36"
    },
    "4105": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18819
      ],
      "op": "DUP2",
      "path": "36"
    },
    "4106": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18819
      ],
      "op": "DUP7",
      "path": "36"
    },
    "4107": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18819
      ],
      "op": "GAS",
      "path": "36"
    },
    "4108": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18819
      ],
      "op": "STATICCALL",
      "path": "36"
    },
    "4109": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18819
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "4110": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18819
      ],
      "op": "DUP1",
      "path": "36"
    },
    "4111": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18819
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "4112": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18819
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x101D"
    },
    "4115": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18819
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "4116": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18819
      ],
      "op": "RETURNDATASIZE",
      "path": "36"
    },
    "4117": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18819
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "4119": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18819
      ],
      "op": "DUP1",
      "path": "36"
    },
    "4120": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18819
      ],
      "op": "RETURNDATACOPY",
      "path": "36"
    },
    "4121": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18819
      ],
      "op": "RETURNDATASIZE",
      "path": "36"
    },
    "4122": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18819
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "4124": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18819
      ],
      "op": "REVERT",
      "path": "36"
    },
    "4125": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18819
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "4126": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18819
      ],
      "op": "POP",
      "path": "36"
    },
    "4127": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18819
      ],
      "op": "POP",
      "path": "36"
    },
    "4128": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18819
      ],
      "op": "POP",
      "path": "36"
    },
    "4129": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18819
      ],
      "op": "POP",
      "path": "36"
    },
    "4130": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18819
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "4132": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18819
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "4133": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18819
      ],
      "op": "RETURNDATASIZE",
      "path": "36"
    },
    "4134": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18819
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x1F"
    },
    "4136": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18819
      ],
      "op": "NOT",
      "path": "36"
    },
    "4137": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18819
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x1F"
    },
    "4139": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18819
      ],
      "op": "DUP3",
      "path": "36"
    },
    "4140": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18819
      ],
      "op": "ADD",
      "path": "36"
    },
    "4141": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18819
      ],
      "op": "AND",
      "path": "36"
    },
    "4142": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18819
      ],
      "op": "DUP3",
      "path": "36"
    },
    "4143": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18819
      ],
      "op": "ADD",
      "path": "36"
    },
    "4144": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18819
      ],
      "op": "DUP1",
      "path": "36"
    },
    "4145": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18819
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "4147": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18819
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "4148": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18819
      ],
      "op": "POP",
      "path": "36"
    },
    "4149": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18819
      ],
      "op": "DUP2",
      "path": "36"
    },
    "4150": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18819
      ],
      "op": "ADD",
      "path": "36"
    },
    "4151": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18819
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "4152": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18819
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1041"
    },
    "4155": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18819
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "4156": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18819
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "4157": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18819
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2CDF"
    },
    "4160": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "jump": "i",
      "offset": [
        18733,
        18819
      ],
      "op": "JUMP",
      "path": "36"
    },
    "4161": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18819
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "4162": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18837
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x104B"
    },
    "4165": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18837
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "4166": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18837
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "4167": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18837
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2CF8"
    },
    "4170": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "jump": "i",
      "offset": [
        18733,
        18837
      ],
      "op": "JUMP",
      "path": "36"
    },
    "4171": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18837
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "4172": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18859
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1055"
    },
    "4175": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18859
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "4176": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18859
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "4177": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18859
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2CF8"
    },
    "4180": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "jump": "i",
      "offset": [
        18733,
        18859
      ],
      "op": "JUMP",
      "path": "36"
    },
    "4181": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18733,
        18859
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "4182": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18732,
        18946
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x105F"
    },
    "4185": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18732,
        18946
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "4186": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18732,
        18946
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "4187": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18732,
        18946
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2D2D"
    },
    "4190": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "jump": "i",
      "offset": [
        18732,
        18946
      ],
      "op": "JUMP",
      "path": "36"
    },
    "4191": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18732,
        18946
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "4192": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18692,
        18946
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "4193": {
      "op": "POP"
    },
    "4194": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18956,
        18986
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "4196": {
      "offset": [
        2350,
        2355
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2710"
    },
    "4199": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18990,
        19047
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1072"
    },
    "4202": {
      "offset": [
        2287,
        2290
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1F4"
    },
    "4205": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18692,
        18946
      ],
      "op": "DUP5",
      "path": "36"
    },
    "4206": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18990,
        19047
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2CF8"
    },
    "4209": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "jump": "i",
      "offset": [
        18990,
        19047
      ],
      "op": "JUMP",
      "path": "36"
    },
    "4210": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18990,
        19047
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "4211": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18989,
        19078
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x107C"
    },
    "4214": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18989,
        19078
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "4215": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18989,
        19078
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "4216": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18989,
        19078
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2D2D"
    },
    "4219": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "jump": "i",
      "offset": [
        18989,
        19078
      ],
      "op": "JUMP",
      "path": "36"
    },
    "4220": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18989,
        19078
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "4221": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19165
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x9B"
    },
    "4223": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19165
      ],
      "op": "SLOAD",
      "path": "36"
    },
    "4224": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19228
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "4226": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19228
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "4227": {
      "op": "PUSH4",
      "value": "0xA4B943FB"
    },
    "4232": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "4234": {
      "op": "SHL"
    },
    "4235": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19228
      ],
      "op": "DUP2",
      "path": "36"
    },
    "4236": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19228
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "4237": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19185,
        19227
      ],
      "op": "PUSH20",
      "path": "36",
      "value": "0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE"
    },
    "4258": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19228
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x4"
    },
    "4260": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19228
      ],
      "op": "DUP3",
      "path": "36"
    },
    "4261": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19228
      ],
      "op": "ADD",
      "path": "36"
    },
    "4262": {
      "op": "MSTORE"
    },
    "4263": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18956,
        19078
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "4264": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18956,
        19078
      ],
      "op": "SWAP3",
      "path": "36"
    },
    "4265": {
      "op": "POP"
    },
    "4266": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19088,
        19111
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "4268": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19088,
        19111
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "4269": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4271": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4273": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4275": {
      "op": "SHL"
    },
    "4276": {
      "op": "SUB"
    },
    "4277": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19165
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "4278": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19165
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "4279": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19165
      ],
      "op": "AND",
      "path": "36"
    },
    "4280": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19165
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "4281": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19184
      ],
      "op": "PUSH4",
      "path": "36",
      "value": "0xA4B943FB"
    },
    "4286": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19184
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "4287": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4289": {
      "op": "ADD"
    },
    "4290": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19228
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "4292": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19228
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "4294": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19228
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "4295": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19228
      ],
      "op": "DUP1",
      "path": "36"
    },
    "4296": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19228
      ],
      "op": "DUP4",
      "path": "36"
    },
    "4297": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19228
      ],
      "op": "SUB",
      "path": "36"
    },
    "4298": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19228
      ],
      "op": "DUP2",
      "path": "36"
    },
    "4299": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19228
      ],
      "op": "DUP7",
      "path": "36"
    },
    "4300": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19228
      ],
      "op": "GAS",
      "path": "36"
    },
    "4301": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19228
      ],
      "op": "STATICCALL",
      "path": "36"
    },
    "4302": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19228
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "4303": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19228
      ],
      "op": "DUP1",
      "path": "36"
    },
    "4304": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19228
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "4305": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19228
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x10DE"
    },
    "4308": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19228
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "4309": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19228
      ],
      "op": "RETURNDATASIZE",
      "path": "36"
    },
    "4310": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19228
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "4312": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19228
      ],
      "op": "DUP1",
      "path": "36"
    },
    "4313": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19228
      ],
      "op": "RETURNDATACOPY",
      "path": "36"
    },
    "4314": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19228
      ],
      "op": "RETURNDATASIZE",
      "path": "36"
    },
    "4315": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19228
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "4317": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19228
      ],
      "op": "REVERT",
      "path": "36"
    },
    "4318": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19228
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "4319": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19228
      ],
      "op": "POP",
      "path": "36"
    },
    "4320": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19228
      ],
      "op": "POP",
      "path": "36"
    },
    "4321": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19228
      ],
      "op": "POP",
      "path": "36"
    },
    "4322": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19228
      ],
      "op": "POP",
      "path": "36"
    },
    "4323": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19228
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "4325": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19228
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "4326": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19228
      ],
      "op": "RETURNDATASIZE",
      "path": "36"
    },
    "4327": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19228
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x1F"
    },
    "4329": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19228
      ],
      "op": "NOT",
      "path": "36"
    },
    "4330": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19228
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x1F"
    },
    "4332": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19228
      ],
      "op": "DUP3",
      "path": "36"
    },
    "4333": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19228
      ],
      "op": "ADD",
      "path": "36"
    },
    "4334": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19228
      ],
      "op": "AND",
      "path": "36"
    },
    "4335": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19228
      ],
      "op": "DUP3",
      "path": "36"
    },
    "4336": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19228
      ],
      "op": "ADD",
      "path": "36"
    },
    "4337": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19228
      ],
      "op": "DUP1",
      "path": "36"
    },
    "4338": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19228
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "4340": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19228
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "4341": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19228
      ],
      "op": "POP",
      "path": "36"
    },
    "4342": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19228
      ],
      "op": "DUP2",
      "path": "36"
    },
    "4343": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19228
      ],
      "op": "ADD",
      "path": "36"
    },
    "4344": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19228
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "4345": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19228
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1102"
    },
    "4348": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19228
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "4349": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19228
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "4350": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19228
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2CDF"
    },
    "4353": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "jump": "i",
      "offset": [
        19148,
        19228
      ],
      "op": "JUMP",
      "path": "36"
    },
    "4354": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19148,
        19228
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "4355": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19115,
        19144
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1114"
    },
    "4358": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19115,
        19137
      ],
      "op": "DUP4",
      "path": "36"
    },
    "4359": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19140,
        19144
      ],
      "op": "PUSH8",
      "path": "36",
      "value": "0xDE0B6B3A7640000"
    },
    "4368": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19115,
        19144
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2CF8"
    },
    "4371": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "jump": "i",
      "offset": [
        19115,
        19144
      ],
      "op": "JUMP",
      "path": "36"
    },
    "4372": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19115,
        19144
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "4373": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19114,
        19228
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x111E"
    },
    "4376": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19114,
        19228
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "4377": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19114,
        19228
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "4378": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19114,
        19228
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2D2D"
    },
    "4381": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "jump": "i",
      "offset": [
        19114,
        19228
      ],
      "op": "JUMP",
      "path": "36"
    },
    "4382": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19114,
        19228
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "4383": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        19088,
        19228
      ],
      "op": "SWAP4",
      "path": "36"
    },
    "4384": {
      "op": "POP"
    },
    "4385": {
      "op": "POP"
    },
    "4386": {
      "op": "POP"
    },
    "4387": {
      "op": "POP"
    },
    "4388": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18543,
        19267
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "4389": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18543,
        19267
      ],
      "op": "SWAP4",
      "path": "36"
    },
    "4390": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18543,
        19267
      ],
      "op": "SWAP3",
      "path": "36"
    },
    "4391": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18543,
        19267
      ],
      "op": "POP",
      "path": "36"
    },
    "4392": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18543,
        19267
      ],
      "op": "POP",
      "path": "36"
    },
    "4393": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "offset": [
        18543,
        19267
      ],
      "op": "POP",
      "path": "36"
    },
    "4394": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC721",
      "jump": "o",
      "offset": [
        18543,
        19267
      ],
      "op": "JUMP",
      "path": "36"
    },
    "4395": {
      "fn": "MockMainnetEscrow.setOpeningFee",
      "offset": [
        13686,
        13839
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "4396": {
      "fn": "MockMainnetEscrow.setOpeningFee",
      "offset": [
        13772,
        13783
      ],
      "op": "PUSH1",
      "path": "36",
      "statement": 42,
      "value": "0x98"
    },
    "4398": {
      "fn": "MockMainnetEscrow.setOpeningFee",
      "offset": [
        13772,
        13783
      ],
      "op": "SLOAD",
      "path": "36"
    },
    "4399": {
      "fn": "MockMainnetEscrow.setOpeningFee",
      "offset": [
        13754,
        13797
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "4401": {
      "fn": "MockMainnetEscrow.setOpeningFee",
      "offset": [
        13754,
        13797
      ],
      "op": "DUP1",
      "path": "36"
    },
    "4402": {
      "fn": "MockMainnetEscrow.setOpeningFee",
      "offset": [
        13754,
        13797
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "4403": {
      "op": "SWAP2"
    },
    "4404": {
      "op": "DUP3"
    },
    "4405": {
      "op": "MSTORE"
    },
    "4406": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4408": {
      "op": "DUP3"
    },
    "4409": {
      "op": "ADD"
    },
    "4410": {
      "op": "DUP4"
    },
    "4411": {
      "op": "SWAP1"
    },
    "4412": {
      "op": "MSTORE"
    },
    "4413": {
      "fn": "MockMainnetEscrow.setOpeningFee",
      "offset": [
        13754,
        13797
      ],
      "op": "PUSH32",
      "path": "36",
      "value": "0x9DC2340C6769757C8D7DFE3A65A3F1E297ED8F919BED31501223AC8AA85DC63D"
    },
    "4446": {
      "fn": "MockMainnetEscrow.setOpeningFee",
      "offset": [
        13754,
        13797
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "4447": {
      "op": "ADD"
    },
    "4448": {
      "fn": "MockMainnetEscrow.setOpeningFee",
      "offset": [
        13754,
        13797
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "4450": {
      "fn": "MockMainnetEscrow.setOpeningFee",
      "offset": [
        13754,
        13797
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "4451": {
      "fn": "MockMainnetEscrow.setOpeningFee",
      "offset": [
        13754,
        13797
      ],
      "op": "DUP1",
      "path": "36"
    },
    "4452": {
      "fn": "MockMainnetEscrow.setOpeningFee",
      "offset": [
        13754,
        13797
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "4453": {
      "fn": "MockMainnetEscrow.setOpeningFee",
      "offset": [
        13754,
        13797
      ],
      "op": "SUB",
      "path": "36"
    },
    "4454": {
      "fn": "MockMainnetEscrow.setOpeningFee",
      "offset": [
        13754,
        13797
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "4455": {
      "fn": "MockMainnetEscrow.setOpeningFee",
      "offset": [
        13754,
        13797
      ],
      "op": "LOG1",
      "path": "36"
    },
    "4456": {
      "fn": "MockMainnetEscrow.setOpeningFee",
      "offset": [
        13807,
        13818
      ],
      "op": "PUSH1",
      "path": "36",
      "statement": 43,
      "value": "0x98"
    },
    "4458": {
      "fn": "MockMainnetEscrow.setOpeningFee",
      "offset": [
        13807,
        13832
      ],
      "op": "SSTORE",
      "path": "36"
    },
    "4459": {
      "fn": "MockMainnetEscrow.setOpeningFee",
      "jump": "o",
      "offset": [
        13686,
        13839
      ],
      "op": "JUMP",
      "path": "36"
    },
    "4460": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8521,
        10367
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "4461": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1411,
        1418
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x65"
    },
    "4463": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1411,
        1418
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "4464": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1411,
        1418
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xFF"
    },
    "4466": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1411,
        1418
      ],
      "op": "AND",
      "path": "2"
    },
    "4467": {
      "offset": [
        1654,
        1663
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "4468": {
      "offset": [
        1646,
        1684
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x118F"
    },
    "4471": {
      "offset": [
        1646,
        1684
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "4472": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1646,
        1684
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "4474": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1646,
        1684
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "4475": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "4479": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "4481": {
      "op": "SHL"
    },
    "4482": {
      "offset": [
        1646,
        1684
      ],
      "op": "DUP2",
      "path": "2"
    },
    "4483": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1646,
        1684
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "4484": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1646,
        1684
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "4486": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1646,
        1684
      ],
      "op": "ADD",
      "path": "2"
    },
    "4487": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1646,
        1684
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x57F"
    },
    "4490": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1646,
        1684
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "4491": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1646,
        1684
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x29A3"
    },
    "4494": {
      "fn": "PausableUpgradeable.paused",
      "jump": "i",
      "offset": [
        1646,
        1684
      ],
      "op": "JUMP",
      "path": "2"
    },
    "4495": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1646,
        1684
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "4496": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4498": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4500": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4502": {
      "op": "SHL"
    },
    "4503": {
      "op": "SUB"
    },
    "4504": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8791,
        8832
      ],
      "op": "DUP7",
      "path": "36",
      "statement": 44
    },
    "4505": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8791,
        8832
      ],
      "op": "AND",
      "path": "36"
    },
    "4506": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8791,
        8832
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "4508": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8791,
        8832
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "4509": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8791,
        8832
      ],
      "op": "DUP2",
      "path": "36"
    },
    "4510": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8791,
        8832
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "4511": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8791,
        8812
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x97"
    },
    "4513": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8791,
        8832
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "4515": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8791,
        8832
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "4516": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8791,
        8832
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "4518": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8791,
        8832
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "4519": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8791,
        8832
      ],
      "op": "KECCAK256",
      "path": "36"
    },
    "4520": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8791,
        8832
      ],
      "op": "SLOAD",
      "path": "36"
    },
    "4521": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8791,
        8832
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0xFF"
    },
    "4523": {
      "branch": 111,
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8791,
        8832
      ],
      "op": "AND",
      "path": "36"
    },
    "4524": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8783,
        8869
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x11F7"
    },
    "4527": {
      "branch": 111,
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8783,
        8869
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "4528": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8783,
        8869
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "4530": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8783,
        8869
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "4531": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "4535": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "4537": {
      "op": "SHL"
    },
    "4538": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8783,
        8869
      ],
      "op": "DUP2",
      "path": "36"
    },
    "4539": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8783,
        8869
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "4540": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4542": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8783,
        8869
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x4"
    },
    "4544": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8783,
        8869
      ],
      "op": "DUP3",
      "path": "36"
    },
    "4545": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8783,
        8869
      ],
      "op": "ADD",
      "path": "36"
    },
    "4546": {
      "op": "DUP2"
    },
    "4547": {
      "op": "SWAP1"
    },
    "4548": {
      "op": "MSTORE"
    },
    "4549": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4551": {
      "op": "DUP3"
    },
    "4552": {
      "op": "ADD"
    },
    "4553": {
      "op": "MSTORE"
    },
    "4554": {
      "op": "PUSH32",
      "value": "0x546869732063757272656E6379206973206E6F742077686974656C6973746564"
    },
    "4587": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "4589": {
      "op": "DUP3"
    },
    "4590": {
      "op": "ADD"
    },
    "4591": {
      "op": "MSTORE"
    },
    "4592": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "4594": {
      "op": "ADD"
    },
    "4595": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8783,
        8869
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x57F"
    },
    "4598": {
      "op": "JUMP"
    },
    "4599": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8783,
        8869
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "4600": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8906,
        8907
      ],
      "op": "PUSH1",
      "path": "36",
      "statement": 45,
      "value": "0x1"
    },
    "4602": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8887,
        8903
      ],
      "op": "DUP5",
      "path": "36"
    },
    "4603": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4605": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4607": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4609": {
      "op": "SHL"
    },
    "4610": {
      "op": "SUB"
    },
    "4611": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8887,
        8907
      ],
      "op": "AND",
      "path": "36"
    },
    "4612": {
      "branch": 112,
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8887,
        8907
      ],
      "op": "GT",
      "path": "36"
    },
    "4613": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8879,
        8948
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1220"
    },
    "4616": {
      "branch": 112,
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8879,
        8948
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "4617": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8879,
        8948
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "4619": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8879,
        8948
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "4620": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "4624": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "4626": {
      "op": "SHL"
    },
    "4627": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8879,
        8948
      ],
      "op": "DUP2",
      "path": "36"
    },
    "4628": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8879,
        8948
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "4629": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8879,
        8948
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x4"
    },
    "4631": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8879,
        8948
      ],
      "op": "ADD",
      "path": "36"
    },
    "4632": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8879,
        8948
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x57F"
    },
    "4635": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8879,
        8948
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "4636": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8879,
        8948
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x29EA"
    },
    "4639": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "jump": "i",
      "offset": [
        8879,
        8948
      ],
      "op": "JUMP",
      "path": "36"
    },
    "4640": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8879,
        8948
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "4641": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8989,
        9005
      ],
      "op": "DUP4",
      "path": "36",
      "statement": 46
    },
    "4642": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4644": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4646": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4648": {
      "op": "SHL"
    },
    "4649": {
      "op": "SUB"
    },
    "4650": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8966,
        9005
      ],
      "op": "AND",
      "path": "36"
    },
    "4651": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8966,
        8985
      ],
      "op": "DUP4",
      "path": "36"
    },
    "4652": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4654": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4656": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4658": {
      "op": "SHL"
    },
    "4659": {
      "op": "SUB"
    },
    "4660": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8966,
        9005
      ],
      "op": "AND",
      "path": "36"
    },
    "4661": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8966,
        9005
      ],
      "op": "GT",
      "path": "36"
    },
    "4662": {
      "branch": 113,
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8966,
        9005
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "4663": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8958,
        9056
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1252"
    },
    "4666": {
      "branch": 113,
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8958,
        9056
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "4667": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8958,
        9056
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "4669": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8958,
        9056
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "4670": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "4674": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "4676": {
      "op": "SHL"
    },
    "4677": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8958,
        9056
      ],
      "op": "DUP2",
      "path": "36"
    },
    "4678": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8958,
        9056
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "4679": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8958,
        9056
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x4"
    },
    "4681": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8958,
        9056
      ],
      "op": "ADD",
      "path": "36"
    },
    "4682": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8958,
        9056
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x57F"
    },
    "4685": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8958,
        9056
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "4686": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8958,
        9056
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2A2E"
    },
    "4689": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "jump": "i",
      "offset": [
        8958,
        9056
      ],
      "op": "JUMP",
      "path": "36"
    },
    "4690": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        8958,
        9056
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "4691": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9096,
        9101
      ],
      "op": "PUSH2",
      "path": "36",
      "statement": 47,
      "value": "0xA8C0"
    },
    "4694": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9074,
        9092
      ],
      "op": "DUP3",
      "path": "36"
    },
    "4695": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4697": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4699": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4701": {
      "op": "SHL"
    },
    "4702": {
      "op": "SUB"
    },
    "4703": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9074,
        9101
      ],
      "op": "AND",
      "path": "36"
    },
    "4704": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9074,
        9101
      ],
      "op": "LT",
      "path": "36"
    },
    "4705": {
      "branch": 114,
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9074,
        9101
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "4706": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9066,
        9134
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x12AD"
    },
    "4709": {
      "branch": 114,
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9066,
        9134
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "4710": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9066,
        9134
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "4712": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9066,
        9134
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "4713": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "4717": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "4719": {
      "op": "SHL"
    },
    "4720": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9066,
        9134
      ],
      "op": "DUP2",
      "path": "36"
    },
    "4721": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9066,
        9134
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "4722": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4724": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9066,
        9134
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x4"
    },
    "4726": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9066,
        9134
      ],
      "op": "DUP3",
      "path": "36"
    },
    "4727": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9066,
        9134
      ],
      "op": "ADD",
      "path": "36"
    },
    "4728": {
      "op": "MSTORE"
    },
    "4729": {
      "op": "PUSH1",
      "value": "0x1C"
    },
    "4731": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4733": {
      "op": "DUP3"
    },
    "4734": {
      "op": "ADD"
    },
    "4735": {
      "op": "MSTORE"
    },
    "4736": {
      "op": "PUSH32",
      "value": "0x4D696E696D756D206475726174696F6E20697320313220686F75727300000000"
    },
    "4769": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "4771": {
      "op": "DUP3"
    },
    "4772": {
      "op": "ADD"
    },
    "4773": {
      "op": "MSTORE"
    },
    "4774": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "4776": {
      "op": "ADD"
    },
    "4777": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9066,
        9134
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x57F"
    },
    "4780": {
      "op": "JUMP"
    },
    "4781": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9066,
        9134
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "4782": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9153,
        9176
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "4784": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9179,
        9298
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x12BD"
    },
    "4787": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9199,
        9212
      ],
      "op": "DUP10",
      "path": "36"
    },
    "4788": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9214,
        9221
      ],
      "op": "DUP10",
      "path": "36"
    },
    "4789": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9223,
        9241
      ],
      "op": "DUP10",
      "path": "36"
    },
    "4790": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9243,
        9258
      ],
      "op": "DUP10",
      "path": "36"
    },
    "4791": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9260,
        9276
      ],
      "op": "DUP10",
      "path": "36"
    },
    "4792": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9278,
        9297
      ],
      "op": "DUP10",
      "path": "36"
    },
    "4793": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9179,
        9197
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x15B1"
    },
    "4796": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "jump": "i",
      "offset": [
        9179,
        9298
      ],
      "op": "JUMP",
      "path": "36"
    },
    "4797": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9179,
        9298
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "4798": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9153,
        9298
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "4799": {
      "op": "POP"
    },
    "4800": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4802": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4804": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4806": {
      "op": "SHL"
    },
    "4807": {
      "op": "SUB"
    },
    "4808": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9313,
        9340
      ],
      "op": "DUP10",
      "path": "36"
    },
    "4809": {
      "branch": 115,
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9313,
        9340
      ],
      "op": "AND",
      "path": "36"
    },
    "4810": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9309,
        9921
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x132B"
    },
    "4813": {
      "branch": 115,
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9309,
        9921
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "4814": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9387,
        9398
      ],
      "op": "PUSH1",
      "path": "36",
      "statement": 48,
      "value": "0x98"
    },
    "4816": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9387,
        9398
      ],
      "op": "SLOAD",
      "path": "36"
    },
    "4817": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9377,
        9398
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x12E3"
    },
    "4820": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9377,
        9398
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "4821": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4823": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4825": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "4827": {
      "op": "SHL"
    },
    "4828": {
      "op": "SUB"
    },
    "4829": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9377,
        9398
      ],
      "op": "DUP11",
      "path": "36"
    },
    "4830": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9377,
        9398
      ],
      "op": "AND",
      "path": "36"
    },
    "4831": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9377,
        9398
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2A92"
    },
    "4834": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "jump": "i",
      "offset": [
        9377,
        9398
      ],
      "op": "JUMP",
      "path": "36"
    },
    "4835": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9377,
        9398
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "4836": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9364,
        9373
      ],
      "op": "CALLVALUE",
      "path": "36"
    },
    "4837": {
      "branch": 116,
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9364,
        9398
      ],
      "op": "EQ",
      "path": "36"
    },
    "4838": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9356,
        9421
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1326"
    },
    "4841": {
      "branch": 116,
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9356,
        9421
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "4842": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9356,
        9421
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "4844": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9356,
        9421
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "4845": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "4849": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "4851": {
      "op": "SHL"
    },
    "4852": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9356,
        9421
      ],
      "op": "DUP2",
      "path": "36"
    },
    "4853": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9356,
        9421
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "4854": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4856": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9356,
        9421
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x4"
    },
    "4858": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9356,
        9421
      ],
      "op": "DUP3",
      "path": "36"
    },
    "4859": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9356,
        9421
      ],
      "op": "ADD",
      "path": "36"
    },
    "4860": {
      "op": "MSTORE"
    },
    "4861": {
      "op": "PUSH1",
      "value": "0x12"
    },
    "4863": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4865": {
      "op": "DUP3"
    },
    "4866": {
      "op": "ADD"
    },
    "4867": {
      "op": "MSTORE"
    },
    "4868": {
      "op": "PUSH18",
      "value": "0x125B98DBDC9C9958DD08199959481CD95B9D"
    },
    "4887": {
      "op": "PUSH1",
      "value": "0x72"
    },
    "4889": {
      "op": "SHL"
    },
    "4890": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "4892": {
      "op": "DUP3"
    },
    "4893": {
      "op": "ADD"
    },
    "4894": {
      "op": "MSTORE"
    },
    "4895": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "4897": {
      "op": "ADD"
    },
    "4898": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9356,
        9421
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x57F"
    },
    "4901": {
      "op": "JUMP"
    },
    "4902": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9356,
        9421
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "4903": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9309,
        9921
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x14D8"
    },
    "4906": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9309,
        9921
      ],
      "op": "JUMP",
      "path": "36"
    },
    "4907": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9309,
        9921
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "4908": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9473,
        9484
      ],
      "op": "PUSH1",
      "path": "36",
      "statement": 49,
      "value": "0x98"
    },
    "4910": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9473,
        9484
      ],
      "op": "SLOAD",
      "path": "36"
    },
    "4911": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9460,
        9469
      ],
      "op": "CALLVALUE",
      "path": "36"
    },
    "4912": {
      "branch": 117,
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9460,
        9484
      ],
      "op": "EQ",
      "path": "36"
    },
    "4913": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9452,
        9515
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x137C"
    },
    "4916": {
      "branch": 117,
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9452,
        9515
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "4917": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9452,
        9515
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "4919": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9452,
        9515
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "4920": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "4924": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "4926": {
      "op": "SHL"
    },
    "4927": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9452,
        9515
      ],
      "op": "DUP2",
      "path": "36"
    },
    "4928": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9452,
        9515
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "4929": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4931": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9452,
        9515
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x4"
    },
    "4933": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9452,
        9515
      ],
      "op": "DUP3",
      "path": "36"
    },
    "4934": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9452,
        9515
      ],
      "op": "ADD",
      "path": "36"
    },
    "4935": {
      "op": "MSTORE"
    },
    "4936": {
      "op": "PUSH1",
      "value": "0x1A"
    },
    "4938": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4940": {
      "op": "DUP3"
    },
    "4941": {
      "op": "ADD"
    },
    "4942": {
      "op": "MSTORE"
    },
    "4943": {
      "op": "PUSH32",
      "value": "0x496E636F7272656374204F50454E494E475F4645452073656E74000000000000"
    },
    "4976": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "4978": {
      "op": "DUP3"
    },
    "4979": {
      "op": "ADD"
    },
    "4980": {
      "op": "MSTORE"
    },
    "4981": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "4983": {
      "op": "ADD"
    },
    "4984": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9452,
        9515
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x57F"
    },
    "4987": {
      "op": "JUMP"
    },
    "4988": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9452,
        9515
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "4989": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9599
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "4991": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9599
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "4992": {
      "op": "PUSH4",
      "value": "0x70A08231"
    },
    "4997": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "4999": {
      "op": "SHL"
    },
    "5000": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9599
      ],
      "op": "DUP2",
      "path": "36"
    },
    "5001": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9599
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "5002": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9593,
        9597
      ],
      "op": "ADDRESS",
      "path": "36"
    },
    "5003": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9599
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x4"
    },
    "5005": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9599
      ],
      "op": "DUP3",
      "path": "36"
    },
    "5006": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9599
      ],
      "op": "ADD",
      "path": "36"
    },
    "5007": {
      "op": "MSTORE"
    },
    "5008": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9529,
        9550
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "5010": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9529,
        9550
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "5011": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5013": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5015": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5017": {
      "op": "SHL"
    },
    "5018": {
      "op": "SUB"
    },
    "5019": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9584
      ],
      "op": "DUP12",
      "path": "36"
    },
    "5020": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9584
      ],
      "op": "AND",
      "path": "36"
    },
    "5021": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9584
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "5022": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9584
      ],
      "op": "PUSH4",
      "path": "36",
      "value": "0x70A08231"
    },
    "5027": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9584
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "5028": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "5030": {
      "op": "ADD"
    },
    "5031": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9599
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "5033": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9599
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "5035": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9599
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "5036": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9599
      ],
      "op": "DUP1",
      "path": "36"
    },
    "5037": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9599
      ],
      "op": "DUP4",
      "path": "36"
    },
    "5038": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9599
      ],
      "op": "SUB",
      "path": "36"
    },
    "5039": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9599
      ],
      "op": "DUP2",
      "path": "36"
    },
    "5040": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9599
      ],
      "op": "DUP7",
      "path": "36"
    },
    "5041": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9599
      ],
      "op": "GAS",
      "path": "36"
    },
    "5042": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9599
      ],
      "op": "STATICCALL",
      "path": "36"
    },
    "5043": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9599
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "5044": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9599
      ],
      "op": "DUP1",
      "path": "36"
    },
    "5045": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9599
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "5046": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9599
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x13C3"
    },
    "5049": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9599
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "5050": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9599
      ],
      "op": "RETURNDATASIZE",
      "path": "36"
    },
    "5051": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9599
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "5053": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9599
      ],
      "op": "DUP1",
      "path": "36"
    },
    "5054": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9599
      ],
      "op": "RETURNDATACOPY",
      "path": "36"
    },
    "5055": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9599
      ],
      "op": "RETURNDATASIZE",
      "path": "36"
    },
    "5056": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9599
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "5058": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9599
      ],
      "op": "REVERT",
      "path": "36"
    },
    "5059": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9599
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "5060": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9599
      ],
      "op": "POP",
      "path": "36"
    },
    "5061": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9599
      ],
      "op": "POP",
      "path": "36"
    },
    "5062": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9599
      ],
      "op": "POP",
      "path": "36"
    },
    "5063": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9599
      ],
      "op": "POP",
      "path": "36"
    },
    "5064": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9599
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "5066": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9599
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "5067": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9599
      ],
      "op": "RETURNDATASIZE",
      "path": "36"
    },
    "5068": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9599
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x1F"
    },
    "5070": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9599
      ],
      "op": "NOT",
      "path": "36"
    },
    "5071": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9599
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x1F"
    },
    "5073": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9599
      ],
      "op": "DUP3",
      "path": "36"
    },
    "5074": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9599
      ],
      "op": "ADD",
      "path": "36"
    },
    "5075": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9599
      ],
      "op": "AND",
      "path": "36"
    },
    "5076": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9599
      ],
      "op": "DUP3",
      "path": "36"
    },
    "5077": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9599
      ],
      "op": "ADD",
      "path": "36"
    },
    "5078": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9599
      ],
      "op": "DUP1",
      "path": "36"
    },
    "5079": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9599
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "5081": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9599
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "5082": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9599
      ],
      "op": "POP",
      "path": "36"
    },
    "5083": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9599
      ],
      "op": "DUP2",
      "path": "36"
    },
    "5084": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9599
      ],
      "op": "ADD",
      "path": "36"
    },
    "5085": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9599
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "5086": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9599
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x13E7"
    },
    "5089": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9599
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "5090": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9599
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "5091": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9599
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2CDF"
    },
    "5094": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "jump": "i",
      "offset": [
        9553,
        9599
      ],
      "op": "JUMP",
      "path": "36"
    },
    "5095": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9553,
        9599
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "5096": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9529,
        9599
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "5097": {
      "op": "POP"
    },
    "5098": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9660,
        9734
      ],
      "op": "PUSH2",
      "path": "36",
      "statement": 50,
      "value": "0x1407"
    },
    "5101": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5103": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5105": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5107": {
      "op": "SHL"
    },
    "5108": {
      "op": "SUB"
    },
    "5109": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9660,
        9698
      ],
      "op": "DUP12",
      "path": "36"
    },
    "5110": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9660,
        9698
      ],
      "op": "AND",
      "path": "36"
    },
    "5111": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9699,
        9709
      ],
      "op": "CALLER",
      "path": "36"
    },
    "5112": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9719,
        9723
      ],
      "op": "ADDRESS",
      "path": "36"
    },
    "5113": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5115": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5117": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "5119": {
      "op": "SHL"
    },
    "5120": {
      "op": "SUB"
    },
    "5121": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9660,
        9734
      ],
      "op": "DUP14",
      "path": "36"
    },
    "5122": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9660,
        9734
      ],
      "op": "AND",
      "path": "36"
    },
    "5123": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9660,
        9698
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2190"
    },
    "5126": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "jump": "i",
      "offset": [
        9660,
        9734
      ],
      "op": "JUMP",
      "path": "36"
    },
    "5127": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9660,
        9734
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "5128": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9817
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "5130": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9817
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "5131": {
      "op": "PUSH4",
      "value": "0x70A08231"
    },
    "5136": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "5138": {
      "op": "SHL"
    },
    "5139": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9817
      ],
      "op": "DUP2",
      "path": "36"
    },
    "5140": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9817
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "5141": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9811,
        9815
      ],
      "op": "ADDRESS",
      "path": "36"
    },
    "5142": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9817
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x4"
    },
    "5144": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9817
      ],
      "op": "DUP3",
      "path": "36"
    },
    "5145": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9817
      ],
      "op": "ADD",
      "path": "36"
    },
    "5146": {
      "op": "MSTORE"
    },
    "5147": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9748,
        9768
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "5149": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9748,
        9768
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "5150": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5152": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5154": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5156": {
      "op": "SHL"
    },
    "5157": {
      "op": "SUB"
    },
    "5158": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9802
      ],
      "op": "DUP13",
      "path": "36"
    },
    "5159": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9802
      ],
      "op": "AND",
      "path": "36"
    },
    "5160": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9802
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "5161": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9802
      ],
      "op": "PUSH4",
      "path": "36",
      "value": "0x70A08231"
    },
    "5166": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9802
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "5167": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "5169": {
      "op": "ADD"
    },
    "5170": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9817
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "5172": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9817
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "5174": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9817
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "5175": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9817
      ],
      "op": "DUP1",
      "path": "36"
    },
    "5176": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9817
      ],
      "op": "DUP4",
      "path": "36"
    },
    "5177": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9817
      ],
      "op": "SUB",
      "path": "36"
    },
    "5178": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9817
      ],
      "op": "DUP2",
      "path": "36"
    },
    "5179": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9817
      ],
      "op": "DUP7",
      "path": "36"
    },
    "5180": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9817
      ],
      "op": "GAS",
      "path": "36"
    },
    "5181": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9817
      ],
      "op": "STATICCALL",
      "path": "36"
    },
    "5182": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9817
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "5183": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9817
      ],
      "op": "DUP1",
      "path": "36"
    },
    "5184": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9817
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "5185": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9817
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x144E"
    },
    "5188": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9817
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "5189": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9817
      ],
      "op": "RETURNDATASIZE",
      "path": "36"
    },
    "5190": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9817
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "5192": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9817
      ],
      "op": "DUP1",
      "path": "36"
    },
    "5193": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9817
      ],
      "op": "RETURNDATACOPY",
      "path": "36"
    },
    "5194": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9817
      ],
      "op": "RETURNDATASIZE",
      "path": "36"
    },
    "5195": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9817
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "5197": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9817
      ],
      "op": "REVERT",
      "path": "36"
    },
    "5198": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9817
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "5199": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9817
      ],
      "op": "POP",
      "path": "36"
    },
    "5200": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9817
      ],
      "op": "POP",
      "path": "36"
    },
    "5201": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9817
      ],
      "op": "POP",
      "path": "36"
    },
    "5202": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9817
      ],
      "op": "POP",
      "path": "36"
    },
    "5203": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9817
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "5205": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9817
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "5206": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9817
      ],
      "op": "RETURNDATASIZE",
      "path": "36"
    },
    "5207": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9817
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x1F"
    },
    "5209": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9817
      ],
      "op": "NOT",
      "path": "36"
    },
    "5210": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9817
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x1F"
    },
    "5212": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9817
      ],
      "op": "DUP3",
      "path": "36"
    },
    "5213": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9817
      ],
      "op": "ADD",
      "path": "36"
    },
    "5214": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9817
      ],
      "op": "AND",
      "path": "36"
    },
    "5215": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9817
      ],
      "op": "DUP3",
      "path": "36"
    },
    "5216": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9817
      ],
      "op": "ADD",
      "path": "36"
    },
    "5217": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9817
      ],
      "op": "DUP1",
      "path": "36"
    },
    "5218": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9817
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "5220": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9817
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "5221": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9817
      ],
      "op": "POP",
      "path": "36"
    },
    "5222": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9817
      ],
      "op": "DUP2",
      "path": "36"
    },
    "5223": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9817
      ],
      "op": "ADD",
      "path": "36"
    },
    "5224": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9817
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "5225": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9817
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1472"
    },
    "5228": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9817
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "5229": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9817
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "5230": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9817
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2CDF"
    },
    "5233": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "jump": "i",
      "offset": [
        9771,
        9817
      ],
      "op": "JUMP",
      "path": "36"
    },
    "5234": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9771,
        9817
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "5235": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9748,
        9817
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "5236": {
      "op": "POP"
    },
    "5237": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9850,
        9878
      ],
      "op": "PUSH2",
      "path": "36",
      "statement": 51,
      "value": "0x147E"
    },
    "5240": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9865,
        9878
      ],
      "op": "DUP3",
      "path": "36"
    },
    "5241": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9748,
        9817
      ],
      "op": "DUP3",
      "path": "36"
    },
    "5242": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9850,
        9878
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2D41"
    },
    "5245": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "jump": "i",
      "offset": [
        9850,
        9878
      ],
      "op": "JUMP",
      "path": "36"
    },
    "5246": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9850,
        9878
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "5247": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9839,
        9846
      ],
      "op": "DUP11",
      "path": "36"
    },
    "5248": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5250": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5252": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "5254": {
      "op": "SHL"
    },
    "5255": {
      "op": "SUB"
    },
    "5256": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9839,
        9878
      ],
      "op": "AND",
      "path": "36"
    },
    "5257": {
      "branch": 118,
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9839,
        9878
      ],
      "op": "EQ",
      "path": "36"
    },
    "5258": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9831,
        9910
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x14D5"
    },
    "5261": {
      "branch": 118,
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9831,
        9910
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "5262": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9831,
        9910
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "5264": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9831,
        9910
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "5265": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "5269": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "5271": {
      "op": "SHL"
    },
    "5272": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9831,
        9910
      ],
      "op": "DUP2",
      "path": "36"
    },
    "5273": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9831,
        9910
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "5274": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5276": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9831,
        9910
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x4"
    },
    "5278": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9831,
        9910
      ],
      "op": "DUP3",
      "path": "36"
    },
    "5279": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9831,
        9910
      ],
      "op": "ADD",
      "path": "36"
    },
    "5280": {
      "op": "MSTORE"
    },
    "5281": {
      "op": "PUSH1",
      "value": "0x1B"
    },
    "5283": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "5285": {
      "op": "DUP3"
    },
    "5286": {
      "op": "ADD"
    },
    "5287": {
      "op": "MSTORE"
    },
    "5288": {
      "op": "PUSH32",
      "value": "0x455243323020746F6B656E207472616E73666572206661696C65640000000000"
    },
    "5321": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "5323": {
      "op": "DUP3"
    },
    "5324": {
      "op": "ADD"
    },
    "5325": {
      "op": "MSTORE"
    },
    "5326": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "5328": {
      "op": "ADD"
    },
    "5329": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9831,
        9910
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x57F"
    },
    "5332": {
      "op": "JUMP"
    },
    "5333": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9831,
        9910
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "5334": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9438,
        9921
      ],
      "op": "POP",
      "path": "36"
    },
    "5335": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9438,
        9921
      ],
      "op": "POP",
      "path": "36"
    },
    "5336": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9309,
        9921
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "5337": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9967,
        9978
      ],
      "op": "PUSH1",
      "path": "36",
      "statement": 52,
      "value": "0x98"
    },
    "5339": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9967,
        9978
      ],
      "op": "SLOAD",
      "path": "36"
    },
    "5340": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9931,
        9963
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "5342": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9931,
        9963
      ],
      "op": "DUP1",
      "path": "36"
    },
    "5343": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9931,
        9963
      ],
      "op": "DUP1",
      "path": "36"
    },
    "5344": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9931,
        9963
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "5345": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9931,
        9951
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x99"
    },
    "5347": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9931,
        9963
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "5349": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9931,
        9963
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "5350": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9931,
        9963
      ],
      "op": "PUSH32",
      "path": "36",
      "value": "0x235D629DC802037DED8C61CB27FB29E40FA01B299719D8F991FFE20BDCC59F4F"
    },
    "5383": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9931,
        9978
      ],
      "op": "DUP1",
      "path": "36"
    },
    "5384": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9931,
        9978
      ],
      "op": "SLOAD",
      "path": "36"
    },
    "5385": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9931,
        9963
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "5386": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9931,
        9963
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "5387": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9931,
        9963
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "5388": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9931,
        9978
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1516"
    },
    "5391": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9931,
        9978
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "5392": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9967,
        9978
      ],
      "op": "DUP5",
      "path": "36"
    },
    "5393": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9967,
        9978
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "5394": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9931,
        9978
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2A92"
    },
    "5397": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "jump": "i",
      "offset": [
        9931,
        9978
      ],
      "op": "JUMP",
      "path": "36"
    },
    "5398": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9931,
        9978
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "5399": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9931,
        9978
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "5400": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9931,
        9978
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "5401": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9931,
        9978
      ],
      "op": "SSTORE",
      "path": "36"
    },
    "5402": {
      "op": "POP"
    },
    "5403": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9993,
        10360
      ],
      "op": "PUSH32",
      "path": "36",
      "statement": 53,
      "value": "0xB26C0BF32D8D3EFF0D0561D0B30F4BF8962A18678833B276FCBBE06C48E9EAAA"
    },
    "5436": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        9993,
        10360
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "5437": {
      "op": "POP"
    },
    "5438": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        10020,
        10033
      ],
      "op": "DUP10",
      "path": "36"
    },
    "5439": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        10047,
        10057
      ],
      "op": "CALLER",
      "path": "36"
    },
    "5440": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        10071,
        10087
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x1"
    },
    "5442": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        10101,
        10108
      ],
      "op": "DUP12",
      "path": "36"
    },
    "5443": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        10123,
        10141
      ],
      "op": "DUP12",
      "path": "36"
    },
    "5444": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        10156,
        10171
      ],
      "op": "DUP12",
      "path": "36"
    },
    "5445": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        10186,
        10202
      ],
      "op": "DUP12",
      "path": "36"
    },
    "5446": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        10217,
        10236
      ],
      "op": "DUP12",
      "path": "36"
    },
    "5447": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        10258,
        10294
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x989"
    },
    "5450": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5452": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5454": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "5456": {
      "op": "SHL"
    },
    "5457": {
      "op": "SUB"
    },
    "5458": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        10258,
        10294
      ],
      "op": "DUP14",
      "path": "36"
    },
    "5459": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        10258,
        10294
      ],
      "op": "AND",
      "path": "36"
    },
    "5460": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        10258,
        10273
      ],
      "op": "TIMESTAMP",
      "path": "36"
    },
    "5461": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "offset": [
        10258,
        10294
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2A92"
    },
    "5464": {
      "fn": "MockMainnetEscrow.createERC20Raffle",
      "jump": "i",
      "offset": [
        10258,
        10294
      ],
      "op": "JUMP",
      "path": "36"
    },
    "5465": {
      "fn": "MockMainnetEscrow.togglePriceFeed",
      "offset": [
        13517,
        13618
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "5466": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        1348,
        1354
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x33"
    },
    "5468": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        1348,
        1354
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "5469": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5471": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5473": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5475": {
      "op": "SHL"
    },
    "5476": {
      "op": "SUB"
    },
    "5477": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        1348,
        1354
      ],
      "op": "AND",
      "path": "0"
    },
    "5478": {
      "fn": "ContextUpgradeable._msgSender",
      "offset": [
        929,
        939
      ],
      "op": "CALLER",
      "path": "5"
    },
    "5479": {
      "offset": [
        1488,
        1511
      ],
      "op": "EQ",
      "path": "0"
    },
    "5480": {
      "offset": [
        1480,
        1548
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1583"
    },
    "5483": {
      "offset": [
        1480,
        1548
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "5484": {
      "fn": "ContextUpgradeable._msgSender",
      "offset": [
        1480,
        1548
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "5486": {
      "fn": "ContextUpgradeable._msgSender",
      "offset": [
        1480,
        1548
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "5487": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "5491": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "5493": {
      "op": "SHL"
    },
    "5494": {
      "offset": [
        1480,
        1548
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5495": {
      "fn": "ContextUpgradeable._msgSender",
      "offset": [
        1480,
        1548
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5496": {
      "fn": "ContextUpgradeable._msgSender",
      "offset": [
        1480,
        1548
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "5498": {
      "fn": "ContextUpgradeable._msgSender",
      "offset": [
        1480,
        1548
      ],
      "op": "ADD",
      "path": "0"
    },
    "5499": {
      "fn": "ContextUpgradeable._msgSender",
      "offset": [
        1480,
        1548
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x57F"
    },
    "5502": {
      "fn": "ContextUpgradeable._msgSender",
      "offset": [
        1480,
        1548
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5503": {
      "fn": "ContextUpgradeable._msgSender",
      "offset": [
        1480,
        1548
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2B92"
    },
    "5506": {
      "fn": "ContextUpgradeable._msgSender",
      "jump": "i",
      "offset": [
        1480,
        1548
      ],
      "op": "JUMP",
      "path": "0"
    },
    "5507": {
      "fn": "ContextUpgradeable._msgSender",
      "offset": [
        1480,
        1548
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5508": {
      "fn": "MockMainnetEscrow.togglePriceFeed",
      "offset": [
        13594,
        13611
      ],
      "op": "PUSH1",
      "path": "36",
      "statement": 54,
      "value": "0x9D"
    },
    "5510": {
      "fn": "MockMainnetEscrow.togglePriceFeed",
      "offset": [
        13594,
        13611
      ],
      "op": "DUP1",
      "path": "36"
    },
    "5511": {
      "fn": "MockMainnetEscrow.togglePriceFeed",
      "offset": [
        13594,
        13611
      ],
      "op": "SLOAD",
      "path": "36"
    },
    "5512": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "5514": {
      "op": "NOT"
    },
    "5515": {
      "fn": "MockMainnetEscrow.togglePriceFeed",
      "offset": [
        13573,
        13611
      ],
      "op": "DUP2",
      "path": "36"
    },
    "5516": {
      "fn": "MockMainnetEscrow.togglePriceFeed",
      "offset": [
        13573,
        13611
      ],
      "op": "AND",
      "path": "36"
    },
    "5517": {
      "fn": "MockMainnetEscrow.togglePriceFeed",
      "offset": [
        13594,
        13611
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0xFF"
    },
    "5519": {
      "fn": "MockMainnetEscrow.togglePriceFeed",
      "offset": [
        13594,
        13611
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "5520": {
      "fn": "MockMainnetEscrow.togglePriceFeed",
      "offset": [
        13594,
        13611
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "5521": {
      "fn": "MockMainnetEscrow.togglePriceFeed",
      "offset": [
        13594,
        13611
      ],
      "op": "AND",
      "path": "36"
    },
    "5522": {
      "fn": "MockMainnetEscrow.togglePriceFeed",
      "offset": [
        13593,
        13611
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "5523": {
      "fn": "MockMainnetEscrow.togglePriceFeed",
      "offset": [
        13573,
        13611
      ],
      "op": "OR",
      "path": "36"
    },
    "5524": {
      "fn": "MockMainnetEscrow.togglePriceFeed",
      "offset": [
        13573,
        13611
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "5525": {
      "fn": "MockMainnetEscrow.togglePriceFeed",
      "offset": [
        13573,
        13611
      ],
      "op": "SSTORE",
      "path": "36"
    },
    "5526": {
      "fn": "MockMainnetEscrow.togglePriceFeed",
      "jump": "o",
      "offset": [
        13517,
        13618
      ],
      "op": "JUMP",
      "path": "36"
    },
    "5527": {
      "fn": "MockMainnetEscrow.togglePause",
      "offset": [
        12833,
        12930
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "5528": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1411,
        1418
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x65"
    },
    "5530": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1411,
        1418
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "5531": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1411,
        1418
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xFF"
    },
    "5533": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1411,
        1418
      ],
      "op": "AND",
      "path": "2"
    },
    "5534": {
      "fn": "MockMainnetEscrow.togglePause",
      "offset": [
        12875,
        12923
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x15A9"
    },
    "5537": {
      "fn": "MockMainnetEscrow.togglePause",
      "offset": [
        12875,
        12923
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "5538": {
      "fn": "MockMainnetEscrow.togglePause",
      "offset": [
        12890,
        12898
      ],
      "op": "PUSH2",
      "path": "36",
      "statement": 55,
      "value": "0xEBA"
    },
    "5541": {
      "fn": "MockMainnetEscrow.togglePause",
      "offset": [
        12890,
        12896
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x21C8"
    },
    "5544": {
      "fn": "MockMainnetEscrow.togglePause",
      "jump": "i",
      "offset": [
        12890,
        12898
      ],
      "op": "JUMP",
      "path": "36"
    },
    "5545": {
      "fn": "MockMainnetEscrow.togglePause",
      "offset": [
        12875,
        12923
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "5546": {
      "fn": "MockMainnetEscrow.togglePause",
      "offset": [
        12913,
        12923
      ],
      "op": "PUSH2",
      "path": "36",
      "statement": 56,
      "value": "0xEBA"
    },
    "5549": {
      "fn": "MockMainnetEscrow.togglePause",
      "offset": [
        12913,
        12921
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x223D"
    },
    "5552": {
      "fn": "MockMainnetEscrow.togglePause",
      "jump": "i",
      "offset": [
        12913,
        12923
      ],
      "op": "JUMP",
      "path": "36"
    },
    "5553": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        16544,
        18537
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "5554": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        16795,
        16812
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x9D"
    },
    "5556": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        16795,
        16812
      ],
      "op": "SLOAD",
      "path": "36"
    },
    "5557": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        16738,
        16745
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "5559": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        16738,
        16745
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "5560": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        16738,
        16745
      ],
      "op": "DUP2",
      "path": "36"
    },
    "5561": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        16738,
        16745
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "5562": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        16795,
        16812
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0xFF"
    },
    "5564": {
      "branch": 119,
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        16795,
        16812
      ],
      "op": "AND",
      "path": "36"
    },
    "5565": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        16790,
        18499
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x15FD"
    },
    "5568": {
      "branch": 119,
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        16790,
        18499
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "5569": {
      "offset": [
        2350,
        2355
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2710"
    },
    "5572": {
      "offset": [
        2287,
        2290
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1F4"
    },
    "5575": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        16846,
        16883
      ],
      "op": "PUSH2",
      "path": "36",
      "statement": 57,
      "value": "0x15D9"
    },
    "5578": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        16868,
        16883
      ],
      "op": "DUP8",
      "path": "36"
    },
    "5579": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5581": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5583": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "5585": {
      "op": "SHL"
    },
    "5586": {
      "op": "SUB"
    },
    "5587": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        16846,
        16883
      ],
      "op": "DUP8",
      "path": "36"
    },
    "5588": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        16846,
        16883
      ],
      "op": "AND",
      "path": "36"
    },
    "5589": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        16846,
        16883
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2D58"
    },
    "5592": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "jump": "i",
      "offset": [
        16846,
        16883
      ],
      "op": "JUMP",
      "path": "36"
    },
    "5593": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        16846,
        16883
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "5594": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5596": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5598": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "5600": {
      "op": "SHL"
    },
    "5601": {
      "op": "SUB"
    },
    "5602": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        16846,
        16911
      ],
      "op": "AND",
      "path": "36"
    },
    "5603": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        16846,
        16911
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x15EC"
    },
    "5606": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        16846,
        16911
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "5607": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        16846,
        16911
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "5608": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        16846,
        16911
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2CF8"
    },
    "5611": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "jump": "i",
      "offset": [
        16846,
        16911
      ],
      "op": "JUMP",
      "path": "36"
    },
    "5612": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        16846,
        16911
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "5613": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        16845,
        16942
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x15F6"
    },
    "5616": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        16845,
        16942
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "5617": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        16845,
        16942
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "5618": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        16845,
        16942
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2D2D"
    },
    "5621": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "jump": "i",
      "offset": [
        16845,
        16942
      ],
      "op": "JUMP",
      "path": "36"
    },
    "5622": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        16845,
        16942
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "5623": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        16827,
        16942
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "5624": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        16827,
        16942
      ],
      "op": "POP",
      "path": "36"
    },
    "5625": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        16790,
        18499
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x19F8"
    },
    "5628": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        16790,
        18499
      ],
      "op": "JUMP",
      "path": "36"
    },
    "5629": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        16790,
        18499
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "5630": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        16980,
        17009
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "5632": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5634": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5636": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5638": {
      "op": "SHL"
    },
    "5639": {
      "op": "SUB"
    },
    "5640": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17027,
        17054
      ],
      "op": "DUP10",
      "path": "36"
    },
    "5641": {
      "branch": 120,
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17027,
        17054
      ],
      "op": "AND",
      "path": "36"
    },
    "5642": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17023,
        17451
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x16C1"
    },
    "5645": {
      "branch": 120,
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17023,
        17451
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "5646": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17162
      ],
      "op": "PUSH1",
      "path": "36",
      "statement": 58,
      "value": "0x9B"
    },
    "5648": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17162
      ],
      "op": "SLOAD",
      "path": "36"
    },
    "5649": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17196
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "5651": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17196
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "5652": {
      "op": "PUSH4",
      "value": "0xA4B943FB"
    },
    "5657": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "5659": {
      "op": "SHL"
    },
    "5660": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17196
      ],
      "op": "DUP2",
      "path": "36"
    },
    "5661": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17196
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "5662": {
      "offset": [
        2101,
        2143
      ],
      "op": "PUSH20",
      "path": "36",
      "value": "0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2"
    },
    "5683": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17196
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x4"
    },
    "5685": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17196
      ],
      "op": "DUP3",
      "path": "36"
    },
    "5686": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17196
      ],
      "op": "ADD",
      "path": "36"
    },
    "5687": {
      "op": "DUP2"
    },
    "5688": {
      "op": "SWAP1"
    },
    "5689": {
      "op": "MSTORE"
    },
    "5690": {
      "offset": [
        2101,
        2143
      ],
      "op": "SWAP11",
      "path": "36"
    },
    "5691": {
      "op": "POP"
    },
    "5692": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17211,
        17219
      ],
      "op": "PUSH8",
      "path": "36",
      "value": "0xDE0B6B3A7640000"
    },
    "5701": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17211,
        17219
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "5702": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5704": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5706": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "5708": {
      "op": "SHL"
    },
    "5709": {
      "op": "SUB"
    },
    "5710": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17206
      ],
      "op": "DUP12",
      "path": "36"
    },
    "5711": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17206
      ],
      "op": "AND",
      "path": "36"
    },
    "5712": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17206
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "5713": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5715": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5717": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5719": {
      "op": "SHL"
    },
    "5720": {
      "op": "SUB"
    },
    "5721": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17162
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "5722": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17162
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "5723": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17162
      ],
      "op": "AND",
      "path": "36"
    },
    "5724": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17162
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "5725": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17181
      ],
      "op": "PUSH4",
      "path": "36",
      "value": "0xA4B943FB"
    },
    "5730": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17181
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "5731": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "5733": {
      "op": "ADD"
    },
    "5734": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17196
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "5736": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17196
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "5738": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17196
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "5739": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17196
      ],
      "op": "DUP1",
      "path": "36"
    },
    "5740": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17196
      ],
      "op": "DUP4",
      "path": "36"
    },
    "5741": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17196
      ],
      "op": "SUB",
      "path": "36"
    },
    "5742": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17196
      ],
      "op": "DUP2",
      "path": "36"
    },
    "5743": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17196
      ],
      "op": "DUP7",
      "path": "36"
    },
    "5744": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17196
      ],
      "op": "GAS",
      "path": "36"
    },
    "5745": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17196
      ],
      "op": "STATICCALL",
      "path": "36"
    },
    "5746": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17196
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "5747": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17196
      ],
      "op": "DUP1",
      "path": "36"
    },
    "5748": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17196
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "5749": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17196
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1682"
    },
    "5752": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17196
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "5753": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17196
      ],
      "op": "RETURNDATASIZE",
      "path": "36"
    },
    "5754": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17196
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "5756": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17196
      ],
      "op": "DUP1",
      "path": "36"
    },
    "5757": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17196
      ],
      "op": "RETURNDATACOPY",
      "path": "36"
    },
    "5758": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17196
      ],
      "op": "RETURNDATASIZE",
      "path": "36"
    },
    "5759": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17196
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "5761": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17196
      ],
      "op": "REVERT",
      "path": "36"
    },
    "5762": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17196
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "5763": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17196
      ],
      "op": "POP",
      "path": "36"
    },
    "5764": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17196
      ],
      "op": "POP",
      "path": "36"
    },
    "5765": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17196
      ],
      "op": "POP",
      "path": "36"
    },
    "5766": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17196
      ],
      "op": "POP",
      "path": "36"
    },
    "5767": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17196
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "5769": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17196
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "5770": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17196
      ],
      "op": "RETURNDATASIZE",
      "path": "36"
    },
    "5771": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17196
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x1F"
    },
    "5773": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17196
      ],
      "op": "NOT",
      "path": "36"
    },
    "5774": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17196
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x1F"
    },
    "5776": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17196
      ],
      "op": "DUP3",
      "path": "36"
    },
    "5777": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17196
      ],
      "op": "ADD",
      "path": "36"
    },
    "5778": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17196
      ],
      "op": "AND",
      "path": "36"
    },
    "5779": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17196
      ],
      "op": "DUP3",
      "path": "36"
    },
    "5780": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17196
      ],
      "op": "ADD",
      "path": "36"
    },
    "5781": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17196
      ],
      "op": "DUP1",
      "path": "36"
    },
    "5782": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17196
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "5784": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17196
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "5785": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17196
      ],
      "op": "POP",
      "path": "36"
    },
    "5786": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17196
      ],
      "op": "DUP2",
      "path": "36"
    },
    "5787": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17196
      ],
      "op": "ADD",
      "path": "36"
    },
    "5788": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17196
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "5789": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17196
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x16A6"
    },
    "5792": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17196
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "5793": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17196
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "5794": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17196
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2CDF"
    },
    "5797": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "jump": "i",
      "offset": [
        17145,
        17196
      ],
      "op": "JUMP",
      "path": "36"
    },
    "5798": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17196
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "5799": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17206
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x16B0"
    },
    "5802": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17206
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "5803": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17206
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "5804": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17206
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2CF8"
    },
    "5807": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "jump": "i",
      "offset": [
        17145,
        17206
      ],
      "op": "JUMP",
      "path": "36"
    },
    "5808": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17145,
        17206
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "5809": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17144,
        17220
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x16BA"
    },
    "5812": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17144,
        17220
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "5813": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17144,
        17220
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "5814": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17144,
        17220
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2D2D"
    },
    "5817": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "jump": "i",
      "offset": [
        17144,
        17220
      ],
      "op": "JUMP",
      "path": "36"
    },
    "5818": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17144,
        17220
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "5819": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17120,
        17220
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "5820": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17120,
        17220
      ],
      "op": "POP",
      "path": "36"
    },
    "5821": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17023,
        17451
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x17BC"
    },
    "5824": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17023,
        17451
      ],
      "op": "JUMP",
      "path": "36"
    },
    "5825": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17023,
        17451
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "5826": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17410,
        17423
      ],
      "op": "DUP9",
      "path": "36",
      "statement": 59
    },
    "5827": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5829": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5831": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5833": {
      "op": "SHL"
    },
    "5834": {
      "op": "SUB"
    },
    "5835": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17433
      ],
      "op": "AND",
      "path": "36"
    },
    "5836": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17433
      ],
      "op": "PUSH4",
      "path": "36",
      "value": "0x313CE567"
    },
    "5841": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "5843": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "5844": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "DUP2",
      "path": "36"
    },
    "5845": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "PUSH4",
      "path": "36",
      "value": "0xFFFFFFFF"
    },
    "5850": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "AND",
      "path": "36"
    },
    "5851": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0xE0"
    },
    "5853": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "SHL",
      "path": "36"
    },
    "5854": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "DUP2",
      "path": "36"
    },
    "5855": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "5856": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x4"
    },
    "5858": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "ADD",
      "path": "36"
    },
    "5859": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "5861": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "5863": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "5864": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "DUP1",
      "path": "36"
    },
    "5865": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "DUP4",
      "path": "36"
    },
    "5866": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "SUB",
      "path": "36"
    },
    "5867": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "DUP2",
      "path": "36"
    },
    "5868": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "DUP7",
      "path": "36"
    },
    "5869": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "GAS",
      "path": "36"
    },
    "5870": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "STATICCALL",
      "path": "36"
    },
    "5871": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "5872": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "DUP1",
      "path": "36"
    },
    "5873": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "5874": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x16FF"
    },
    "5877": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "5878": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "RETURNDATASIZE",
      "path": "36"
    },
    "5879": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "5881": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "DUP1",
      "path": "36"
    },
    "5882": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "RETURNDATACOPY",
      "path": "36"
    },
    "5883": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "RETURNDATASIZE",
      "path": "36"
    },
    "5884": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "5886": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "REVERT",
      "path": "36"
    },
    "5887": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "5888": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "POP",
      "path": "36"
    },
    "5889": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "POP",
      "path": "36"
    },
    "5890": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "POP",
      "path": "36"
    },
    "5891": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "POP",
      "path": "36"
    },
    "5892": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "5894": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "5895": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "RETURNDATASIZE",
      "path": "36"
    },
    "5896": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x1F"
    },
    "5898": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "NOT",
      "path": "36"
    },
    "5899": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x1F"
    },
    "5901": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "DUP3",
      "path": "36"
    },
    "5902": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "ADD",
      "path": "36"
    },
    "5903": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "AND",
      "path": "36"
    },
    "5904": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "DUP3",
      "path": "36"
    },
    "5905": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "ADD",
      "path": "36"
    },
    "5906": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "DUP1",
      "path": "36"
    },
    "5907": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "5909": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "5910": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "POP",
      "path": "36"
    },
    "5911": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "DUP2",
      "path": "36"
    },
    "5912": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "ADD",
      "path": "36"
    },
    "5913": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "5914": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1723"
    },
    "5917": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "5918": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "5919": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2BC7"
    },
    "5922": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "jump": "i",
      "offset": [
        17395,
        17435
      ],
      "op": "JUMP",
      "path": "36"
    },
    "5923": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17395,
        17435
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "5924": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17389,
        17435
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x172E"
    },
    "5927": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17389,
        17435
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "5928": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17389,
        17391
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0xA"
    },
    "5930": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17389,
        17435
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2CD0"
    },
    "5933": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "jump": "i",
      "offset": [
        17389,
        17435
      ],
      "op": "JUMP",
      "path": "36"
    },
    "5934": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17389,
        17435
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "5935": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17340
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x9B"
    },
    "5937": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17340
      ],
      "op": "SLOAD",
      "path": "36"
    },
    "5938": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17374
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "5940": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17374
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "5941": {
      "op": "PUSH4",
      "value": "0xA4B943FB"
    },
    "5946": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "5948": {
      "op": "SHL"
    },
    "5949": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17374
      ],
      "op": "DUP2",
      "path": "36"
    },
    "5950": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17374
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "5951": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5953": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5955": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5957": {
      "op": "SHL"
    },
    "5958": {
      "op": "SUB"
    },
    "5959": {
      "op": "DUP13"
    },
    "5960": {
      "op": "DUP2"
    },
    "5961": {
      "op": "AND"
    },
    "5962": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17374
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x4"
    },
    "5964": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17374
      ],
      "op": "DUP4",
      "path": "36"
    },
    "5965": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17374
      ],
      "op": "ADD",
      "path": "36"
    },
    "5966": {
      "op": "MSTORE"
    },
    "5967": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5969": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5971": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "5973": {
      "op": "SHL"
    },
    "5974": {
      "op": "SUB"
    },
    "5975": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17384
      ],
      "op": "DUP13",
      "path": "36"
    },
    "5976": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17384
      ],
      "op": "AND",
      "path": "36"
    },
    "5977": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17384
      ],
      "op": "SWAP3",
      "path": "36"
    },
    "5978": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17340
      ],
      "op": "AND",
      "path": "36"
    },
    "5979": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17340
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "5980": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17359
      ],
      "op": "PUSH4",
      "path": "36",
      "value": "0xA4B943FB"
    },
    "5985": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17359
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "5986": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "5988": {
      "op": "ADD"
    },
    "5989": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17374
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "5991": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17374
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "5993": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17374
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "5994": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17374
      ],
      "op": "DUP1",
      "path": "36"
    },
    "5995": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17374
      ],
      "op": "DUP4",
      "path": "36"
    },
    "5996": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17374
      ],
      "op": "SUB",
      "path": "36"
    },
    "5997": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17374
      ],
      "op": "DUP2",
      "path": "36"
    },
    "5998": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17374
      ],
      "op": "DUP7",
      "path": "36"
    },
    "5999": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17374
      ],
      "op": "GAS",
      "path": "36"
    },
    "6000": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17374
      ],
      "op": "STATICCALL",
      "path": "36"
    },
    "6001": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17374
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "6002": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17374
      ],
      "op": "DUP1",
      "path": "36"
    },
    "6003": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17374
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "6004": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17374
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1781"
    },
    "6007": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17374
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "6008": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17374
      ],
      "op": "RETURNDATASIZE",
      "path": "36"
    },
    "6009": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17374
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "6011": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17374
      ],
      "op": "DUP1",
      "path": "36"
    },
    "6012": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17374
      ],
      "op": "RETURNDATACOPY",
      "path": "36"
    },
    "6013": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17374
      ],
      "op": "RETURNDATASIZE",
      "path": "36"
    },
    "6014": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17374
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "6016": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17374
      ],
      "op": "REVERT",
      "path": "36"
    },
    "6017": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17374
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "6018": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17374
      ],
      "op": "POP",
      "path": "36"
    },
    "6019": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17374
      ],
      "op": "POP",
      "path": "36"
    },
    "6020": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17374
      ],
      "op": "POP",
      "path": "36"
    },
    "6021": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17374
      ],
      "op": "POP",
      "path": "36"
    },
    "6022": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17374
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "6024": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17374
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "6025": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17374
      ],
      "op": "RETURNDATASIZE",
      "path": "36"
    },
    "6026": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17374
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x1F"
    },
    "6028": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17374
      ],
      "op": "NOT",
      "path": "36"
    },
    "6029": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17374
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x1F"
    },
    "6031": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17374
      ],
      "op": "DUP3",
      "path": "36"
    },
    "6032": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17374
      ],
      "op": "ADD",
      "path": "36"
    },
    "6033": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17374
      ],
      "op": "AND",
      "path": "36"
    },
    "6034": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17374
      ],
      "op": "DUP3",
      "path": "36"
    },
    "6035": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17374
      ],
      "op": "ADD",
      "path": "36"
    },
    "6036": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17374
      ],
      "op": "DUP1",
      "path": "36"
    },
    "6037": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17374
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "6039": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17374
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "6040": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17374
      ],
      "op": "POP",
      "path": "36"
    },
    "6041": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17374
      ],
      "op": "DUP2",
      "path": "36"
    },
    "6042": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17374
      ],
      "op": "ADD",
      "path": "36"
    },
    "6043": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17374
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "6044": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17374
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x17A5"
    },
    "6047": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17374
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "6048": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17374
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "6049": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17374
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2CDF"
    },
    "6052": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "jump": "i",
      "offset": [
        17323,
        17374
      ],
      "op": "JUMP",
      "path": "36"
    },
    "6053": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17374
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "6054": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17384
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x17AF"
    },
    "6057": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17384
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "6058": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17384
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "6059": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17384
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2CF8"
    },
    "6062": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "jump": "i",
      "offset": [
        17323,
        17384
      ],
      "op": "JUMP",
      "path": "36"
    },
    "6063": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17323,
        17384
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "6064": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17322,
        17436
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x17B9"
    },
    "6067": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17322,
        17436
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "6068": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17322,
        17436
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "6069": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17322,
        17436
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2D2D"
    },
    "6072": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "jump": "i",
      "offset": [
        17322,
        17436
      ],
      "op": "JUMP",
      "path": "36"
    },
    "6073": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17322,
        17436
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "6074": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17298,
        17436
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "6075": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17298,
        17436
      ],
      "op": "POP",
      "path": "36"
    },
    "6076": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17023,
        17451
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "6077": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6079": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6081": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6083": {
      "op": "SHL"
    },
    "6084": {
      "op": "SUB"
    },
    "6085": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17650,
        17698
      ],
      "op": "DUP1",
      "path": "36"
    },
    "6086": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17650,
        17698
      ],
      "op": "DUP9",
      "path": "36"
    },
    "6087": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17650,
        17698
      ],
      "op": "AND",
      "path": "36"
    },
    "6088": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17464,
        17497
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "6090": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17650,
        17698
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "6091": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17650,
        17698
      ],
      "op": "DUP2",
      "path": "36"
    },
    "6092": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17650,
        17698
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "6093": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17650,
        17678
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x9C"
    },
    "6095": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17650,
        17698
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "6097": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17650,
        17698
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "6098": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17650,
        17698
      ],
      "op": "DUP2",
      "path": "36"
    },
    "6099": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17650,
        17698
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "6100": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17650,
        17698
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "6102": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17650,
        17698
      ],
      "op": "DUP1",
      "path": "36"
    },
    "6103": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17650,
        17698
      ],
      "op": "DUP4",
      "path": "36"
    },
    "6104": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17650,
        17698
      ],
      "op": "KECCAK256",
      "path": "36"
    },
    "6105": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17650,
        17698
      ],
      "op": "SLOAD",
      "path": "36"
    },
    "6106": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17710
      ],
      "op": "DUP2",
      "path": "36"
    },
    "6107": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17710
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "6108": {
      "op": "PUSH4",
      "value": "0x313CE567"
    },
    "6113": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "6115": {
      "op": "SHL"
    },
    "6116": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17710
      ],
      "op": "DUP2",
      "path": "36"
    },
    "6117": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17710
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "6118": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17710
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "6119": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17710
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "6120": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17464,
        17497
      ],
      "op": "SWAP4",
      "path": "36"
    },
    "6121": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17464,
        17497
      ],
      "op": "SWAP5",
      "path": "36"
    },
    "6122": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17650,
        17698
      ],
      "op": "AND",
      "path": "36"
    },
    "6123": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17650,
        17698
      ],
      "op": "SWAP3",
      "path": "36"
    },
    "6124": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17708
      ],
      "op": "PUSH4",
      "path": "36",
      "value": "0x313CE567"
    },
    "6129": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17708
      ],
      "op": "SWAP3",
      "path": "36"
    },
    "6130": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17710
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x4"
    },
    "6132": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17710
      ],
      "op": "DUP1",
      "path": "36"
    },
    "6133": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17710
      ],
      "op": "DUP5",
      "path": "36"
    },
    "6134": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17710
      ],
      "op": "ADD",
      "path": "36"
    },
    "6135": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17710
      ],
      "op": "SWAP4",
      "path": "36"
    },
    "6136": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17650,
        17698
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "6137": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17650,
        17698
      ],
      "op": "SWAP3",
      "path": "36"
    },
    "6138": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17710
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "6139": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17710
      ],
      "op": "DUP3",
      "path": "36"
    },
    "6140": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17710
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "6141": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17710
      ],
      "op": "SUB",
      "path": "36"
    },
    "6142": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17710
      ],
      "op": "ADD",
      "path": "36"
    },
    "6143": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17710
      ],
      "op": "DUP2",
      "path": "36"
    },
    "6144": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17650,
        17698
      ],
      "op": "DUP7",
      "path": "36"
    },
    "6145": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17710
      ],
      "op": "GAS",
      "path": "36"
    },
    "6146": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17710
      ],
      "op": "STATICCALL",
      "path": "36"
    },
    "6147": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17710
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "6148": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17710
      ],
      "op": "DUP1",
      "path": "36"
    },
    "6149": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17710
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "6150": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17710
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1813"
    },
    "6153": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17710
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "6154": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17710
      ],
      "op": "RETURNDATASIZE",
      "path": "36"
    },
    "6155": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17710
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "6157": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17710
      ],
      "op": "DUP1",
      "path": "36"
    },
    "6158": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17710
      ],
      "op": "RETURNDATACOPY",
      "path": "36"
    },
    "6159": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17710
      ],
      "op": "RETURNDATASIZE",
      "path": "36"
    },
    "6160": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17710
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "6162": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17710
      ],
      "op": "REVERT",
      "path": "36"
    },
    "6163": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17710
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "6164": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17710
      ],
      "op": "POP",
      "path": "36"
    },
    "6165": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17710
      ],
      "op": "POP",
      "path": "36"
    },
    "6166": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17710
      ],
      "op": "POP",
      "path": "36"
    },
    "6167": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17710
      ],
      "op": "POP",
      "path": "36"
    },
    "6168": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17710
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "6170": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17710
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "6171": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17710
      ],
      "op": "RETURNDATASIZE",
      "path": "36"
    },
    "6172": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17710
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x1F"
    },
    "6174": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17710
      ],
      "op": "NOT",
      "path": "36"
    },
    "6175": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17710
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x1F"
    },
    "6177": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17710
      ],
      "op": "DUP3",
      "path": "36"
    },
    "6178": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17710
      ],
      "op": "ADD",
      "path": "36"
    },
    "6179": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17710
      ],
      "op": "AND",
      "path": "36"
    },
    "6180": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17710
      ],
      "op": "DUP3",
      "path": "36"
    },
    "6181": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17710
      ],
      "op": "ADD",
      "path": "36"
    },
    "6182": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17710
      ],
      "op": "DUP1",
      "path": "36"
    },
    "6183": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17710
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "6185": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17710
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "6186": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17710
      ],
      "op": "POP",
      "path": "36"
    },
    "6187": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17710
      ],
      "op": "DUP2",
      "path": "36"
    },
    "6188": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17710
      ],
      "op": "ADD",
      "path": "36"
    },
    "6189": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17710
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "6190": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17710
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1837"
    },
    "6193": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17710
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "6194": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17710
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "6195": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17710
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2BC7"
    },
    "6198": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "jump": "i",
      "offset": [
        17635,
        17710
      ],
      "op": "JUMP",
      "path": "36"
    },
    "6199": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17635,
        17710
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "6200": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17629,
        17710
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1842"
    },
    "6203": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17629,
        17710
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "6204": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17629,
        17631
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0xA"
    },
    "6206": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17629,
        17710
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2CD0"
    },
    "6209": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "jump": "i",
      "offset": [
        17629,
        17710
      ],
      "op": "JUMP",
      "path": "36"
    },
    "6210": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17629,
        17710
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "6211": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17518
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x9B"
    },
    "6213": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17518
      ],
      "op": "SLOAD",
      "path": "36"
    },
    "6214": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6216": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6218": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6220": {
      "op": "SHL"
    },
    "6221": {
      "op": "SUB"
    },
    "6222": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17538,
        17586
      ],
      "op": "DUP11",
      "path": "36"
    },
    "6223": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17538,
        17586
      ],
      "op": "DUP2",
      "path": "36"
    },
    "6224": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17538,
        17586
      ],
      "op": "AND",
      "path": "36"
    },
    "6225": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17518
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "6227": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17538,
        17586
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "6228": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17538,
        17586
      ],
      "op": "DUP2",
      "path": "36"
    },
    "6229": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17538,
        17586
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "6230": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17538,
        17566
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x9C"
    },
    "6232": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17538,
        17586
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "6234": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17538,
        17586
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "6235": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17538,
        17586
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "6237": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17538,
        17586
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "6238": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17538,
        17586
      ],
      "op": "DUP2",
      "path": "36"
    },
    "6239": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17538,
        17586
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "6240": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17538,
        17586
      ],
      "op": "KECCAK256",
      "path": "36"
    },
    "6241": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17538,
        17586
      ],
      "op": "SLOAD",
      "path": "36"
    },
    "6242": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17587
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "6243": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17587
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "6244": {
      "op": "PUSH4",
      "value": "0xA4B943FB"
    },
    "6249": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "6251": {
      "op": "SHL"
    },
    "6252": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17587
      ],
      "op": "DUP2",
      "path": "36"
    },
    "6253": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17587
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "6254": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17538,
        17586
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "6255": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17538,
        17586
      ],
      "op": "DUP3",
      "path": "36"
    },
    "6256": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17538,
        17586
      ],
      "op": "AND",
      "path": "36"
    },
    "6257": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17587
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x4"
    },
    "6259": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17587
      ],
      "op": "DUP3",
      "path": "36"
    },
    "6260": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17587
      ],
      "op": "ADD",
      "path": "36"
    },
    "6261": {
      "op": "MSTORE"
    },
    "6262": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6264": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6266": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "6268": {
      "op": "SHL"
    },
    "6269": {
      "op": "SUB"
    },
    "6270": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17624
      ],
      "op": "DUP12",
      "path": "36"
    },
    "6271": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17624
      ],
      "op": "AND",
      "path": "36"
    },
    "6272": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17624
      ],
      "op": "SWAP3",
      "path": "36"
    },
    "6273": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6275": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6277": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "6279": {
      "op": "SHL"
    },
    "6280": {
      "op": "SUB"
    },
    "6281": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17606
      ],
      "op": "DUP12",
      "path": "36"
    },
    "6282": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17606
      ],
      "op": "AND",
      "path": "36"
    },
    "6283": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17606
      ],
      "op": "SWAP3",
      "path": "36"
    },
    "6284": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17518
      ],
      "op": "AND",
      "path": "36"
    },
    "6285": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17518
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "6286": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17537
      ],
      "op": "PUSH4",
      "path": "36",
      "value": "0xA4B943FB"
    },
    "6291": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17537
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "6292": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "6294": {
      "op": "ADD"
    },
    "6295": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17587
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "6297": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17587
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "6299": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17587
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "6300": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17587
      ],
      "op": "DUP1",
      "path": "36"
    },
    "6301": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17587
      ],
      "op": "DUP4",
      "path": "36"
    },
    "6302": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17587
      ],
      "op": "SUB",
      "path": "36"
    },
    "6303": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17587
      ],
      "op": "DUP2",
      "path": "36"
    },
    "6304": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17587
      ],
      "op": "DUP7",
      "path": "36"
    },
    "6305": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17587
      ],
      "op": "GAS",
      "path": "36"
    },
    "6306": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17587
      ],
      "op": "STATICCALL",
      "path": "36"
    },
    "6307": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17587
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "6308": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17587
      ],
      "op": "DUP1",
      "path": "36"
    },
    "6309": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17587
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "6310": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17587
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x18B3"
    },
    "6313": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17587
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "6314": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17587
      ],
      "op": "RETURNDATASIZE",
      "path": "36"
    },
    "6315": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17587
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "6317": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17587
      ],
      "op": "DUP1",
      "path": "36"
    },
    "6318": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17587
      ],
      "op": "RETURNDATACOPY",
      "path": "36"
    },
    "6319": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17587
      ],
      "op": "RETURNDATASIZE",
      "path": "36"
    },
    "6320": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17587
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "6322": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17587
      ],
      "op": "REVERT",
      "path": "36"
    },
    "6323": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17587
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "6324": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17587
      ],
      "op": "POP",
      "path": "36"
    },
    "6325": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17587
      ],
      "op": "POP",
      "path": "36"
    },
    "6326": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17587
      ],
      "op": "POP",
      "path": "36"
    },
    "6327": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17587
      ],
      "op": "POP",
      "path": "36"
    },
    "6328": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17587
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "6330": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17587
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "6331": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17587
      ],
      "op": "RETURNDATASIZE",
      "path": "36"
    },
    "6332": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17587
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x1F"
    },
    "6334": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17587
      ],
      "op": "NOT",
      "path": "36"
    },
    "6335": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17587
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x1F"
    },
    "6337": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17587
      ],
      "op": "DUP3",
      "path": "36"
    },
    "6338": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17587
      ],
      "op": "ADD",
      "path": "36"
    },
    "6339": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17587
      ],
      "op": "AND",
      "path": "36"
    },
    "6340": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17587
      ],
      "op": "DUP3",
      "path": "36"
    },
    "6341": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17587
      ],
      "op": "ADD",
      "path": "36"
    },
    "6342": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17587
      ],
      "op": "DUP1",
      "path": "36"
    },
    "6343": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17587
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "6345": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17587
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "6346": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17587
      ],
      "op": "POP",
      "path": "36"
    },
    "6347": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17587
      ],
      "op": "DUP2",
      "path": "36"
    },
    "6348": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17587
      ],
      "op": "ADD",
      "path": "36"
    },
    "6349": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17587
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "6350": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17587
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x18D7"
    },
    "6353": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17587
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "6354": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17587
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "6355": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17587
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2CDF"
    },
    "6358": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "jump": "i",
      "offset": [
        17501,
        17587
      ],
      "op": "JUMP",
      "path": "36"
    },
    "6359": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17587
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "6360": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17606
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x18E1"
    },
    "6363": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17606
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "6364": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17606
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "6365": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17606
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2CF8"
    },
    "6368": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "jump": "i",
      "offset": [
        17501,
        17606
      ],
      "op": "JUMP",
      "path": "36"
    },
    "6369": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17606
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "6370": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17624
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x18EB"
    },
    "6373": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17624
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "6374": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17624
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "6375": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17624
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2CF8"
    },
    "6378": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "jump": "i",
      "offset": [
        17501,
        17624
      ],
      "op": "JUMP",
      "path": "36"
    },
    "6379": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17501,
        17624
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "6380": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17500,
        17711
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x18F5"
    },
    "6383": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17500,
        17711
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "6384": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17500,
        17711
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "6385": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17500,
        17711
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2D2D"
    },
    "6388": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "jump": "i",
      "offset": [
        17500,
        17711
      ],
      "op": "JUMP",
      "path": "36"
    },
    "6389": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17500,
        17711
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "6390": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17464,
        17711
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "6391": {
      "op": "POP"
    },
    "6392": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17725,
        17738
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "6394": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17779,
        17800
      ],
      "op": "DUP3",
      "path": "36"
    },
    "6395": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17742,
        17775
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1906"
    },
    "6398": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17464,
        17711
      ],
      "op": "DUP4",
      "path": "36"
    },
    "6399": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17770,
        17775
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2710"
    },
    "6402": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17742,
        17775
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2CF8"
    },
    "6405": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "jump": "i",
      "offset": [
        17742,
        17775
      ],
      "op": "JUMP",
      "path": "36"
    },
    "6406": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17742,
        17775
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "6407": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17741,
        17800
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1910"
    },
    "6410": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17741,
        17800
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "6411": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17741,
        17800
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "6412": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17741,
        17800
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2D2D"
    },
    "6415": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "jump": "i",
      "offset": [
        17741,
        17800
      ],
      "op": "JUMP",
      "path": "36"
    },
    "6416": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17741,
        17800
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "6417": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17725,
        17800
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "6418": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17725,
        17800
      ],
      "op": "POP",
      "path": "36"
    },
    "6419": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17894,
        17899
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2710"
    },
    "6422": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17885,
        17890
      ],
      "op": "DUP2",
      "path": "36"
    },
    "6423": {
      "branch": 121,
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17885,
        17899
      ],
      "op": "GT",
      "path": "36"
    },
    "6424": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17881,
        18489
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1924"
    },
    "6427": {
      "branch": 121,
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17881,
        18489
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "6428": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17936,
        17937
      ],
      "op": "PUSH1",
      "path": "36",
      "statement": 60,
      "value": "0x0"
    },
    "6430": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17918,
        17937
      ],
      "op": "SWAP4",
      "path": "36"
    },
    "6431": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17918,
        17937
      ],
      "op": "POP",
      "path": "36"
    },
    "6432": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17881,
        18489
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x19F4"
    },
    "6435": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17881,
        18489
      ],
      "op": "JUMP",
      "path": "36"
    },
    "6436": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17881,
        18489
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "6437": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17983,
        17988
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2710"
    },
    "6440": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17975,
        17980
      ],
      "op": "DUP2",
      "path": "36"
    },
    "6441": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17975,
        17988
      ],
      "op": "GT",
      "path": "36"
    },
    "6442": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17974,
        18009
      ],
      "op": "DUP1",
      "path": "36"
    },
    "6443": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17974,
        18009
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "6444": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17974,
        18009
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1937"
    },
    "6447": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17974,
        18009
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "6448": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17974,
        18009
      ],
      "op": "POP",
      "path": "36"
    },
    "6449": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18003,
        18008
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2AF8"
    },
    "6452": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17994,
        17999
      ],
      "op": "DUP2",
      "path": "36"
    },
    "6453": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17994,
        18008
      ],
      "op": "GT",
      "path": "36"
    },
    "6454": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17994,
        18008
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "6455": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17974,
        18009
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "6456": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17970,
        18489
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "6457": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17970,
        18489
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1978"
    },
    "6460": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17970,
        18489
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "6461": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18117,
        18122
      ],
      "op": "PUSH2",
      "path": "36",
      "statement": 61,
      "value": "0x2710"
    },
    "6464": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18070,
        18107
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1952"
    },
    "6467": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18092,
        18107
      ],
      "op": "DUP10",
      "path": "36"
    },
    "6468": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6470": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6472": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "6474": {
      "op": "SHL"
    },
    "6475": {
      "op": "SUB"
    },
    "6476": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18070,
        18107
      ],
      "op": "DUP10",
      "path": "36"
    },
    "6477": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18070,
        18107
      ],
      "op": "AND",
      "path": "36"
    },
    "6478": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18070,
        18107
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2D58"
    },
    "6481": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "jump": "i",
      "offset": [
        18070,
        18107
      ],
      "op": "JUMP",
      "path": "36"
    },
    "6482": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18070,
        18107
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "6483": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18070,
        18113
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x195E"
    },
    "6486": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18070,
        18113
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "6487": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18110,
        18113
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1F4"
    },
    "6490": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18070,
        18113
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2D58"
    },
    "6493": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "jump": "i",
      "offset": [
        18070,
        18113
      ],
      "op": "JUMP",
      "path": "36"
    },
    "6494": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18070,
        18113
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "6495": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18069,
        18122
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1968"
    },
    "6498": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18069,
        18122
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "6499": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18069,
        18122
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "6500": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18069,
        18122
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2D87"
    },
    "6503": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "jump": "i",
      "offset": [
        18069,
        18122
      ],
      "op": "JUMP",
      "path": "36"
    },
    "6504": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18069,
        18122
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "6505": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6507": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6509": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "6511": {
      "op": "SHL"
    },
    "6512": {
      "op": "SUB"
    },
    "6513": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18051,
        18122
      ],
      "op": "AND",
      "path": "36"
    },
    "6514": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18051,
        18122
      ],
      "op": "SWAP4",
      "path": "36"
    },
    "6515": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18051,
        18122
      ],
      "op": "POP",
      "path": "36"
    },
    "6516": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17970,
        18489
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x19F4"
    },
    "6519": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17970,
        18489
      ],
      "op": "JUMP",
      "path": "36"
    },
    "6520": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        17970,
        18489
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "6521": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18168,
        18173
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2AF8"
    },
    "6524": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18160,
        18165
      ],
      "op": "DUP2",
      "path": "36"
    },
    "6525": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18160,
        18173
      ],
      "op": "GT",
      "path": "36"
    },
    "6526": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18159,
        18194
      ],
      "op": "DUP1",
      "path": "36"
    },
    "6527": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18159,
        18194
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "6528": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18159,
        18194
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x198B"
    },
    "6531": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18159,
        18194
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "6532": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18159,
        18194
      ],
      "op": "POP",
      "path": "36"
    },
    "6533": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18188,
        18193
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x30D4"
    },
    "6536": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18179,
        18184
      ],
      "op": "DUP2",
      "path": "36"
    },
    "6537": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18179,
        18193
      ],
      "op": "GT",
      "path": "36"
    },
    "6538": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18179,
        18193
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "6539": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18159,
        18194
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "6540": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18155,
        18489
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "6541": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18155,
        18489
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x19B2"
    },
    "6544": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18155,
        18489
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "6545": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18304,
        18309
      ],
      "op": "PUSH2",
      "path": "36",
      "statement": 62,
      "value": "0x2710"
    },
    "6548": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18256,
        18293
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x19A6"
    },
    "6551": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18278,
        18293
      ],
      "op": "DUP10",
      "path": "36"
    },
    "6552": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6554": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6556": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "6558": {
      "op": "SHL"
    },
    "6559": {
      "op": "SUB"
    },
    "6560": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18256,
        18293
      ],
      "op": "DUP10",
      "path": "36"
    },
    "6561": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18256,
        18293
      ],
      "op": "AND",
      "path": "36"
    },
    "6562": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18256,
        18293
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2D58"
    },
    "6565": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "jump": "i",
      "offset": [
        18256,
        18293
      ],
      "op": "JUMP",
      "path": "36"
    },
    "6566": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18256,
        18293
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "6567": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18256,
        18300
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x195E"
    },
    "6570": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18256,
        18300
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "6571": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18296,
        18300
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x3E8"
    },
    "6574": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18256,
        18300
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2D58"
    },
    "6577": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "jump": "i",
      "offset": [
        18256,
        18300
      ],
      "op": "JUMP",
      "path": "36"
    },
    "6578": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18155,
        18489
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "6579": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18354,
        18359
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x30D4"
    },
    "6582": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18346,
        18351
      ],
      "op": "DUP2",
      "path": "36"
    },
    "6583": {
      "branch": 122,
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18346,
        18359
      ],
      "op": "GT",
      "path": "36"
    },
    "6584": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18342,
        18489
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "6585": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18342,
        18489
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x19F4"
    },
    "6588": {
      "branch": 122,
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18342,
        18489
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "6589": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18469,
        18474
      ],
      "op": "PUSH2",
      "path": "36",
      "statement": 63,
      "value": "0x2710"
    },
    "6592": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18421,
        18458
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x19D2"
    },
    "6595": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18443,
        18458
      ],
      "op": "DUP10",
      "path": "36"
    },
    "6596": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6598": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6600": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "6602": {
      "op": "SHL"
    },
    "6603": {
      "op": "SUB"
    },
    "6604": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18421,
        18458
      ],
      "op": "DUP10",
      "path": "36"
    },
    "6605": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18421,
        18458
      ],
      "op": "AND",
      "path": "36"
    },
    "6606": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18421,
        18458
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2D58"
    },
    "6609": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "jump": "i",
      "offset": [
        18421,
        18458
      ],
      "op": "JUMP",
      "path": "36"
    },
    "6610": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18421,
        18458
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "6611": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18421,
        18465
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x19DE"
    },
    "6614": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18421,
        18465
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "6615": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18461,
        18465
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x7D0"
    },
    "6618": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18421,
        18465
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2D58"
    },
    "6621": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "jump": "i",
      "offset": [
        18421,
        18465
      ],
      "op": "JUMP",
      "path": "36"
    },
    "6622": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18421,
        18465
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "6623": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18420,
        18474
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x19E8"
    },
    "6626": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18420,
        18474
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "6627": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18420,
        18474
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "6628": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18420,
        18474
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2D87"
    },
    "6631": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "jump": "i",
      "offset": [
        18420,
        18474
      ],
      "op": "JUMP",
      "path": "36"
    },
    "6632": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18420,
        18474
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "6633": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6635": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6637": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "6639": {
      "op": "SHL"
    },
    "6640": {
      "op": "SUB"
    },
    "6641": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18402,
        18474
      ],
      "op": "AND",
      "path": "36"
    },
    "6642": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18402,
        18474
      ],
      "op": "SWAP4",
      "path": "36"
    },
    "6643": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18402,
        18474
      ],
      "op": "POP",
      "path": "36"
    },
    "6644": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18342,
        18489
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "6645": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        16966,
        18499
      ],
      "op": "POP",
      "path": "36"
    },
    "6646": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        16966,
        18499
      ],
      "op": "POP",
      "path": "36"
    },
    "6647": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        16966,
        18499
      ],
      "op": "POP",
      "path": "36"
    },
    "6648": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        16790,
        18499
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "6649": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        18515,
        18530
      ],
      "op": "SWAP8",
      "path": "36",
      "statement": 64
    },
    "6650": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "offset": [
        16544,
        18537
      ],
      "op": "SWAP7",
      "path": "36"
    },
    "6651": {
      "op": "POP"
    },
    "6652": {
      "op": "POP"
    },
    "6653": {
      "op": "POP"
    },
    "6654": {
      "op": "POP"
    },
    "6655": {
      "op": "POP"
    },
    "6656": {
      "op": "POP"
    },
    "6657": {
      "op": "POP"
    },
    "6658": {
      "fn": "MockMainnetEscrow.fairRaffleFeeERC20",
      "jump": "o",
      "offset": [
        16544,
        18537
      ],
      "op": "JUMP",
      "path": "36"
    },
    "6659": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2158,
        2356
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "6660": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        1348,
        1354
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x33"
    },
    "6662": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        1348,
        1354
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "6663": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6665": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6667": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6669": {
      "op": "SHL"
    },
    "6670": {
      "op": "SUB"
    },
    "6671": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        1348,
        1354
      ],
      "op": "AND",
      "path": "0"
    },
    "6672": {
      "fn": "ContextUpgradeable._msgSender",
      "offset": [
        929,
        939
      ],
      "op": "CALLER",
      "path": "5"
    },
    "6673": {
      "offset": [
        1488,
        1511
      ],
      "op": "EQ",
      "path": "0"
    },
    "6674": {
      "offset": [
        1480,
        1548
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1A2D"
    },
    "6677": {
      "offset": [
        1480,
        1548
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "6678": {
      "fn": "ContextUpgradeable._msgSender",
      "offset": [
        1480,
        1548
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "6680": {
      "fn": "ContextUpgradeable._msgSender",
      "offset": [
        1480,
        1548
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "6681": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "6685": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "6687": {
      "op": "SHL"
    },
    "6688": {
      "offset": [
        1480,
        1548
      ],
      "op": "DUP2",
      "path": "0"
    },
    "6689": {
      "fn": "ContextUpgradeable._msgSender",
      "offset": [
        1480,
        1548
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "6690": {
      "fn": "ContextUpgradeable._msgSender",
      "offset": [
        1480,
        1548
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "6692": {
      "fn": "ContextUpgradeable._msgSender",
      "offset": [
        1480,
        1548
      ],
      "op": "ADD",
      "path": "0"
    },
    "6693": {
      "fn": "ContextUpgradeable._msgSender",
      "offset": [
        1480,
        1548
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x57F"
    },
    "6696": {
      "fn": "ContextUpgradeable._msgSender",
      "offset": [
        1480,
        1548
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "6697": {
      "fn": "ContextUpgradeable._msgSender",
      "offset": [
        1480,
        1548
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2B92"
    },
    "6700": {
      "fn": "ContextUpgradeable._msgSender",
      "jump": "i",
      "offset": [
        1480,
        1548
      ],
      "op": "JUMP",
      "path": "0"
    },
    "6701": {
      "fn": "ContextUpgradeable._msgSender",
      "offset": [
        1480,
        1548
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "6702": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6704": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6706": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6708": {
      "op": "SHL"
    },
    "6709": {
      "op": "SUB"
    },
    "6710": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2246,
        2268
      ],
      "op": "DUP2",
      "path": "0",
      "statement": 65
    },
    "6711": {
      "branch": 137,
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2246,
        2268
      ],
      "op": "AND",
      "path": "0"
    },
    "6712": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2238,
        2311
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1A92"
    },
    "6715": {
      "branch": 137,
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2238,
        2311
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "6716": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2238,
        2311
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "6718": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2238,
        2311
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "6719": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "6723": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "6725": {
      "op": "SHL"
    },
    "6726": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2238,
        2311
      ],
      "op": "DUP2",
      "path": "0"
    },
    "6727": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2238,
        2311
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "6728": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6730": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2238,
        2311
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "6732": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2238,
        2311
      ],
      "op": "DUP3",
      "path": "0"
    },
    "6733": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2238,
        2311
      ],
      "op": "ADD",
      "path": "0"
    },
    "6734": {
      "op": "MSTORE"
    },
    "6735": {
      "op": "PUSH1",
      "value": "0x26"
    },
    "6737": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "6739": {
      "op": "DUP3"
    },
    "6740": {
      "op": "ADD"
    },
    "6741": {
      "op": "MSTORE"
    },
    "6742": {
      "op": "PUSH32",
      "value": "0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
    },
    "6775": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "6777": {
      "op": "DUP3"
    },
    "6778": {
      "op": "ADD"
    },
    "6779": {
      "op": "MSTORE"
    },
    "6780": {
      "op": "PUSH6",
      "value": "0x646472657373"
    },
    "6787": {
      "op": "PUSH1",
      "value": "0xD0"
    },
    "6789": {
      "op": "SHL"
    },
    "6790": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "6792": {
      "op": "DUP3"
    },
    "6793": {
      "op": "ADD"
    },
    "6794": {
      "op": "MSTORE"
    },
    "6795": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "6797": {
      "op": "ADD"
    },
    "6798": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2238,
        2311
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x57F"
    },
    "6801": {
      "op": "JUMP"
    },
    "6802": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2238,
        2311
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "6803": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2321,
        2349
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 66,
      "value": "0x1A9B"
    },
    "6806": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2340,
        2348
      ],
      "op": "DUP2",
      "path": "0"
    },
    "6807": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2321,
        2339
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x213E"
    },
    "6810": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "jump": "i",
      "offset": [
        2321,
        2349
      ],
      "op": "JUMP",
      "path": "0"
    },
    "6811": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2321,
        2349
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "6812": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2158,
        2356
      ],
      "op": "POP",
      "path": "0"
    },
    "6813": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "jump": "o",
      "offset": [
        2158,
        2356
      ],
      "op": "JUMP",
      "path": "0"
    },
    "6814": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10466,
        11904
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "6815": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10559,
        10577
      ],
      "op": "DUP1",
      "path": "36"
    },
    "6816": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10559,
        10577
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "6817": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10545,
        10556
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "6819": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10587,
        11898
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "6820": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10607,
        10610
      ],
      "op": "DUP2",
      "path": "36"
    },
    "6821": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10603,
        10604
      ],
      "op": "DUP2",
      "path": "36"
    },
    "6822": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10603,
        10610
      ],
      "op": "LT",
      "path": "36"
    },
    "6823": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10587,
        11898
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "6824": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10587,
        11898
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0xD59"
    },
    "6827": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10587,
        11898
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "6828": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10633,
        10644
      ],
      "op": "DUP3",
      "path": "36"
    },
    "6829": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10645,
        10646
      ],
      "op": "DUP2",
      "path": "36"
    },
    "6830": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10633,
        10647
      ],
      "op": "DUP2",
      "path": "36"
    },
    "6831": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10633,
        10647
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "6832": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10633,
        10647
      ],
      "op": "DUP2",
      "path": "36"
    },
    "6833": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10633,
        10647
      ],
      "op": "LT",
      "path": "36"
    },
    "6834": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10633,
        10647
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1ABD"
    },
    "6837": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10633,
        10647
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "6838": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10633,
        10647
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1ABD"
    },
    "6841": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10633,
        10647
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2B63"
    },
    "6844": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "jump": "i",
      "offset": [
        10633,
        10647
      ],
      "op": "JUMP",
      "path": "36"
    },
    "6845": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10633,
        10647
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "6846": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10633,
        10647
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "6848": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10633,
        10647
      ],
      "op": "MUL",
      "path": "36"
    },
    "6849": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10633,
        10647
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "6851": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10633,
        10647
      ],
      "op": "ADD",
      "path": "36"
    },
    "6852": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10633,
        10647
      ],
      "op": "ADD",
      "path": "36"
    },
    "6853": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10633,
        10647
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "6854": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10633,
        10656
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "6856": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10633,
        10656
      ],
      "op": "ADD",
      "path": "36"
    },
    "6857": {
      "branch": 123,
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10633,
        10656
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "6858": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10630,
        11400
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "6859": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10630,
        11400
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1BDE"
    },
    "6862": {
      "branch": 123,
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10630,
        11400
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "6863": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10713,
        10714
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "6865": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6867": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6869": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6871": {
      "op": "SHL"
    },
    "6872": {
      "op": "SUB"
    },
    "6873": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10678,
        10715
      ],
      "op": "AND",
      "path": "36"
    },
    "6874": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10678,
        10689
      ],
      "op": "DUP4",
      "path": "36"
    },
    "6875": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10690,
        10691
      ],
      "op": "DUP3",
      "path": "36"
    },
    "6876": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10678,
        10692
      ],
      "op": "DUP2",
      "path": "36"
    },
    "6877": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10678,
        10692
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "6878": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10678,
        10692
      ],
      "op": "DUP2",
      "path": "36"
    },
    "6879": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10678,
        10692
      ],
      "op": "LT",
      "path": "36"
    },
    "6880": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10678,
        10692
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1AEB"
    },
    "6883": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10678,
        10692
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "6884": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10678,
        10692
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1AEB"
    },
    "6887": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10678,
        10692
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2B63"
    },
    "6890": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "jump": "i",
      "offset": [
        10678,
        10692
      ],
      "op": "JUMP",
      "path": "36"
    },
    "6891": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10678,
        10692
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "6892": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10678,
        10692
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "6894": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10678,
        10692
      ],
      "op": "MUL",
      "path": "36"
    },
    "6895": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10678,
        10692
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "6897": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10678,
        10692
      ],
      "op": "ADD",
      "path": "36"
    },
    "6898": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10678,
        10692
      ],
      "op": "ADD",
      "path": "36"
    },
    "6899": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10678,
        10692
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "6900": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10678,
        10701
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "6902": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10678,
        10701
      ],
      "op": "ADD",
      "path": "36"
    },
    "6903": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10678,
        10701
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "6904": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6906": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6908": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6910": {
      "op": "SHL"
    },
    "6911": {
      "op": "SUB"
    },
    "6912": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10678,
        10715
      ],
      "op": "AND",
      "path": "36"
    },
    "6913": {
      "branch": 124,
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10678,
        10715
      ],
      "op": "EQ",
      "path": "36"
    },
    "6914": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10675,
        10887
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1BD9"
    },
    "6917": {
      "branch": 124,
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10675,
        10887
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "6918": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10746,
        10757
      ],
      "op": "DUP3",
      "path": "36",
      "statement": 67
    },
    "6919": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10758,
        10759
      ],
      "op": "DUP2",
      "path": "36"
    },
    "6920": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10746,
        10760
      ],
      "op": "DUP2",
      "path": "36"
    },
    "6921": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10746,
        10760
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "6922": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10746,
        10760
      ],
      "op": "DUP2",
      "path": "36"
    },
    "6923": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10746,
        10760
      ],
      "op": "LT",
      "path": "36"
    },
    "6924": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10746,
        10760
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1B17"
    },
    "6927": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10746,
        10760
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "6928": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10746,
        10760
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1B17"
    },
    "6931": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10746,
        10760
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2B63"
    },
    "6934": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "jump": "i",
      "offset": [
        10746,
        10760
      ],
      "op": "JUMP",
      "path": "36"
    },
    "6935": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10746,
        10760
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "6936": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10746,
        10760
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "6938": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10746,
        10760
      ],
      "op": "MUL",
      "path": "36"
    },
    "6939": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10746,
        10760
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "6941": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10746,
        10760
      ],
      "op": "ADD",
      "path": "36"
    },
    "6942": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10746,
        10760
      ],
      "op": "ADD",
      "path": "36"
    },
    "6943": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10746,
        10760
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "6944": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10746,
        10774
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "6946": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10746,
        10774
      ],
      "op": "ADD",
      "path": "36"
    },
    "6947": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10746,
        10774
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "6948": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6950": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6952": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6954": {
      "op": "SHL"
    },
    "6955": {
      "op": "SUB"
    },
    "6956": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10738,
        10788
      ],
      "op": "AND",
      "path": "36"
    },
    "6957": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10738,
        10788
      ],
      "op": "PUSH4",
      "path": "36",
      "value": "0x23B872DD"
    },
    "6962": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10797,
        10801
      ],
      "op": "ADDRESS",
      "path": "36"
    },
    "6963": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10804,
        10815
      ],
      "op": "DUP6",
      "path": "36"
    },
    "6964": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10816,
        10817
      ],
      "op": "DUP5",
      "path": "36"
    },
    "6965": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10804,
        10818
      ],
      "op": "DUP2",
      "path": "36"
    },
    "6966": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10804,
        10818
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "6967": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10804,
        10818
      ],
      "op": "DUP2",
      "path": "36"
    },
    "6968": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10804,
        10818
      ],
      "op": "LT",
      "path": "36"
    },
    "6969": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10804,
        10818
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1B44"
    },
    "6972": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10804,
        10818
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "6973": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10804,
        10818
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1B44"
    },
    "6976": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10804,
        10818
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2B63"
    },
    "6979": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "jump": "i",
      "offset": [
        10804,
        10818
      ],
      "op": "JUMP",
      "path": "36"
    },
    "6980": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10804,
        10818
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "6981": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10804,
        10818
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "6983": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10804,
        10818
      ],
      "op": "MUL",
      "path": "36"
    },
    "6984": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10804,
        10818
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "6986": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10804,
        10818
      ],
      "op": "ADD",
      "path": "36"
    },
    "6987": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10804,
        10818
      ],
      "op": "ADD",
      "path": "36"
    },
    "6988": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10804,
        10818
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "6989": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10804,
        10827
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "6991": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10804,
        10827
      ],
      "op": "ADD",
      "path": "36"
    },
    "6992": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10804,
        10827
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "6993": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10829,
        10840
      ],
      "op": "DUP7",
      "path": "36"
    },
    "6994": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10841,
        10842
      ],
      "op": "DUP6",
      "path": "36"
    },
    "6995": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10829,
        10843
      ],
      "op": "DUP2",
      "path": "36"
    },
    "6996": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10829,
        10843
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "6997": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10829,
        10843
      ],
      "op": "DUP2",
      "path": "36"
    },
    "6998": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10829,
        10843
      ],
      "op": "LT",
      "path": "36"
    },
    "6999": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10829,
        10843
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1B62"
    },
    "7002": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10829,
        10843
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "7003": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10829,
        10843
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1B62"
    },
    "7006": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10829,
        10843
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2B63"
    },
    "7009": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "jump": "i",
      "offset": [
        10829,
        10843
      ],
      "op": "JUMP",
      "path": "36"
    },
    "7010": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10829,
        10843
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "7011": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10829,
        10843
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "7013": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10829,
        10843
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "7014": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10829,
        10843
      ],
      "op": "DUP2",
      "path": "36"
    },
    "7015": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10829,
        10843
      ],
      "op": "MUL",
      "path": "36"
    },
    "7016": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10829,
        10843
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "7017": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10829,
        10843
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "7018": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10829,
        10843
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "7019": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10829,
        10843
      ],
      "op": "ADD",
      "path": "36"
    },
    "7020": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10829,
        10843
      ],
      "op": "ADD",
      "path": "36"
    },
    "7021": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10829,
        10843
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "7022": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10829,
        10867
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x60"
    },
    "7024": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10829,
        10867
      ],
      "op": "ADD",
      "path": "36"
    },
    "7025": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10829,
        10867
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "7026": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10738,
        10868
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "7028": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10738,
        10868
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "7029": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7031": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7033": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "7035": {
      "op": "SHL"
    },
    "7036": {
      "op": "SUB"
    },
    "7037": {
      "op": "NOT"
    },
    "7038": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10738,
        10868
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0xE0"
    },
    "7040": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10738,
        10868
      ],
      "op": "DUP7",
      "path": "36"
    },
    "7041": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10738,
        10868
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "7042": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10738,
        10868
      ],
      "op": "SHL",
      "path": "36"
    },
    "7043": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10738,
        10868
      ],
      "op": "AND",
      "path": "36"
    },
    "7044": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10738,
        10868
      ],
      "op": "DUP2",
      "path": "36"
    },
    "7045": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10738,
        10868
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "7046": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7048": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7050": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "7052": {
      "op": "SHL"
    },
    "7053": {
      "op": "SUB"
    },
    "7054": {
      "op": "SWAP4"
    },
    "7055": {
      "op": "DUP5"
    },
    "7056": {
      "op": "AND"
    },
    "7057": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10738,
        10868
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x4"
    },
    "7059": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10738,
        10868
      ],
      "op": "DUP3",
      "path": "36"
    },
    "7060": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10738,
        10868
      ],
      "op": "ADD",
      "path": "36"
    },
    "7061": {
      "op": "MSTORE"
    },
    "7062": {
      "op": "SWAP3"
    },
    "7063": {
      "op": "SWAP1"
    },
    "7064": {
      "op": "SWAP2"
    },
    "7065": {
      "op": "AND"
    },
    "7066": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "7068": {
      "op": "DUP4"
    },
    "7069": {
      "op": "ADD"
    },
    "7070": {
      "op": "MSTORE"
    },
    "7071": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "7073": {
      "op": "DUP3"
    },
    "7074": {
      "op": "ADD"
    },
    "7075": {
      "op": "MSTORE"
    },
    "7076": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "7078": {
      "op": "ADD"
    },
    "7079": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10738,
        10868
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "7081": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10738,
        10868
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "7083": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10738,
        10868
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "7084": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10738,
        10868
      ],
      "op": "DUP1",
      "path": "36"
    },
    "7085": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10738,
        10868
      ],
      "op": "DUP4",
      "path": "36"
    },
    "7086": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10738,
        10868
      ],
      "op": "SUB",
      "path": "36"
    },
    "7087": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10738,
        10868
      ],
      "op": "DUP2",
      "path": "36"
    },
    "7088": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10738,
        10868
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "7090": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10738,
        10868
      ],
      "op": "DUP8",
      "path": "36"
    },
    "7091": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10738,
        10868
      ],
      "op": "DUP1",
      "path": "36"
    },
    "7092": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10738,
        10868
      ],
      "op": "EXTCODESIZE",
      "path": "36"
    },
    "7093": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10738,
        10868
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "7094": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10738,
        10868
      ],
      "op": "DUP1",
      "path": "36"
    },
    "7095": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10738,
        10868
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "7096": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10738,
        10868
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1BC0"
    },
    "7099": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10738,
        10868
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "7100": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10738,
        10868
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "7102": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10738,
        10868
      ],
      "op": "DUP1",
      "path": "36"
    },
    "7103": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10738,
        10868
      ],
      "op": "REVERT",
      "path": "36"
    },
    "7104": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10738,
        10868
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "7105": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10738,
        10868
      ],
      "op": "POP",
      "path": "36"
    },
    "7106": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10738,
        10868
      ],
      "op": "GAS",
      "path": "36"
    },
    "7107": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10738,
        10868
      ],
      "op": "CALL",
      "path": "36"
    },
    "7108": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10738,
        10868
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "7109": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10738,
        10868
      ],
      "op": "DUP1",
      "path": "36"
    },
    "7110": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10738,
        10868
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "7111": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10738,
        10868
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1BD4"
    },
    "7114": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10738,
        10868
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "7115": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10738,
        10868
      ],
      "op": "RETURNDATASIZE",
      "path": "36"
    },
    "7116": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10738,
        10868
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "7118": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10738,
        10868
      ],
      "op": "DUP1",
      "path": "36"
    },
    "7119": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10738,
        10868
      ],
      "op": "RETURNDATACOPY",
      "path": "36"
    },
    "7120": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10738,
        10868
      ],
      "op": "RETURNDATASIZE",
      "path": "36"
    },
    "7121": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10738,
        10868
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "7123": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10738,
        10868
      ],
      "op": "REVERT",
      "path": "36"
    },
    "7124": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10738,
        10868
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "7125": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10738,
        10868
      ],
      "op": "POP",
      "path": "36"
    },
    "7126": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10738,
        10868
      ],
      "op": "POP",
      "path": "36"
    },
    "7127": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10738,
        10868
      ],
      "op": "POP",
      "path": "36"
    },
    "7128": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10738,
        10868
      ],
      "op": "POP",
      "path": "36"
    },
    "7129": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10675,
        10887
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "7130": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10630,
        11400
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1D05"
    },
    "7133": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10630,
        11400
      ],
      "op": "JUMP",
      "path": "36"
    },
    "7134": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10630,
        11400
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "7135": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10974,
        10975
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "7137": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7139": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7141": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "7143": {
      "op": "SHL"
    },
    "7144": {
      "op": "SUB"
    },
    "7145": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10939,
        10976
      ],
      "op": "AND",
      "path": "36"
    },
    "7146": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10939,
        10950
      ],
      "op": "DUP4",
      "path": "36"
    },
    "7147": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10951,
        10952
      ],
      "op": "DUP3",
      "path": "36"
    },
    "7148": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10939,
        10953
      ],
      "op": "DUP2",
      "path": "36"
    },
    "7149": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10939,
        10953
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "7150": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10939,
        10953
      ],
      "op": "DUP2",
      "path": "36"
    },
    "7151": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10939,
        10953
      ],
      "op": "LT",
      "path": "36"
    },
    "7152": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10939,
        10953
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1BFB"
    },
    "7155": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10939,
        10953
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "7156": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10939,
        10953
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1BFB"
    },
    "7159": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10939,
        10953
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2B63"
    },
    "7162": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "jump": "i",
      "offset": [
        10939,
        10953
      ],
      "op": "JUMP",
      "path": "36"
    },
    "7163": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10939,
        10953
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "7164": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10939,
        10953
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "7166": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10939,
        10953
      ],
      "op": "MUL",
      "path": "36"
    },
    "7167": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10939,
        10953
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "7169": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10939,
        10953
      ],
      "op": "ADD",
      "path": "36"
    },
    "7170": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10939,
        10953
      ],
      "op": "ADD",
      "path": "36"
    },
    "7171": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10939,
        10953
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "7172": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10939,
        10962
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "7174": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10939,
        10962
      ],
      "op": "ADD",
      "path": "36"
    },
    "7175": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10939,
        10962
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "7176": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7178": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7180": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "7182": {
      "op": "SHL"
    },
    "7183": {
      "op": "SUB"
    },
    "7184": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10939,
        10976
      ],
      "op": "AND",
      "path": "36"
    },
    "7185": {
      "branch": 125,
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10939,
        10976
      ],
      "op": "EQ",
      "path": "36"
    },
    "7186": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10936,
        11386
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1D05"
    },
    "7189": {
      "branch": 125,
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10936,
        11386
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "7190": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11042,
        11043
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "7192": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7194": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7196": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "7198": {
      "op": "SHL"
    },
    "7199": {
      "op": "SUB"
    },
    "7200": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11002,
        11044
      ],
      "op": "AND",
      "path": "36"
    },
    "7201": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11002,
        11013
      ],
      "op": "DUP4",
      "path": "36"
    },
    "7202": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11014,
        11015
      ],
      "op": "DUP3",
      "path": "36"
    },
    "7203": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11002,
        11016
      ],
      "op": "DUP2",
      "path": "36"
    },
    "7204": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11002,
        11016
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "7205": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11002,
        11016
      ],
      "op": "DUP2",
      "path": "36"
    },
    "7206": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11002,
        11016
      ],
      "op": "LT",
      "path": "36"
    },
    "7207": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11002,
        11016
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1C32"
    },
    "7210": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11002,
        11016
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "7211": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11002,
        11016
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1C32"
    },
    "7214": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11002,
        11016
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2B63"
    },
    "7217": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "jump": "i",
      "offset": [
        11002,
        11016
      ],
      "op": "JUMP",
      "path": "36"
    },
    "7218": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11002,
        11016
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "7219": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11002,
        11016
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "7221": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11002,
        11016
      ],
      "op": "MUL",
      "path": "36"
    },
    "7222": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11002,
        11016
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "7224": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11002,
        11016
      ],
      "op": "ADD",
      "path": "36"
    },
    "7225": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11002,
        11016
      ],
      "op": "ADD",
      "path": "36"
    },
    "7226": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11002,
        11016
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "7227": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11002,
        11030
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "7229": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11002,
        11030
      ],
      "op": "ADD",
      "path": "36"
    },
    "7230": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11002,
        11030
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "7231": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7233": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7235": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "7237": {
      "op": "SHL"
    },
    "7238": {
      "op": "SUB"
    },
    "7239": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11002,
        11044
      ],
      "op": "AND",
      "path": "36"
    },
    "7240": {
      "branch": 126,
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11002,
        11044
      ],
      "op": "SUB",
      "path": "36"
    },
    "7241": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10999,
        11368
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1C90"
    },
    "7244": {
      "branch": 126,
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10999,
        11368
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "7245": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11071,
        11156
      ],
      "op": "PUSH2",
      "path": "36",
      "statement": 68,
      "value": "0x1BD9"
    },
    "7248": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11092,
        11103
      ],
      "op": "DUP4",
      "path": "36"
    },
    "7249": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11104,
        11105
      ],
      "op": "DUP3",
      "path": "36"
    },
    "7250": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11092,
        11106
      ],
      "op": "DUP2",
      "path": "36"
    },
    "7251": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11092,
        11106
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "7252": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11092,
        11106
      ],
      "op": "DUP2",
      "path": "36"
    },
    "7253": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11092,
        11106
      ],
      "op": "LT",
      "path": "36"
    },
    "7254": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11092,
        11106
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1C61"
    },
    "7257": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11092,
        11106
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "7258": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11092,
        11106
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1C61"
    },
    "7261": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11092,
        11106
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2B63"
    },
    "7264": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "jump": "i",
      "offset": [
        11092,
        11106
      ],
      "op": "JUMP",
      "path": "36"
    },
    "7265": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11092,
        11106
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "7266": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11092,
        11106
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "7268": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11092,
        11106
      ],
      "op": "MUL",
      "path": "36"
    },
    "7269": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11092,
        11106
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "7271": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11092,
        11106
      ],
      "op": "ADD",
      "path": "36"
    },
    "7272": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11092,
        11106
      ],
      "op": "ADD",
      "path": "36"
    },
    "7273": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11092,
        11106
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "7274": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11092,
        11115
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "7276": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11092,
        11115
      ],
      "op": "ADD",
      "path": "36"
    },
    "7277": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11092,
        11115
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "7278": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11117,
        11128
      ],
      "op": "DUP5",
      "path": "36"
    },
    "7279": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11129,
        11130
      ],
      "op": "DUP4",
      "path": "36"
    },
    "7280": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11117,
        11131
      ],
      "op": "DUP2",
      "path": "36"
    },
    "7281": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11117,
        11131
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "7282": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11117,
        11131
      ],
      "op": "DUP2",
      "path": "36"
    },
    "7283": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11117,
        11131
      ],
      "op": "LT",
      "path": "36"
    },
    "7284": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11117,
        11131
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1C7F"
    },
    "7287": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11117,
        11131
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "7288": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11117,
        11131
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1C7F"
    },
    "7291": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11117,
        11131
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2B63"
    },
    "7294": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "jump": "i",
      "offset": [
        11117,
        11131
      ],
      "op": "JUMP",
      "path": "36"
    },
    "7295": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11117,
        11131
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "7296": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11117,
        11131
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "7298": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11117,
        11131
      ],
      "op": "MUL",
      "path": "36"
    },
    "7299": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11117,
        11131
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "7301": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11117,
        11131
      ],
      "op": "ADD",
      "path": "36"
    },
    "7302": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11117,
        11131
      ],
      "op": "ADD",
      "path": "36"
    },
    "7303": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11117,
        11131
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "7304": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11117,
        11155
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x60"
    },
    "7306": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11117,
        11155
      ],
      "op": "ADD",
      "path": "36"
    },
    "7307": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11117,
        11155
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "7308": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11071,
        11091
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1EAC"
    },
    "7311": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "jump": "i",
      "offset": [
        11071,
        11156
      ],
      "op": "JUMP",
      "path": "36"
    },
    "7312": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10999,
        11368
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "7313": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11231,
        11345
      ],
      "op": "PUSH2",
      "path": "36",
      "statement": 69,
      "value": "0x1D05"
    },
    "7316": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11281,
        11292
      ],
      "op": "DUP4",
      "path": "36"
    },
    "7317": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11293,
        11294
      ],
      "op": "DUP3",
      "path": "36"
    },
    "7318": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11281,
        11295
      ],
      "op": "DUP2",
      "path": "36"
    },
    "7319": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11281,
        11295
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "7320": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11281,
        11295
      ],
      "op": "DUP2",
      "path": "36"
    },
    "7321": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11281,
        11295
      ],
      "op": "LT",
      "path": "36"
    },
    "7322": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11281,
        11295
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1CA5"
    },
    "7325": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11281,
        11295
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "7326": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11281,
        11295
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1CA5"
    },
    "7329": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11281,
        11295
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2B63"
    },
    "7332": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "jump": "i",
      "offset": [
        11281,
        11295
      ],
      "op": "JUMP",
      "path": "36"
    },
    "7333": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11281,
        11295
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "7334": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11281,
        11295
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "7336": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11281,
        11295
      ],
      "op": "MUL",
      "path": "36"
    },
    "7337": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11281,
        11295
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "7339": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11281,
        11295
      ],
      "op": "ADD",
      "path": "36"
    },
    "7340": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11281,
        11295
      ],
      "op": "ADD",
      "path": "36"
    },
    "7341": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11281,
        11295
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "7342": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11281,
        11304
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "7344": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11281,
        11304
      ],
      "op": "ADD",
      "path": "36"
    },
    "7345": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11281,
        11304
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "7346": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11306,
        11317
      ],
      "op": "DUP5",
      "path": "36"
    },
    "7347": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11318,
        11319
      ],
      "op": "DUP4",
      "path": "36"
    },
    "7348": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11306,
        11320
      ],
      "op": "DUP2",
      "path": "36"
    },
    "7349": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11306,
        11320
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "7350": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11306,
        11320
      ],
      "op": "DUP2",
      "path": "36"
    },
    "7351": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11306,
        11320
      ],
      "op": "LT",
      "path": "36"
    },
    "7352": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11306,
        11320
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1CC3"
    },
    "7355": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11306,
        11320
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "7356": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11306,
        11320
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1CC3"
    },
    "7359": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11306,
        11320
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2B63"
    },
    "7362": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "jump": "i",
      "offset": [
        11306,
        11320
      ],
      "op": "JUMP",
      "path": "36"
    },
    "7363": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11306,
        11320
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "7364": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11306,
        11320
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "7366": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11306,
        11320
      ],
      "op": "MUL",
      "path": "36"
    },
    "7367": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11306,
        11320
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "7369": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11306,
        11320
      ],
      "op": "ADD",
      "path": "36"
    },
    "7370": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11306,
        11320
      ],
      "op": "ADD",
      "path": "36"
    },
    "7371": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11306,
        11320
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "7372": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11306,
        11344
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x60"
    },
    "7374": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11306,
        11344
      ],
      "op": "ADD",
      "path": "36"
    },
    "7375": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11306,
        11344
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "7376": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11238,
        11249
      ],
      "op": "DUP6",
      "path": "36"
    },
    "7377": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11250,
        11251
      ],
      "op": "DUP5",
      "path": "36"
    },
    "7378": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11238,
        11252
      ],
      "op": "DUP2",
      "path": "36"
    },
    "7379": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11238,
        11252
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "7380": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11238,
        11252
      ],
      "op": "DUP2",
      "path": "36"
    },
    "7381": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11238,
        11252
      ],
      "op": "LT",
      "path": "36"
    },
    "7382": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11238,
        11252
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1CE1"
    },
    "7385": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11238,
        11252
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "7386": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11238,
        11252
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1CE1"
    },
    "7389": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11238,
        11252
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2B63"
    },
    "7392": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "jump": "i",
      "offset": [
        11238,
        11252
      ],
      "op": "JUMP",
      "path": "36"
    },
    "7393": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11238,
        11252
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "7394": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11238,
        11252
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "7396": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11238,
        11252
      ],
      "op": "MUL",
      "path": "36"
    },
    "7397": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11238,
        11252
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "7399": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11238,
        11252
      ],
      "op": "ADD",
      "path": "36"
    },
    "7400": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11238,
        11252
      ],
      "op": "ADD",
      "path": "36"
    },
    "7401": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11238,
        11252
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "7402": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11238,
        11266
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "7404": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11238,
        11266
      ],
      "op": "ADD",
      "path": "36"
    },
    "7405": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11238,
        11266
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "7406": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7408": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7410": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "7412": {
      "op": "SHL"
    },
    "7413": {
      "op": "SUB"
    },
    "7414": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11231,
        11280
      ],
      "op": "AND",
      "path": "36"
    },
    "7415": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11231,
        11280
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1FF0"
    },
    "7418": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11231,
        11280
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "7419": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11231,
        11345
      ],
      "op": "SWAP3",
      "path": "36"
    },
    "7420": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11231,
        11345
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "7421": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11231,
        11345
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "7422": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11231,
        11345
      ],
      "op": "PUSH4",
      "path": "36",
      "value": "0xFFFFFFFF"
    },
    "7427": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11231,
        11345
      ],
      "op": "AND",
      "path": "36"
    },
    "7428": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "jump": "i",
      "offset": [
        11231,
        11345
      ],
      "op": "JUMP",
      "path": "36"
    },
    "7429": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11231,
        11345
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "7430": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11462,
        11463
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "7432": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11416,
        11427
      ],
      "op": "DUP4",
      "path": "36"
    },
    "7433": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11428,
        11429
      ],
      "op": "DUP3",
      "path": "36"
    },
    "7434": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11416,
        11430
      ],
      "op": "DUP2",
      "path": "36"
    },
    "7435": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11416,
        11430
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "7436": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11416,
        11430
      ],
      "op": "DUP2",
      "path": "36"
    },
    "7437": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11416,
        11430
      ],
      "op": "LT",
      "path": "36"
    },
    "7438": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11416,
        11430
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1D19"
    },
    "7441": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11416,
        11430
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "7442": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11416,
        11430
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1D19"
    },
    "7445": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11416,
        11430
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2B63"
    },
    "7448": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "jump": "i",
      "offset": [
        11416,
        11430
      ],
      "op": "JUMP",
      "path": "36"
    },
    "7449": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11416,
        11430
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "7450": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11416,
        11430
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "7452": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11416,
        11430
      ],
      "op": "MUL",
      "path": "36"
    },
    "7453": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11416,
        11430
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "7455": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11416,
        11430
      ],
      "op": "ADD",
      "path": "36"
    },
    "7456": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11416,
        11430
      ],
      "op": "ADD",
      "path": "36"
    },
    "7457": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11416,
        11430
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "7458": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11416,
        11459
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x80"
    },
    "7460": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11416,
        11459
      ],
      "op": "ADD",
      "path": "36"
    },
    "7461": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11416,
        11459
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "7462": {
      "branch": 127,
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11416,
        11463
      ],
      "op": "GT",
      "path": "36"
    },
    "7463": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11413,
        11594
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "7464": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11413,
        11594
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1DA0"
    },
    "7467": {
      "branch": 127,
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11413,
        11594
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "7468": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11536,
        11547
      ],
      "op": "DUP3",
      "path": "36",
      "statement": 70
    },
    "7469": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11548,
        11549
      ],
      "op": "DUP2",
      "path": "36"
    },
    "7470": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11536,
        11550
      ],
      "op": "DUP2",
      "path": "36"
    },
    "7471": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11536,
        11550
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "7472": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11536,
        11550
      ],
      "op": "DUP2",
      "path": "36"
    },
    "7473": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11536,
        11550
      ],
      "op": "LT",
      "path": "36"
    },
    "7474": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11536,
        11550
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1D3D"
    },
    "7477": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11536,
        11550
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "7478": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11536,
        11550
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1D3D"
    },
    "7481": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11536,
        11550
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2B63"
    },
    "7484": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "jump": "i",
      "offset": [
        11536,
        11550
      ],
      "op": "JUMP",
      "path": "36"
    },
    "7485": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11536,
        11550
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "7486": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11536,
        11550
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "7488": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11536,
        11550
      ],
      "op": "MUL",
      "path": "36"
    },
    "7489": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11536,
        11550
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "7491": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11536,
        11550
      ],
      "op": "ADD",
      "path": "36"
    },
    "7492": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11536,
        11550
      ],
      "op": "ADD",
      "path": "36"
    },
    "7493": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11536,
        11550
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "7494": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11536,
        11579
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x80"
    },
    "7496": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11536,
        11579
      ],
      "op": "ADD",
      "path": "36"
    },
    "7497": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11536,
        11579
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "7498": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11482,
        11502
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x99"
    },
    "7500": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11482,
        11532
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "7502": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11503,
        11514
      ],
      "op": "DUP6",
      "path": "36"
    },
    "7503": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11515,
        11516
      ],
      "op": "DUP5",
      "path": "36"
    },
    "7504": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11503,
        11517
      ],
      "op": "DUP2",
      "path": "36"
    },
    "7505": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11503,
        11517
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "7506": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11503,
        11517
      ],
      "op": "DUP2",
      "path": "36"
    },
    "7507": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11503,
        11517
      ],
      "op": "LT",
      "path": "36"
    },
    "7508": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11503,
        11517
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1D5F"
    },
    "7511": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11503,
        11517
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "7512": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11503,
        11517
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1D5F"
    },
    "7515": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11503,
        11517
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2B63"
    },
    "7518": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "jump": "i",
      "offset": [
        11503,
        11517
      ],
      "op": "JUMP",
      "path": "36"
    },
    "7519": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11503,
        11517
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "7520": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11503,
        11517
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "7522": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11503,
        11517
      ],
      "op": "MUL",
      "path": "36"
    },
    "7523": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11503,
        11517
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "7525": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11503,
        11517
      ],
      "op": "ADD",
      "path": "36"
    },
    "7526": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11503,
        11517
      ],
      "op": "ADD",
      "path": "36"
    },
    "7527": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11503,
        11517
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "7528": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11503,
        11531
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "7530": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11503,
        11531
      ],
      "op": "ADD",
      "path": "36"
    },
    "7531": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11503,
        11531
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "7532": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7534": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7536": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "7538": {
      "op": "SHL"
    },
    "7539": {
      "op": "SUB"
    },
    "7540": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11482,
        11532
      ],
      "op": "AND",
      "path": "36"
    },
    "7541": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7543": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7545": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "7547": {
      "op": "SHL"
    },
    "7548": {
      "op": "SUB"
    },
    "7549": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11482,
        11532
      ],
      "op": "AND",
      "path": "36"
    },
    "7550": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11482,
        11532
      ],
      "op": "DUP2",
      "path": "36"
    },
    "7551": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11482,
        11532
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "7552": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11482,
        11532
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "7554": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11482,
        11532
      ],
      "op": "ADD",
      "path": "36"
    },
    "7555": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11482,
        11532
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "7556": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11482,
        11532
      ],
      "op": "DUP2",
      "path": "36"
    },
    "7557": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11482,
        11532
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "7558": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11482,
        11532
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "7560": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11482,
        11532
      ],
      "op": "ADD",
      "path": "36"
    },
    "7561": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11482,
        11532
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "7563": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11482,
        11532
      ],
      "op": "KECCAK256",
      "path": "36"
    },
    "7564": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11482,
        11532
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "7566": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11482,
        11579
      ],
      "op": "DUP3",
      "path": "36"
    },
    "7567": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11482,
        11579
      ],
      "op": "DUP3",
      "path": "36"
    },
    "7568": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11482,
        11579
      ],
      "op": "SLOAD",
      "path": "36"
    },
    "7569": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11482,
        11579
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1D9A"
    },
    "7572": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11482,
        11579
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "7573": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11482,
        11579
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "7574": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11482,
        11579
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2A92"
    },
    "7577": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "jump": "i",
      "offset": [
        11482,
        11579
      ],
      "op": "JUMP",
      "path": "36"
    },
    "7578": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11482,
        11579
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "7579": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11482,
        11579
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "7580": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11482,
        11579
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "7581": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11482,
        11579
      ],
      "op": "SSTORE",
      "path": "36"
    },
    "7582": {
      "op": "POP"
    },
    "7583": {
      "op": "POP"
    },
    "7584": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11413,
        11594
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "7585": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11612,
        11887
      ],
      "op": "PUSH32",
      "path": "36",
      "statement": 71,
      "value": "0xFDF87137985FCE097C2059F7E3BD28B9104995CAD66709FDECBAA5E8E48DA9AF"
    },
    "7618": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11646,
        11657
      ],
      "op": "DUP4",
      "path": "36"
    },
    "7619": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11658,
        11659
      ],
      "op": "DUP3",
      "path": "36"
    },
    "7620": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11646,
        11660
      ],
      "op": "DUP2",
      "path": "36"
    },
    "7621": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11646,
        11660
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "7622": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11646,
        11660
      ],
      "op": "DUP2",
      "path": "36"
    },
    "7623": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11646,
        11660
      ],
      "op": "LT",
      "path": "36"
    },
    "7624": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11646,
        11660
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1DD3"
    },
    "7627": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11646,
        11660
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "7628": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11646,
        11660
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1DD3"
    },
    "7631": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11646,
        11660
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2B63"
    },
    "7634": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "jump": "i",
      "offset": [
        11646,
        11660
      ],
      "op": "JUMP",
      "path": "36"
    },
    "7635": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11646,
        11660
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "7636": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11646,
        11660
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "7638": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11646,
        11660
      ],
      "op": "MUL",
      "path": "36"
    },
    "7639": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11646,
        11660
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "7641": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11646,
        11660
      ],
      "op": "ADD",
      "path": "36"
    },
    "7642": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11646,
        11660
      ],
      "op": "ADD",
      "path": "36"
    },
    "7643": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11646,
        11660
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "7644": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11646,
        11669
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "7646": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11646,
        11669
      ],
      "op": "ADD",
      "path": "36"
    },
    "7647": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11646,
        11669
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "7648": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11687,
        11698
      ],
      "op": "DUP5",
      "path": "36"
    },
    "7649": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11699,
        11700
      ],
      "op": "DUP4",
      "path": "36"
    },
    "7650": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11687,
        11701
      ],
      "op": "DUP2",
      "path": "36"
    },
    "7651": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11687,
        11701
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "7652": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11687,
        11701
      ],
      "op": "DUP2",
      "path": "36"
    },
    "7653": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11687,
        11701
      ],
      "op": "LT",
      "path": "36"
    },
    "7654": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11687,
        11701
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1DF1"
    },
    "7657": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11687,
        11701
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "7658": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11687,
        11701
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1DF1"
    },
    "7661": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11687,
        11701
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2B63"
    },
    "7664": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "jump": "i",
      "offset": [
        11687,
        11701
      ],
      "op": "JUMP",
      "path": "36"
    },
    "7665": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11687,
        11701
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "7666": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11687,
        11701
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "7668": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11687,
        11701
      ],
      "op": "MUL",
      "path": "36"
    },
    "7669": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11687,
        11701
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "7671": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11687,
        11701
      ],
      "op": "ADD",
      "path": "36"
    },
    "7672": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11687,
        11701
      ],
      "op": "ADD",
      "path": "36"
    },
    "7673": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11687,
        11701
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "7674": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11687,
        11715
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "7676": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11687,
        11715
      ],
      "op": "ADD",
      "path": "36"
    },
    "7677": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11687,
        11715
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "7678": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11733,
        11744
      ],
      "op": "DUP6",
      "path": "36"
    },
    "7679": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11745,
        11746
      ],
      "op": "DUP5",
      "path": "36"
    },
    "7680": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11733,
        11747
      ],
      "op": "DUP2",
      "path": "36"
    },
    "7681": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11733,
        11747
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "7682": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11733,
        11747
      ],
      "op": "DUP2",
      "path": "36"
    },
    "7683": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11733,
        11747
      ],
      "op": "LT",
      "path": "36"
    },
    "7684": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11733,
        11747
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1E0F"
    },
    "7687": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11733,
        11747
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "7688": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11733,
        11747
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1E0F"
    },
    "7691": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11733,
        11747
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2B63"
    },
    "7694": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "jump": "i",
      "offset": [
        11733,
        11747
      ],
      "op": "JUMP",
      "path": "36"
    },
    "7695": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11733,
        11747
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "7696": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11733,
        11747
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "7698": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11733,
        11747
      ],
      "op": "MUL",
      "path": "36"
    },
    "7699": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11733,
        11747
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "7701": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11733,
        11747
      ],
      "op": "ADD",
      "path": "36"
    },
    "7702": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11733,
        11747
      ],
      "op": "ADD",
      "path": "36"
    },
    "7703": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11733,
        11747
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "7704": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11733,
        11756
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "7706": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11733,
        11756
      ],
      "op": "ADD",
      "path": "36"
    },
    "7707": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11733,
        11756
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "7708": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11774,
        11785
      ],
      "op": "DUP7",
      "path": "36"
    },
    "7709": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11786,
        11787
      ],
      "op": "DUP6",
      "path": "36"
    },
    "7710": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11774,
        11788
      ],
      "op": "DUP2",
      "path": "36"
    },
    "7711": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11774,
        11788
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "7712": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11774,
        11788
      ],
      "op": "DUP2",
      "path": "36"
    },
    "7713": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11774,
        11788
      ],
      "op": "LT",
      "path": "36"
    },
    "7714": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11774,
        11788
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1E2D"
    },
    "7717": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11774,
        11788
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "7718": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11774,
        11788
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1E2D"
    },
    "7721": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11774,
        11788
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2B63"
    },
    "7724": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "jump": "i",
      "offset": [
        11774,
        11788
      ],
      "op": "JUMP",
      "path": "36"
    },
    "7725": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11774,
        11788
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "7726": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11774,
        11788
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "7728": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11774,
        11788
      ],
      "op": "MUL",
      "path": "36"
    },
    "7729": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11774,
        11788
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "7731": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11774,
        11788
      ],
      "op": "ADD",
      "path": "36"
    },
    "7732": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11774,
        11788
      ],
      "op": "ADD",
      "path": "36"
    },
    "7733": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11774,
        11788
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "7734": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11774,
        11812
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x60"
    },
    "7736": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11774,
        11812
      ],
      "op": "ADD",
      "path": "36"
    },
    "7737": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11774,
        11812
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "7738": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11830,
        11841
      ],
      "op": "DUP8",
      "path": "36"
    },
    "7739": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11842,
        11843
      ],
      "op": "DUP7",
      "path": "36"
    },
    "7740": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11830,
        11844
      ],
      "op": "DUP2",
      "path": "36"
    },
    "7741": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11830,
        11844
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "7742": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11830,
        11844
      ],
      "op": "DUP2",
      "path": "36"
    },
    "7743": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11830,
        11844
      ],
      "op": "LT",
      "path": "36"
    },
    "7744": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11830,
        11844
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1E4B"
    },
    "7747": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11830,
        11844
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "7748": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11830,
        11844
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1E4B"
    },
    "7751": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11830,
        11844
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2B63"
    },
    "7754": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "jump": "i",
      "offset": [
        11830,
        11844
      ],
      "op": "JUMP",
      "path": "36"
    },
    "7755": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11830,
        11844
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "7756": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11830,
        11844
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "7758": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11830,
        11844
      ],
      "op": "MUL",
      "path": "36"
    },
    "7759": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11830,
        11844
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "7761": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11830,
        11844
      ],
      "op": "ADD",
      "path": "36"
    },
    "7762": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11830,
        11844
      ],
      "op": "ADD",
      "path": "36"
    },
    "7763": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11830,
        11844
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "7764": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11830,
        11873
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x80"
    },
    "7766": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11830,
        11873
      ],
      "op": "ADD",
      "path": "36"
    },
    "7767": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11830,
        11873
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "7768": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11612,
        11887
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "7770": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11612,
        11887
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "7771": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11612,
        11887
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1E94"
    },
    "7774": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11612,
        11887
      ],
      "op": "SWAP6",
      "path": "36"
    },
    "7775": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11612,
        11887
      ],
      "op": "SWAP5",
      "path": "36"
    },
    "7776": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11612,
        11887
      ],
      "op": "SWAP4",
      "path": "36"
    },
    "7777": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11612,
        11887
      ],
      "op": "SWAP3",
      "path": "36"
    },
    "7778": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11612,
        11887
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "7779": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11612,
        11887
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "7780": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7782": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7784": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "7786": {
      "op": "SHL"
    },
    "7787": {
      "op": "SUB"
    },
    "7788": {
      "op": "SWAP6"
    },
    "7789": {
      "op": "DUP7"
    },
    "7790": {
      "op": "AND"
    },
    "7791": {
      "op": "DUP2"
    },
    "7792": {
      "op": "MSTORE"
    },
    "7793": {
      "op": "SWAP4"
    },
    "7794": {
      "op": "SWAP1"
    },
    "7795": {
      "op": "SWAP5"
    },
    "7796": {
      "op": "AND"
    },
    "7797": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "7799": {
      "op": "DUP5"
    },
    "7800": {
      "op": "ADD"
    },
    "7801": {
      "op": "MSTORE"
    },
    "7802": {
      "op": "SWAP1"
    },
    "7803": {
      "op": "ISZERO"
    },
    "7804": {
      "op": "ISZERO"
    },
    "7805": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "7807": {
      "op": "DUP4"
    },
    "7808": {
      "op": "ADD"
    },
    "7809": {
      "op": "MSTORE"
    },
    "7810": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "7812": {
      "op": "DUP3"
    },
    "7813": {
      "op": "ADD"
    },
    "7814": {
      "op": "MSTORE"
    },
    "7815": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "7817": {
      "op": "DUP2"
    },
    "7818": {
      "op": "ADD"
    },
    "7819": {
      "op": "SWAP2"
    },
    "7820": {
      "op": "SWAP1"
    },
    "7821": {
      "op": "SWAP2"
    },
    "7822": {
      "op": "MSTORE"
    },
    "7823": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "7825": {
      "op": "ADD"
    },
    "7826": {
      "op": "SWAP1"
    },
    "7827": {
      "op": "JUMP"
    },
    "7828": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11612,
        11887
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "7829": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11612,
        11887
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "7831": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11612,
        11887
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "7832": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11612,
        11887
      ],
      "op": "DUP1",
      "path": "36"
    },
    "7833": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11612,
        11887
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "7834": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11612,
        11887
      ],
      "op": "SUB",
      "path": "36"
    },
    "7835": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11612,
        11887
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "7836": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        11612,
        11887
      ],
      "op": "LOG1",
      "path": "36"
    },
    "7837": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10612,
        10615
      ],
      "op": "PUSH2",
      "path": "36",
      "statement": 72,
      "value": "0x1EA5"
    },
    "7840": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10612,
        10615
      ],
      "op": "DUP2",
      "path": "36"
    },
    "7841": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10612,
        10615
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x2B79"
    },
    "7844": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "jump": "i",
      "offset": [
        10612,
        10615
      ],
      "op": "JUMP",
      "path": "36"
    },
    "7845": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10612,
        10615
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "7846": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10612,
        10615
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "7847": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10612,
        10615
      ],
      "op": "POP",
      "path": "36"
    },
    "7848": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10587,
        11898
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1AA3"
    },
    "7851": {
      "fn": "MockMainnetEscrow.polygonCallback",
      "offset": [
        10587,
        11898
      ],
      "op": "JUMP",
      "path": "36"
    },
    "7852": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        11969,
        12490
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "7853": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12113,
        12120
      ],
      "op": "DUP1",
      "path": "36",
      "statement": 73
    },
    "7854": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12088,
        12109
      ],
      "op": "SELFBALANCE",
      "path": "36"
    },
    "7855": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12088,
        12120
      ],
      "op": "LT",
      "path": "36"
    },
    "7856": {
      "branch": 128,
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12088,
        12120
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "7857": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12080,
        12155
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1EFC"
    },
    "7860": {
      "branch": 128,
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12080,
        12155
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "7861": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12080,
        12155
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "7863": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12080,
        12155
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "7864": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "7868": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "7870": {
      "op": "SHL"
    },
    "7871": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12080,
        12155
      ],
      "op": "DUP2",
      "path": "36"
    },
    "7872": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12080,
        12155
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "7873": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "7875": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12080,
        12155
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x4"
    },
    "7877": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12080,
        12155
      ],
      "op": "DUP3",
      "path": "36"
    },
    "7878": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12080,
        12155
      ],
      "op": "ADD",
      "path": "36"
    },
    "7879": {
      "op": "MSTORE"
    },
    "7880": {
      "op": "PUSH1",
      "value": "0x1E"
    },
    "7882": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "7884": {
      "op": "DUP3"
    },
    "7885": {
      "op": "ADD"
    },
    "7886": {
      "op": "MSTORE"
    },
    "7887": {
      "op": "PUSH32",
      "value": "0x5F68616E646C6545746865725472616E7366657220696E736F6C76656E740000"
    },
    "7920": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "7922": {
      "op": "DUP3"
    },
    "7923": {
      "op": "ADD"
    },
    "7924": {
      "op": "MSTORE"
    },
    "7925": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "7927": {
      "op": "ADD"
    },
    "7928": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12080,
        12155
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x57F"
    },
    "7931": {
      "op": "JUMP"
    },
    "7932": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12080,
        12155
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "7933": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12165,
        12176
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "7935": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12180,
        12189
      ],
      "op": "GAS",
      "path": "36"
    },
    "7936": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12165,
        12189
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "7937": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12165,
        12189
      ],
      "op": "POP",
      "path": "36"
    },
    "7938": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12200,
        12212
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "7940": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12218,
        12223
      ],
      "op": "DUP4",
      "path": "36"
    },
    "7941": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7943": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7945": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "7947": {
      "op": "SHL"
    },
    "7948": {
      "op": "SUB"
    },
    "7949": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12218,
        12228
      ],
      "op": "AND",
      "path": "36"
    },
    "7950": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12236,
        12243
      ],
      "op": "DUP4",
      "path": "36"
    },
    "7951": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12250,
        12253
      ],
      "op": "DUP4",
      "path": "36"
    },
    "7952": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12218,
        12258
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "7953": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12218,
        12258
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "7955": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12218,
        12258
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "7956": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12218,
        12258
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "7958": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12218,
        12258
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "7960": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12218,
        12258
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "7961": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12218,
        12258
      ],
      "op": "DUP1",
      "path": "36"
    },
    "7962": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12218,
        12258
      ],
      "op": "DUP4",
      "path": "36"
    },
    "7963": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12218,
        12258
      ],
      "op": "SUB",
      "path": "36"
    },
    "7964": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12218,
        12258
      ],
      "op": "DUP2",
      "path": "36"
    },
    "7965": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12218,
        12258
      ],
      "op": "DUP6",
      "path": "36"
    },
    "7966": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12218,
        12258
      ],
      "op": "DUP9",
      "path": "36"
    },
    "7967": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12218,
        12258
      ],
      "op": "DUP9",
      "path": "36"
    },
    "7968": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12218,
        12258
      ],
      "op": "CALL",
      "path": "36"
    },
    "7969": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12218,
        12258
      ],
      "op": "SWAP4",
      "path": "36"
    },
    "7970": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12218,
        12258
      ],
      "op": "POP",
      "path": "36"
    },
    "7971": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12218,
        12258
      ],
      "op": "POP",
      "path": "36"
    },
    "7972": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12218,
        12258
      ],
      "op": "POP",
      "path": "36"
    },
    "7973": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12218,
        12258
      ],
      "op": "POP",
      "path": "36"
    },
    "7974": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12218,
        12258
      ],
      "op": "RETURNDATASIZE",
      "path": "36"
    },
    "7975": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12218,
        12258
      ],
      "op": "DUP1",
      "path": "36"
    },
    "7976": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12218,
        12258
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "7978": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12218,
        12258
      ],
      "op": "DUP2",
      "path": "36"
    },
    "7979": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12218,
        12258
      ],
      "op": "EQ",
      "path": "36"
    },
    "7980": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12218,
        12258
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1F51"
    },
    "7983": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12218,
        12258
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "7984": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12218,
        12258
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "7986": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12218,
        12258
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "7987": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12218,
        12258
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "7988": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12218,
        12258
      ],
      "op": "POP",
      "path": "36"
    },
    "7989": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12218,
        12258
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x1F"
    },
    "7991": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12218,
        12258
      ],
      "op": "NOT",
      "path": "36"
    },
    "7992": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12218,
        12258
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x3F"
    },
    "7994": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12218,
        12258
      ],
      "op": "RETURNDATASIZE",
      "path": "36"
    },
    "7995": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12218,
        12258
      ],
      "op": "ADD",
      "path": "36"
    },
    "7996": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12218,
        12258
      ],
      "op": "AND",
      "path": "36"
    },
    "7997": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12218,
        12258
      ],
      "op": "DUP3",
      "path": "36"
    },
    "7998": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12218,
        12258
      ],
      "op": "ADD",
      "path": "36"
    },
    "7999": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12218,
        12258
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "8001": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12218,
        12258
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "8002": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12218,
        12258
      ],
      "op": "RETURNDATASIZE",
      "path": "36"
    },
    "8003": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12218,
        12258
      ],
      "op": "DUP3",
      "path": "36"
    },
    "8004": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12218,
        12258
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "8005": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12218,
        12258
      ],
      "op": "RETURNDATASIZE",
      "path": "36"
    },
    "8006": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12218,
        12258
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "8008": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12218,
        12258
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x20"
    },
    "8010": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12218,
        12258
      ],
      "op": "DUP5",
      "path": "36"
    },
    "8011": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12218,
        12258
      ],
      "op": "ADD",
      "path": "36"
    },
    "8012": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12218,
        12258
      ],
      "op": "RETURNDATACOPY",
      "path": "36"
    },
    "8013": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12218,
        12258
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1F56"
    },
    "8016": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12218,
        12258
      ],
      "op": "JUMP",
      "path": "36"
    },
    "8017": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12218,
        12258
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "8018": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12218,
        12258
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x60"
    },
    "8020": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12218,
        12258
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "8021": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12218,
        12258
      ],
      "op": "POP",
      "path": "36"
    },
    "8022": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12218,
        12258
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "8023": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12218,
        12258
      ],
      "op": "POP",
      "path": "36"
    },
    "8024": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12199,
        12258
      ],
      "op": "POP",
      "path": "36"
    },
    "8025": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12199,
        12258
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "8026": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12199,
        12258
      ],
      "op": "POP",
      "path": "36"
    },
    "8027": {
      "branch": 129,
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12356,
        12363
      ],
      "op": "DUP1",
      "path": "36"
    },
    "8028": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12351,
        12484
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1FEA"
    },
    "8031": {
      "branch": 129,
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12351,
        12484
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "8032": {
      "offset": [
        2101,
        2143
      ],
      "op": "PUSH20",
      "path": "36",
      "value": "0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2"
    },
    "8053": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8055": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8057": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "8059": {
      "op": "SHL"
    },
    "8060": {
      "op": "SUB"
    },
    "8061": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12379,
        12391
      ],
      "op": "AND",
      "path": "36",
      "statement": 74
    },
    "8062": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12379,
        12391
      ],
      "op": "PUSH4",
      "path": "36",
      "value": "0xD0E30DB0"
    },
    "8067": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12399,
        12406
      ],
      "op": "DUP5",
      "path": "36"
    },
    "8068": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12379,
        12409
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "8070": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12379,
        12409
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "8071": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12379,
        12409
      ],
      "op": "DUP3",
      "path": "36"
    },
    "8072": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12379,
        12409
      ],
      "op": "PUSH4",
      "path": "36",
      "value": "0xFFFFFFFF"
    },
    "8077": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12379,
        12409
      ],
      "op": "AND",
      "path": "36"
    },
    "8078": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12379,
        12409
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0xE0"
    },
    "8080": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12379,
        12409
      ],
      "op": "SHL",
      "path": "36"
    },
    "8081": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12379,
        12409
      ],
      "op": "DUP2",
      "path": "36"
    },
    "8082": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12379,
        12409
      ],
      "op": "MSTORE",
      "path": "36"
    },
    "8083": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12379,
        12409
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x4"
    },
    "8085": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12379,
        12409
      ],
      "op": "ADD",
      "path": "36"
    },
    "8086": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12379,
        12409
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "8088": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12379,
        12409
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x40"
    },
    "8090": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12379,
        12409
      ],
      "op": "MLOAD",
      "path": "36"
    },
    "8091": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12379,
        12409
      ],
      "op": "DUP1",
      "path": "36"
    },
    "8092": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12379,
        12409
      ],
      "op": "DUP4",
      "path": "36"
    },
    "8093": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12379,
        12409
      ],
      "op": "SUB",
      "path": "36"
    },
    "8094": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12379,
        12409
      ],
      "op": "DUP2",
      "path": "36"
    },
    "8095": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12379,
        12409
      ],
      "op": "DUP6",
      "path": "36"
    },
    "8096": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12379,
        12409
      ],
      "op": "DUP9",
      "path": "36"
    },
    "8097": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12379,
        12409
      ],
      "op": "DUP1",
      "path": "36"
    },
    "8098": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12379,
        12409
      ],
      "op": "EXTCODESIZE",
      "path": "36"
    },
    "8099": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12379,
        12409
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "8100": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12379,
        12409
      ],
      "op": "DUP1",
      "path": "36"
    },
    "8101": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12379,
        12409
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "8102": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12379,
        12409
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1FAE"
    },
    "8105": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12379,
        12409
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "8106": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12379,
        12409
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "8108": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12379,
        12409
      ],
      "op": "DUP1",
      "path": "36"
    },
    "8109": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12379,
        12409
      ],
      "op": "REVERT",
      "path": "36"
    },
    "8110": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12379,
        12409
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "8111": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12379,
        12409
      ],
      "op": "POP",
      "path": "36"
    },
    "8112": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12379,
        12409
      ],
      "op": "GAS",
      "path": "36"
    },
    "8113": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12379,
        12409
      ],
      "op": "CALL",
      "path": "36"
    },
    "8114": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12379,
        12409
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "8115": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12379,
        12409
      ],
      "op": "DUP1",
      "path": "36"
    },
    "8116": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12379,
        12409
      ],
      "op": "ISZERO",
      "path": "36"
    },
    "8117": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12379,
        12409
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1FC2"
    },
    "8120": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12379,
        12409
      ],
      "op": "JUMPI",
      "path": "36"
    },
    "8121": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12379,
        12409
      ],
      "op": "RETURNDATASIZE",
      "path": "36"
    },
    "8122": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12379,
        12409
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "8124": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12379,
        12409
      ],
      "op": "DUP1",
      "path": "36"
    },
    "8125": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12379,
        12409
      ],
      "op": "RETURNDATACOPY",
      "path": "36"
    },
    "8126": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12379,
        12409
      ],
      "op": "RETURNDATASIZE",
      "path": "36"
    },
    "8127": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12379,
        12409
      ],
      "op": "PUSH1",
      "path": "36",
      "value": "0x0"
    },
    "8129": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12379,
        12409
      ],
      "op": "REVERT",
      "path": "36"
    },
    "8130": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12379,
        12409
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "8131": {
      "op": "POP"
    },
    "8132": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12423,
        12473
      ],
      "op": "PUSH2",
      "path": "36",
      "statement": 75,
      "value": "0x1FEA"
    },
    "8135": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12423,
        12473
      ],
      "op": "SWAP4",
      "path": "36"
    },
    "8136": {
      "op": "POP"
    },
    "8137": {
      "offset": [
        2101,
        2143
      ],
      "op": "PUSH20",
      "path": "36",
      "value": "0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2"
    },
    "8158": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        2101,
        2143
      ],
      "op": "SWAP3",
      "path": "36"
    },
    "8159": {
      "op": "POP"
    },
    "8160": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12458,
        12463
      ],
      "op": "DUP8",
      "path": "36"
    },
    "8161": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12458,
        12463
      ],
      "op": "SWAP2",
      "path": "36"
    },
    "8162": {
      "op": "POP"
    },
    "8163": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12465,
        12472
      ],
      "op": "DUP7",
      "path": "36"
    },
    "8164": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12465,
        12472
      ],
      "op": "SWAP1",
      "path": "36"
    },
    "8165": {
      "op": "POP"
    },
    "8166": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12423,
        12457
      ],
      "op": "PUSH2",
      "path": "36",
      "value": "0x1FF0"
    },
    "8169": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "jump": "i",
      "offset": [
        12423,
        12473
      ],
      "op": "JUMP",
      "path": "36"
    },
    "8170": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12423,
        12473
      ],
      "op": "JUMPDEST",
      "path": "36"
    },
    "8171": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12040,
        12490
      ],
      "op": "POP",
      "path": "36"
    },
    "8172": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        12040,
        12490
      ],
      "op": "POP",
      "path": "36"
    },
    "8173": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        11969,
        12490
      ],
      "op": "POP",
      "path": "36"
    },
    "8174": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "offset": [
        11969,
        12490
      ],
      "op": "POP",
      "path": "36"
    },
    "8175": {
      "fn": "MockMainnetEscrow._handleEtherTransfer",
      "jump": "o",
      "offset": [
        11969,
        12490
      ],
      "op": "JUMP",
      "path": "36"
    },
    "8176": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        634,
        809
      ],
      "op": "JUMPDEST",
      "path": "9"
    },
    "8177": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        743,
        801
      ],
      "op": "PUSH1",
      "path": "9",
      "statement": 76,
      "value": "0x40"
    },
    "8179": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        743,
        801
      ],
      "op": "MLOAD",
      "path": "9"
    },
    "8180": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8182": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8184": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "8186": {
      "op": "SHL"
    },
    "8187": {
      "op": "SUB"
    },
    "8188": {
      "op": "DUP4"
    },
    "8189": {
      "op": "AND"
    },
    "8190": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        743,
        801
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x24"
    },
    "8192": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        743,
        801
      ],
      "op": "DUP3",
      "path": "9"
    },
    "8193": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        743,
        801
      ],
      "op": "ADD",
      "path": "9"
    },
    "8194": {
      "op": "MSTORE"
    },
    "8195": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "8197": {
      "op": "DUP2"
    },
    "8198": {
      "op": "ADD"
    },
    "8199": {
      "op": "DUP3"
    },
    "8200": {
      "op": "SWAP1"
    },
    "8201": {
      "op": "MSTORE"
    },
    "8202": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        716,
        802
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0xD59"
    },
    "8205": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        716,
        802
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "8206": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        736,
        741
      ],
      "op": "DUP5",
      "path": "9"
    },
    "8207": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        736,
        741
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "8208": {
      "op": "PUSH4",
      "value": "0xA9059CBB"
    },
    "8213": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "8215": {
      "op": "SHL"
    },
    "8216": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        766,
        789
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "8217": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "8219": {
      "op": "ADD"
    },
    "8220": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        743,
        801
      ],
      "op": "JUMPDEST",
      "path": "9"
    },
    "8221": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        743,
        801
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x40"
    },
    "8223": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        743,
        801
      ],
      "op": "DUP1",
      "path": "9"
    },
    "8224": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        743,
        801
      ],
      "op": "MLOAD",
      "path": "9"
    },
    "8225": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "8227": {
      "op": "NOT"
    },
    "8228": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        743,
        801
      ],
      "op": "DUP2",
      "path": "9"
    },
    "8229": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        743,
        801
      ],
      "op": "DUP5",
      "path": "9"
    },
    "8230": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        743,
        801
      ],
      "op": "SUB",
      "path": "9"
    },
    "8231": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        743,
        801
      ],
      "op": "ADD",
      "path": "9"
    },
    "8232": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        743,
        801
      ],
      "op": "DUP2",
      "path": "9"
    },
    "8233": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        743,
        801
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "8234": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        743,
        801
      ],
      "op": "SWAP2",
      "path": "9"
    },
    "8235": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        743,
        801
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "8236": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        743,
        801
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "8237": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        743,
        801
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x20"
    },
    "8239": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        743,
        801
      ],
      "op": "DUP2",
      "path": "9"
    },
    "8240": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        743,
        801
      ],
      "op": "ADD",
      "path": "9"
    },
    "8241": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        743,
        801
      ],
      "op": "DUP1",
      "path": "9"
    },
    "8242": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        743,
        801
      ],
      "op": "MLOAD",
      "path": "9"
    },
    "8243": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8245": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8247": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "8249": {
      "op": "SHL"
    },
    "8250": {
      "op": "SUB"
    },
    "8251": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        743,
        801
      ],
      "op": "AND",
      "path": "9"
    },
    "8252": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8254": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8256": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "8258": {
      "op": "SHL"
    },
    "8259": {
      "op": "SUB"
    },
    "8260": {
      "op": "NOT"
    },
    "8261": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        743,
        801
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "8262": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        743,
        801
      ],
      "op": "SWAP4",
      "path": "9"
    },
    "8263": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        743,
        801
      ],
      "op": "AND",
      "path": "9"
    },
    "8264": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        743,
        801
      ],
      "op": "SWAP3",
      "path": "9"
    },
    "8265": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        743,
        801
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "8266": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        743,
        801
      ],
      "op": "SWAP3",
      "path": "9"
    },
    "8267": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        743,
        801
      ],
      "op": "OR",
      "path": "9"
    },
    "8268": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        743,
        801
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "8269": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        743,
        801
      ],
      "op": "SWAP2",
      "path": "9"
    },
    "8270": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        743,
        801
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "8271": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        716,
        735
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0x22B7"
    },
    "8274": {
      "fn": "SafeERC20.safeTransfer",
      "jump": "i",
      "offset": [
        716,
        802
      ],
      "op": "JUMP",
      "path": "9"
    },
    "8275": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5287,
        6095
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "8276": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5351,
        5355
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "8278": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5684,
        5697
      ],
      "op": "DUP1",
      "path": "1"
    },
    "8279": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5684,
        5697
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "8280": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5684,
        5697
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x100"
    },
    "8283": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5684,
        5697
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "8284": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5684,
        5697
      ],
      "op": "DIV",
      "path": "1"
    },
    "8285": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5684,
        5697
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xFF"
    },
    "8287": {
      "branch": 133,
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5684,
        5697
      ],
      "op": "AND",
      "path": "1"
    },
    "8288": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5680,
        6089
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "8289": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5680,
        6089
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x209A"
    },
    "8292": {
      "branch": 133,
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5680,
        6089
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "8293": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5738,
        5745
      ],
      "op": "DUP2",
      "path": "1",
      "statement": 77
    },
    "8294": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5738,
        5750
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xFF"
    },
    "8296": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5738,
        5750
      ],
      "op": "AND",
      "path": "1"
    },
    "8297": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5749,
        5750
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "8299": {
      "branch": 134,
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5738,
        5750
      ],
      "op": "EQ",
      "path": "1"
    },
    "8300": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5738,
        5799
      ],
      "op": "DUP1",
      "path": "1"
    },
    "8301": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5738,
        5799
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "8302": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5738,
        5799
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2076"
    },
    "8305": {
      "branch": 134,
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5738,
        5799
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "8306": {
      "op": "POP"
    },
    "8307": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5793,
        5797
      ],
      "op": "ADDRESS",
      "path": "1"
    },
    "8308": {
      "op": "EXTCODESIZE"
    },
    "8309": {
      "op": "ISZERO"
    },
    "8310": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5738,
        5799
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "8311": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5713,
        5879
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2092"
    },
    "8314": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5713,
        5879
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "8315": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5713,
        5879
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "8317": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5713,
        5879
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "8318": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "8322": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "8324": {
      "op": "SHL"
    },
    "8325": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5713,
        5879
      ],
      "op": "DUP2",
      "path": "1"
    },
    "8326": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5713,
        5879
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "8327": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5713,
        5879
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "8329": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5713,
        5879
      ],
      "op": "ADD",
      "path": "1"
    },
    "8330": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5713,
        5879
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x57F"
    },
    "8333": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5713,
        5879
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "8334": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5713,
        5879
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2DAD"
    },
    "8337": {
      "fn": "Initializable._setInitializedVersion",
      "jump": "i",
      "offset": [
        5713,
        5879
      ],
      "op": "JUMP",
      "path": "1"
    },
    "8338": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5713,
        5879
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "8339": {
      "op": "POP"
    },
    "8340": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5900,
        5905
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 78,
      "value": "0x0"
    },
    "8342": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5900,
        5905
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "8343": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5287,
        6095
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "8344": {
      "op": "POP"
    },
    "8345": {
      "fn": "Initializable._setInitializedVersion",
      "jump": "o",
      "offset": [
        5287,
        6095
      ],
      "op": "JUMP",
      "path": "1"
    },
    "8346": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5680,
        6089
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "8347": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5944,
        5956
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 79,
      "value": "0x0"
    },
    "8349": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5944,
        5956
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "8350": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5944,
        5966
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xFF"
    },
    "8352": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5944,
        5966
      ],
      "op": "DUP1",
      "path": "1"
    },
    "8353": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5944,
        5966
      ],
      "op": "DUP5",
      "path": "1"
    },
    "8354": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5944,
        5966
      ],
      "op": "AND",
      "path": "1"
    },
    "8355": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5944,
        5956
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "8356": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5944,
        5956
      ],
      "op": "AND",
      "path": "1"
    },
    "8357": {
      "branch": 135,
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5944,
        5966
      ],
      "op": "LT",
      "path": "1"
    },
    "8358": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5936,
        6017
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x20C1"
    },
    "8361": {
      "branch": 135,
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5936,
        6017
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "8362": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5936,
        6017
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "8364": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5936,
        6017
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "8365": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "8369": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "8371": {
      "op": "SHL"
    },
    "8372": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5936,
        6017
      ],
      "op": "DUP2",
      "path": "1"
    },
    "8373": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5936,
        6017
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "8374": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5936,
        6017
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "8376": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5936,
        6017
      ],
      "op": "ADD",
      "path": "1"
    },
    "8377": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5936,
        6017
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x57F"
    },
    "8380": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5936,
        6017
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "8381": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5936,
        6017
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2DAD"
    },
    "8384": {
      "fn": "Initializable._setInitializedVersion",
      "jump": "i",
      "offset": [
        5936,
        6017
      ],
      "op": "JUMP",
      "path": "1"
    },
    "8385": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5936,
        6017
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "8386": {
      "op": "POP"
    },
    "8387": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        6031,
        6043
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 80,
      "value": "0x0"
    },
    "8389": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        6031,
        6053
      ],
      "op": "DUP1",
      "path": "1"
    },
    "8390": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        6031,
        6053
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "8391": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "8393": {
      "op": "NOT"
    },
    "8394": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        6031,
        6053
      ],
      "op": "AND",
      "path": "1"
    },
    "8395": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        6031,
        6053
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xFF"
    },
    "8397": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        6031,
        6053
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "8398": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        6031,
        6053
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "8399": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        6031,
        6053
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "8400": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        6031,
        6053
      ],
      "op": "AND",
      "path": "1"
    },
    "8401": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        6031,
        6053
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "8402": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        6031,
        6053
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "8403": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        6031,
        6053
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "8404": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        6031,
        6053
      ],
      "op": "OR",
      "path": "1"
    },
    "8405": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        6031,
        6053
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "8406": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        6031,
        6053
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "8407": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8409": {
      "op": "SWAP1"
    },
    "8410": {
      "fn": "Initializable._setInitializedVersion",
      "jump": "o",
      "offset": [
        5287,
        6095
      ],
      "op": "JUMP",
      "path": "1"
    },
    "8411": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5680,
        6089
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "8412": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5287,
        6095
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "8413": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5287,
        6095
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "8414": {
      "fn": "Initializable._setInitializedVersion",
      "offset": [
        5287,
        6095
      ],
      "op": "POP",
      "path": "1"
    },
    "8415": {
      "fn": "Initializable._setInitializedVersion",
      "jump": "o",
      "offset": [
        5287,
        6095
      ],
      "op": "JUMP",
      "path": "1"
    },
    "8416": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "offset": [
        988,
        1083
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "8417": {
      "offset": [
        4698,
        4711
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "8419": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "offset": [
        4698,
        4711
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "8420": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "offset": [
        4698,
        4711
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x100"
    },
    "8423": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "offset": [
        4698,
        4711
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "8424": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "offset": [
        4698,
        4711
      ],
      "op": "DIV",
      "path": "1"
    },
    "8425": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "offset": [
        4698,
        4711
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xFF"
    },
    "8427": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "offset": [
        4698,
        4711
      ],
      "op": "AND",
      "path": "1"
    },
    "8428": {
      "offset": [
        4690,
        4759
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2107"
    },
    "8431": {
      "offset": [
        4690,
        4759
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "8432": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "offset": [
        4690,
        4759
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "8434": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "offset": [
        4690,
        4759
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "8435": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "8439": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "8441": {
      "op": "SHL"
    },
    "8442": {
      "offset": [
        4690,
        4759
      ],
      "op": "DUP2",
      "path": "1"
    },
    "8443": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "offset": [
        4690,
        4759
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "8444": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "offset": [
        4690,
        4759
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "8446": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "offset": [
        4690,
        4759
      ],
      "op": "ADD",
      "path": "1"
    },
    "8447": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "offset": [
        4690,
        4759
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x57F"
    },
    "8450": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "offset": [
        4690,
        4759
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "8451": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "offset": [
        4690,
        4759
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2DFB"
    },
    "8454": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "jump": "i",
      "offset": [
        4690,
        4759
      ],
      "op": "JUMP",
      "path": "1"
    },
    "8455": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "offset": [
        4690,
        4759
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "8456": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "offset": [
        1050,
        1076
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 81,
      "value": "0xEBA"
    },
    "8459": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "offset": [
        1050,
        1074
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2389"
    },
    "8462": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "jump": "i",
      "offset": [
        1050,
        1076
      ],
      "op": "JUMP",
      "path": "0"
    },
    "8463": {
      "fn": "PausableUpgradeable.__Pausable_init",
      "offset": [
        1048,
        1145
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "8464": {
      "offset": [
        4698,
        4711
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "8466": {
      "fn": "PausableUpgradeable.__Pausable_init",
      "offset": [
        4698,
        4711
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "8467": {
      "fn": "PausableUpgradeable.__Pausable_init",
      "offset": [
        4698,
        4711
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x100"
    },
    "8470": {
      "fn": "PausableUpgradeable.__Pausable_init",
      "offset": [
        4698,
        4711
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "8471": {
      "fn": "PausableUpgradeable.__Pausable_init",
      "offset": [
        4698,
        4711
      ],
      "op": "DIV",
      "path": "1"
    },
    "8472": {
      "fn": "PausableUpgradeable.__Pausable_init",
      "offset": [
        4698,
        4711
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xFF"
    },
    "8474": {
      "fn": "PausableUpgradeable.__Pausable_init",
      "offset": [
        4698,
        4711
      ],
      "op": "AND",
      "path": "1"
    },
    "8475": {
      "offset": [
        4690,
        4759
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2136"
    },
    "8478": {
      "offset": [
        4690,
        4759
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "8479": {
      "fn": "PausableUpgradeable.__Pausable_init",
      "offset": [
        4690,
        4759
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "8481": {
      "fn": "PausableUpgradeable.__Pausable_init",
      "offset": [
        4690,
        4759
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "8482": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "8486": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "8488": {
      "op": "SHL"
    },
    "8489": {
      "offset": [
        4690,
        4759
      ],
      "op": "DUP2",
      "path": "1"
    },
    "8490": {
      "fn": "PausableUpgradeable.__Pausable_init",
      "offset": [
        4690,
        4759
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "8491": {
      "fn": "PausableUpgradeable.__Pausable_init",
      "offset": [
        4690,
        4759
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "8493": {
      "fn": "PausableUpgradeable.__Pausable_init",
      "offset": [
        4690,
        4759
      ],
      "op": "ADD",
      "path": "1"
    },
    "8494": {
      "fn": "PausableUpgradeable.__Pausable_init",
      "offset": [
        4690,
        4759
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x57F"
    },
    "8497": {
      "fn": "PausableUpgradeable.__Pausable_init",
      "offset": [
        4690,
        4759
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "8498": {
      "fn": "PausableUpgradeable.__Pausable_init",
      "offset": [
        4690,
        4759
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2DFB"
    },
    "8501": {
      "fn": "PausableUpgradeable.__Pausable_init",
      "jump": "i",
      "offset": [
        4690,
        4759
      ],
      "op": "JUMP",
      "path": "1"
    },
    "8502": {
      "fn": "PausableUpgradeable.__Pausable_init",
      "offset": [
        4690,
        4759
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "8503": {
      "fn": "PausableUpgradeable.__Pausable_init",
      "offset": [
        1111,
        1138
      ],
      "op": "PUSH2",
      "path": "2",
      "statement": 82,
      "value": "0xEBA"
    },
    "8506": {
      "fn": "PausableUpgradeable.__Pausable_init",
      "offset": [
        1111,
        1136
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x23B9"
    },
    "8509": {
      "fn": "PausableUpgradeable.__Pausable_init",
      "jump": "i",
      "offset": [
        1111,
        1138
      ],
      "op": "JUMP",
      "path": "2"
    },
    "8510": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2510,
        2697
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "8511": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2602,
        2608
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x33"
    },
    "8513": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2602,
        2608
      ],
      "op": "DUP1",
      "path": "0"
    },
    "8514": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2602,
        2608
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "8515": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8517": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8519": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "8521": {
      "op": "SHL"
    },
    "8522": {
      "op": "SUB"
    },
    "8523": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2618,
        2635
      ],
      "op": "DUP4",
      "path": "0",
      "statement": 83
    },
    "8524": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2618,
        2635
      ],
      "op": "DUP2",
      "path": "0"
    },
    "8525": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2618,
        2635
      ],
      "op": "AND",
      "path": "0"
    },
    "8526": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8528": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8530": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "8532": {
      "op": "SHL"
    },
    "8533": {
      "op": "SUB"
    },
    "8534": {
      "op": "NOT"
    },
    "8535": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2618,
        2635
      ],
      "op": "DUP4",
      "path": "0"
    },
    "8536": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2618,
        2635
      ],
      "op": "AND",
      "path": "0"
    },
    "8537": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2618,
        2635
      ],
      "op": "DUP2",
      "path": "0"
    },
    "8538": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2618,
        2635
      ],
      "op": "OR",
      "path": "0"
    },
    "8539": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2618,
        2635
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "8540": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2618,
        2635
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "8541": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2618,
        2635
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "8542": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2650,
        2690
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 84,
      "value": "0x40"
    },
    "8544": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2650,
        2690
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "8545": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2602,
        2608
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "8546": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2602,
        2608
      ],
      "op": "AND",
      "path": "0"
    },
    "8547": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2602,
        2608
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "8548": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2618,
        2635
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "8549": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2602,
        2608
      ],
      "op": "DUP3",
      "path": "0"
    },
    "8550": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2602,
        2608
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "8551": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2650,
        2690
      ],
      "op": "PUSH32",
      "path": "0",
      "value": "0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
    },
    "8584": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2650,
        2690
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "8585": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2583,
        2599
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "8587": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2583,
        2599
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "8588": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2650,
        2690
      ],
      "op": "LOG3",
      "path": "0"
    },
    "8589": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2573,
        2697
      ],
      "op": "POP",
      "path": "0"
    },
    "8590": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2510,
        2697
      ],
      "op": "POP",
      "path": "0"
    },
    "8591": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "jump": "o",
      "offset": [
        2510,
        2697
      ],
      "op": "JUMP",
      "path": "0"
    },
    "8592": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        815,
        1018
      ],
      "op": "JUMPDEST",
      "path": "9"
    },
    "8593": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        942,
        1010
      ],
      "op": "PUSH1",
      "path": "9",
      "statement": 85,
      "value": "0x40"
    },
    "8595": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        942,
        1010
      ],
      "op": "MLOAD",
      "path": "9"
    },
    "8596": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8598": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8600": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "8602": {
      "op": "SHL"
    },
    "8603": {
      "op": "SUB"
    },
    "8604": {
      "op": "DUP1"
    },
    "8605": {
      "op": "DUP6"
    },
    "8606": {
      "op": "AND"
    },
    "8607": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        942,
        1010
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x24"
    },
    "8609": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        942,
        1010
      ],
      "op": "DUP4",
      "path": "9"
    },
    "8610": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        942,
        1010
      ],
      "op": "ADD",
      "path": "9"
    },
    "8611": {
      "op": "MSTORE"
    },
    "8612": {
      "op": "DUP4"
    },
    "8613": {
      "op": "AND"
    },
    "8614": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "8616": {
      "op": "DUP3"
    },
    "8617": {
      "op": "ADD"
    },
    "8618": {
      "op": "MSTORE"
    },
    "8619": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "8621": {
      "op": "DUP2"
    },
    "8622": {
      "op": "ADD"
    },
    "8623": {
      "op": "DUP3"
    },
    "8624": {
      "op": "SWAP1"
    },
    "8625": {
      "op": "MSTORE"
    },
    "8626": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        915,
        1011
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0x1FEA"
    },
    "8629": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        915,
        1011
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "8630": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        935,
        940
      ],
      "op": "DUP6",
      "path": "9"
    },
    "8631": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        935,
        940
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "8632": {
      "op": "PUSH4",
      "value": "0x23B872DD"
    },
    "8637": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "8639": {
      "op": "SHL"
    },
    "8640": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        965,
        992
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "8641": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "8643": {
      "op": "ADD"
    },
    "8644": {
      "fn": "SafeERC20.safeTransferFrom",
      "offset": [
        942,
        1010
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0x201C"
    },
    "8647": {
      "op": "JUMP"
    },
    "8648": {
      "fn": "PausableUpgradeable._pause",
      "offset": [
        2106,
        2221
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "8649": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1411,
        1418
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x65"
    },
    "8651": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1411,
        1418
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "8652": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1411,
        1418
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xFF"
    },
    "8654": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1411,
        1418
      ],
      "op": "AND",
      "path": "2"
    },
    "8655": {
      "offset": [
        1654,
        1663
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "8656": {
      "offset": [
        1646,
        1684
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x21EB"
    },
    "8659": {
      "offset": [
        1646,
        1684
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "8660": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1646,
        1684
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "8662": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1646,
        1684
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "8663": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "8667": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "8669": {
      "op": "SHL"
    },
    "8670": {
      "offset": [
        1646,
        1684
      ],
      "op": "DUP2",
      "path": "2"
    },
    "8671": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1646,
        1684
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "8672": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1646,
        1684
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "8674": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1646,
        1684
      ],
      "op": "ADD",
      "path": "2"
    },
    "8675": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1646,
        1684
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x57F"
    },
    "8678": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1646,
        1684
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "8679": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1646,
        1684
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x29A3"
    },
    "8682": {
      "fn": "PausableUpgradeable.paused",
      "jump": "i",
      "offset": [
        1646,
        1684
      ],
      "op": "JUMP",
      "path": "2"
    },
    "8683": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1646,
        1684
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "8684": {
      "fn": "PausableUpgradeable._pause",
      "offset": [
        2165,
        2172
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 86,
      "value": "0x65"
    },
    "8686": {
      "fn": "PausableUpgradeable._pause",
      "offset": [
        2165,
        2179
      ],
      "op": "DUP1",
      "path": "2"
    },
    "8687": {
      "fn": "PausableUpgradeable._pause",
      "offset": [
        2165,
        2179
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "8688": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "8690": {
      "op": "NOT"
    },
    "8691": {
      "fn": "PausableUpgradeable._pause",
      "offset": [
        2165,
        2179
      ],
      "op": "AND",
      "path": "2"
    },
    "8692": {
      "fn": "PausableUpgradeable._pause",
      "offset": [
        2175,
        2179
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "8694": {
      "fn": "PausableUpgradeable._pause",
      "offset": [
        2165,
        2179
      ],
      "op": "OR",
      "path": "2"
    },
    "8695": {
      "fn": "PausableUpgradeable._pause",
      "offset": [
        2165,
        2179
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "8696": {
      "fn": "PausableUpgradeable._pause",
      "offset": [
        2165,
        2179
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "8697": {
      "fn": "PausableUpgradeable._pause",
      "offset": [
        2194,
        2214
      ],
      "op": "PUSH32",
      "path": "2",
      "statement": 87,
      "value": "0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258"
    },
    "8730": {
      "fn": "PausableUpgradeable._pause",
      "offset": [
        2201,
        2213
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x2220"
    },
    "8733": {
      "fn": "ContextUpgradeable._msgSender",
      "offset": [
        929,
        939
      ],
      "op": "CALLER",
      "path": "5"
    },
    "8734": {
      "fn": "ContextUpgradeable._msgSender",
      "offset": [
        929,
        939
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "8735": {
      "fn": "ContextUpgradeable._msgSender",
      "offset": [
        850,
        946
      ],
      "op": "JUMP",
      "path": "5"
    },
    "8736": {
      "fn": "PausableUpgradeable._pause",
      "offset": [
        2201,
        2213
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "8737": {
      "fn": "PausableUpgradeable._pause",
      "offset": [
        2194,
        2214
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "8739": {
      "fn": "PausableUpgradeable._pause",
      "offset": [
        2194,
        2214
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "8740": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8742": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8744": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "8746": {
      "op": "SHL"
    },
    "8747": {
      "op": "SUB"
    },
    "8748": {
      "op": "SWAP1"
    },
    "8749": {
      "op": "SWAP2"
    },
    "8750": {
      "op": "AND"
    },
    "8751": {
      "op": "DUP2"
    },
    "8752": {
      "op": "MSTORE"
    },
    "8753": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "8755": {
      "op": "ADD"
    },
    "8756": {
      "fn": "PausableUpgradeable._pause",
      "offset": [
        2194,
        2214
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "8758": {
      "fn": "PausableUpgradeable._pause",
      "offset": [
        2194,
        2214
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "8759": {
      "fn": "PausableUpgradeable._pause",
      "offset": [
        2194,
        2214
      ],
      "op": "DUP1",
      "path": "2"
    },
    "8760": {
      "fn": "PausableUpgradeable._pause",
      "offset": [
        2194,
        2214
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "8761": {
      "fn": "PausableUpgradeable._pause",
      "offset": [
        2194,
        2214
      ],
      "op": "SUB",
      "path": "2"
    },
    "8762": {
      "fn": "PausableUpgradeable._pause",
      "offset": [
        2194,
        2214
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "8763": {
      "fn": "PausableUpgradeable._pause",
      "offset": [
        2194,
        2214
      ],
      "op": "LOG1",
      "path": "2"
    },
    "8764": {
      "fn": "PausableUpgradeable._pause",
      "jump": "o",
      "offset": [
        2106,
        2221
      ],
      "op": "JUMP",
      "path": "2"
    },
    "8765": {
      "fn": "PausableUpgradeable._unpause",
      "offset": [
        2353,
        2470
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "8766": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1411,
        1418
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x65"
    },
    "8768": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1411,
        1418
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "8769": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1411,
        1418
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xFF"
    },
    "8771": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1411,
        1418
      ],
      "op": "AND",
      "path": "2"
    },
    "8772": {
      "offset": [
        1912,
        1953
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x2286"
    },
    "8775": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1912,
        1953
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "8776": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1912,
        1953
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "8778": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1912,
        1953
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "8779": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "8783": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "8785": {
      "op": "SHL"
    },
    "8786": {
      "offset": [
        1912,
        1953
      ],
      "op": "DUP2",
      "path": "2"
    },
    "8787": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1912,
        1953
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "8788": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "8790": {
      "offset": [
        1912,
        1953
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "8792": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1912,
        1953
      ],
      "op": "DUP3",
      "path": "2"
    },
    "8793": {
      "fn": "PausableUpgradeable.paused",
      "offset": [
        1912,
        1953
      ],
      "op": "ADD",
      "path": "2"
    },
    "8794": {
      "op": "MSTORE"
    },
    "8795": {
      "op": "PUSH1",
      "value": "0x14"
    },
    "8797": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "8799": {
      "op": "DUP3"
    },
    "8800": {
      "op": "ADD"
    },
    "8801": {
      "op": "MSTORE"
    },
    "8802": {
      "op": "PUSH20",
      "value": "0x14185D5CD8589B194E881B9BDD081C185D5CD959"
    },
    "8823": {
      "op": "PUSH1",
      "value": "0x62"
    },
    "8825": {
      "op": "SHL"
    },
    "8826": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "8828": {
      "op": "DUP3"
    },
    "8829": {
      "op": "ADD"
    },
    "8830": {
      "op": "MSTORE"
    },
    "8831": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "8833": {
      "op": "ADD"
    },
    "8834": {
      "offset": [
        1912,
        1953
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x57F"
    },
    "8837": {
      "op": "JUMP"
    },
    "8838": {
      "offset": [
        1912,
        1953
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "8839": {
      "fn": "PausableUpgradeable._unpause",
      "offset": [
        2411,
        2418
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 88,
      "value": "0x65"
    },
    "8841": {
      "fn": "PausableUpgradeable._unpause",
      "offset": [
        2411,
        2426
      ],
      "op": "DUP1",
      "path": "2"
    },
    "8842": {
      "fn": "PausableUpgradeable._unpause",
      "offset": [
        2411,
        2426
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "8843": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "8845": {
      "op": "NOT"
    },
    "8846": {
      "fn": "PausableUpgradeable._unpause",
      "offset": [
        2411,
        2426
      ],
      "op": "AND",
      "path": "2"
    },
    "8847": {
      "fn": "PausableUpgradeable._unpause",
      "offset": [
        2411,
        2426
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "8848": {
      "fn": "PausableUpgradeable._unpause",
      "offset": [
        2411,
        2426
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "8849": {
      "fn": "PausableUpgradeable._unpause",
      "offset": [
        2441,
        2463
      ],
      "op": "PUSH32",
      "path": "2",
      "statement": 89,
      "value": "0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA"
    },
    "8882": {
      "fn": "ContextUpgradeable._msgSender",
      "offset": [
        929,
        939
      ],
      "op": "CALLER",
      "path": "5"
    },
    "8883": {
      "fn": "PausableUpgradeable._unpause",
      "offset": [
        2450,
        2462
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x2220"
    },
    "8886": {
      "fn": "ContextUpgradeable._msgSender",
      "offset": [
        850,
        946
      ],
      "op": "JUMP",
      "path": "5"
    },
    "8887": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3022,
        3773
      ],
      "op": "JUMPDEST",
      "path": "9"
    },
    "8888": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3441,
        3464
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x0"
    },
    "8890": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3467,
        3536
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0x230C"
    },
    "8893": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3495,
        3499
      ],
      "op": "DUP3",
      "path": "9"
    },
    "8894": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3467,
        3536
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x40"
    },
    "8896": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3467,
        3536
      ],
      "op": "MLOAD",
      "path": "9"
    },
    "8897": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3467,
        3536
      ],
      "op": "DUP1",
      "path": "9"
    },
    "8898": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3467,
        3536
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x40"
    },
    "8900": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3467,
        3536
      ],
      "op": "ADD",
      "path": "9"
    },
    "8901": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3467,
        3536
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x40"
    },
    "8903": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3467,
        3536
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "8904": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3467,
        3536
      ],
      "op": "DUP1",
      "path": "9"
    },
    "8905": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3467,
        3536
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x20"
    },
    "8907": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3467,
        3536
      ],
      "op": "DUP2",
      "path": "9"
    },
    "8908": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3467,
        3536
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "8909": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3467,
        3536
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x20"
    },
    "8911": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3467,
        3536
      ],
      "op": "ADD",
      "path": "9"
    },
    "8912": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3467,
        3536
      ],
      "op": "PUSH32",
      "path": "9",
      "value": "0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564"
    },
    "8945": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3467,
        3536
      ],
      "op": "DUP2",
      "path": "9"
    },
    "8946": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3467,
        3536
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "8947": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3467,
        3536
      ],
      "op": "POP",
      "path": "9"
    },
    "8948": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3475,
        3480
      ],
      "op": "DUP6",
      "path": "9"
    },
    "8949": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8951": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8953": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "8955": {
      "op": "SHL"
    },
    "8956": {
      "op": "SUB"
    },
    "8957": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3467,
        3494
      ],
      "op": "AND",
      "path": "9"
    },
    "8958": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3467,
        3494
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0x23EC"
    },
    "8961": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3467,
        3494
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "8962": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3467,
        3536
      ],
      "op": "SWAP3",
      "path": "9"
    },
    "8963": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3467,
        3536
      ],
      "op": "SWAP2",
      "path": "9"
    },
    "8964": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3467,
        3536
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "8965": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3467,
        3536
      ],
      "op": "PUSH4",
      "path": "9",
      "value": "0xFFFFFFFF"
    },
    "8970": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3467,
        3536
      ],
      "op": "AND",
      "path": "9"
    },
    "8971": {
      "fn": "SafeERC20._callOptionalReturn",
      "jump": "i",
      "offset": [
        3467,
        3536
      ],
      "op": "JUMP",
      "path": "9"
    },
    "8972": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3467,
        3536
      ],
      "op": "JUMPDEST",
      "path": "9"
    },
    "8973": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3550,
        3567
      ],
      "op": "DUP1",
      "path": "9"
    },
    "8974": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3550,
        3567
      ],
      "op": "MLOAD",
      "path": "9"
    },
    "8975": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3441,
        3536
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "8976": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3441,
        3536
      ],
      "op": "SWAP2",
      "path": "9"
    },
    "8977": {
      "op": "POP"
    },
    "8978": {
      "branch": 138,
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3550,
        3571
      ],
      "op": "ISZERO",
      "path": "9"
    },
    "8979": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3546,
        3767
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0xD59"
    },
    "8982": {
      "branch": 138,
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3546,
        3767
      ],
      "op": "JUMPI",
      "path": "9"
    },
    "8983": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3690,
        3700
      ],
      "op": "DUP1",
      "path": "9",
      "statement": 90
    },
    "8984": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3679,
        3709
      ],
      "op": "DUP1",
      "path": "9"
    },
    "8985": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3679,
        3709
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x20"
    },
    "8987": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3679,
        3709
      ],
      "op": "ADD",
      "path": "9"
    },
    "8988": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3679,
        3709
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "8989": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3679,
        3709
      ],
      "op": "MLOAD",
      "path": "9"
    },
    "8990": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3679,
        3709
      ],
      "op": "DUP2",
      "path": "9"
    },
    "8991": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3679,
        3709
      ],
      "op": "ADD",
      "path": "9"
    },
    "8992": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3679,
        3709
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "8993": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3679,
        3709
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0x232A"
    },
    "8996": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3679,
        3709
      ],
      "op": "SWAP2",
      "path": "9"
    },
    "8997": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3679,
        3709
      ],
      "op": "SWAP1",
      "path": "9"
    },
    "8998": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3679,
        3709
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0x2E46"
    },
    "9001": {
      "fn": "SafeERC20._callOptionalReturn",
      "jump": "i",
      "offset": [
        3679,
        3709
      ],
      "op": "JUMP",
      "path": "9"
    },
    "9002": {
      "branch": 139,
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3679,
        3709
      ],
      "op": "JUMPDEST",
      "path": "9"
    },
    "9003": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3671,
        3756
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0xD59"
    },
    "9006": {
      "branch": 139,
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3671,
        3756
      ],
      "op": "JUMPI",
      "path": "9"
    },
    "9007": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3671,
        3756
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x40"
    },
    "9009": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3671,
        3756
      ],
      "op": "MLOAD",
      "path": "9"
    },
    "9010": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "9014": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "9016": {
      "op": "SHL"
    },
    "9017": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3671,
        3756
      ],
      "op": "DUP2",
      "path": "9"
    },
    "9018": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3671,
        3756
      ],
      "op": "MSTORE",
      "path": "9"
    },
    "9019": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "9021": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3671,
        3756
      ],
      "op": "PUSH1",
      "path": "9",
      "value": "0x4"
    },
    "9023": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3671,
        3756
      ],
      "op": "DUP3",
      "path": "9"
    },
    "9024": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3671,
        3756
      ],
      "op": "ADD",
      "path": "9"
    },
    "9025": {
      "op": "MSTORE"
    },
    "9026": {
      "op": "PUSH1",
      "value": "0x2A"
    },
    "9028": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "9030": {
      "op": "DUP3"
    },
    "9031": {
      "op": "ADD"
    },
    "9032": {
      "op": "MSTORE"
    },
    "9033": {
      "op": "PUSH32",
      "value": "0x5361666545524332303A204552433230206F7065726174696F6E20646964206E"
    },
    "9066": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "9068": {
      "op": "DUP3"
    },
    "9069": {
      "op": "ADD"
    },
    "9070": {
      "op": "MSTORE"
    },
    "9071": {
      "op": "PUSH10",
      "value": "0x1BDD081CDD58D8D95959"
    },
    "9082": {
      "op": "PUSH1",
      "value": "0xB2"
    },
    "9084": {
      "op": "SHL"
    },
    "9085": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "9087": {
      "op": "DUP3"
    },
    "9088": {
      "op": "ADD"
    },
    "9089": {
      "op": "MSTORE"
    },
    "9090": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "9092": {
      "op": "ADD"
    },
    "9093": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3671,
        3756
      ],
      "op": "PUSH2",
      "path": "9",
      "value": "0x57F"
    },
    "9096": {
      "op": "JUMP"
    },
    "9097": {
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "offset": [
        1089,
        1200
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "9098": {
      "offset": [
        4698,
        4711
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "9100": {
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "offset": [
        4698,
        4711
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "9101": {
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "offset": [
        4698,
        4711
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x100"
    },
    "9104": {
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "offset": [
        4698,
        4711
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "9105": {
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "offset": [
        4698,
        4711
      ],
      "op": "DIV",
      "path": "1"
    },
    "9106": {
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "offset": [
        4698,
        4711
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xFF"
    },
    "9108": {
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "offset": [
        4698,
        4711
      ],
      "op": "AND",
      "path": "1"
    },
    "9109": {
      "offset": [
        4690,
        4759
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x23B0"
    },
    "9112": {
      "offset": [
        4690,
        4759
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "9113": {
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "offset": [
        4690,
        4759
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "9115": {
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "offset": [
        4690,
        4759
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "9116": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "9120": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "9122": {
      "op": "SHL"
    },
    "9123": {
      "offset": [
        4690,
        4759
      ],
      "op": "DUP2",
      "path": "1"
    },
    "9124": {
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "offset": [
        4690,
        4759
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "9125": {
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "offset": [
        4690,
        4759
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "9127": {
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "offset": [
        4690,
        4759
      ],
      "op": "ADD",
      "path": "1"
    },
    "9128": {
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "offset": [
        4690,
        4759
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x57F"
    },
    "9131": {
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "offset": [
        4690,
        4759
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "9132": {
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "offset": [
        4690,
        4759
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2DFB"
    },
    "9135": {
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "jump": "i",
      "offset": [
        4690,
        4759
      ],
      "op": "JUMP",
      "path": "1"
    },
    "9136": {
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "offset": [
        4690,
        4759
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "9137": {
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "offset": [
        1161,
        1193
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 91,
      "value": "0xEBA"
    },
    "9140": {
      "fn": "ContextUpgradeable._msgSender",
      "offset": [
        929,
        939
      ],
      "op": "CALLER",
      "path": "5"
    },
    "9141": {
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "offset": [
        1161,
        1179
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x213E"
    },
    "9144": {
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "jump": "i",
      "offset": [
        1161,
        1193
      ],
      "op": "JUMP",
      "path": "0"
    },
    "9145": {
      "fn": "PausableUpgradeable.__Pausable_init_unchained",
      "offset": [
        1151,
        1246
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "9146": {
      "offset": [
        4698,
        4711
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "9148": {
      "fn": "PausableUpgradeable.__Pausable_init_unchained",
      "offset": [
        4698,
        4711
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "9149": {
      "fn": "PausableUpgradeable.__Pausable_init_unchained",
      "offset": [
        4698,
        4711
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x100"
    },
    "9152": {
      "fn": "PausableUpgradeable.__Pausable_init_unchained",
      "offset": [
        4698,
        4711
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "9153": {
      "fn": "PausableUpgradeable.__Pausable_init_unchained",
      "offset": [
        4698,
        4711
      ],
      "op": "DIV",
      "path": "1"
    },
    "9154": {
      "fn": "PausableUpgradeable.__Pausable_init_unchained",
      "offset": [
        4698,
        4711
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xFF"
    },
    "9156": {
      "branch": 136,
      "fn": "PausableUpgradeable.__Pausable_init_unchained",
      "offset": [
        4698,
        4711
      ],
      "op": "AND",
      "path": "1"
    },
    "9157": {
      "offset": [
        4690,
        4759
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x23E0"
    },
    "9160": {
      "branch": 136,
      "offset": [
        4690,
        4759
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "9161": {
      "fn": "PausableUpgradeable.__Pausable_init_unchained",
      "offset": [
        4690,
        4759
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "9163": {
      "fn": "PausableUpgradeable.__Pausable_init_unchained",
      "offset": [
        4690,
        4759
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "9164": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "9168": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "9170": {
      "op": "SHL"
    },
    "9171": {
      "offset": [
        4690,
        4759
      ],
      "op": "DUP2",
      "path": "1"
    },
    "9172": {
      "fn": "PausableUpgradeable.__Pausable_init_unchained",
      "offset": [
        4690,
        4759
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "9173": {
      "fn": "PausableUpgradeable.__Pausable_init_unchained",
      "offset": [
        4690,
        4759
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "9175": {
      "fn": "PausableUpgradeable.__Pausable_init_unchained",
      "offset": [
        4690,
        4759
      ],
      "op": "ADD",
      "path": "1"
    },
    "9176": {
      "fn": "PausableUpgradeable.__Pausable_init_unchained",
      "offset": [
        4690,
        4759
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x57F"
    },
    "9179": {
      "fn": "PausableUpgradeable.__Pausable_init_unchained",
      "offset": [
        4690,
        4759
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "9180": {
      "fn": "PausableUpgradeable.__Pausable_init_unchained",
      "offset": [
        4690,
        4759
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2DFB"
    },
    "9183": {
      "fn": "PausableUpgradeable.__Pausable_init_unchained",
      "jump": "i",
      "offset": [
        4690,
        4759
      ],
      "op": "JUMP",
      "path": "1"
    },
    "9184": {
      "fn": "PausableUpgradeable.__Pausable_init_unchained",
      "offset": [
        4690,
        4759
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "9185": {
      "fn": "PausableUpgradeable.__Pausable_init_unchained",
      "offset": [
        1224,
        1231
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 92,
      "value": "0x65"
    },
    "9187": {
      "fn": "PausableUpgradeable.__Pausable_init_unchained",
      "offset": [
        1224,
        1239
      ],
      "op": "DUP1",
      "path": "2"
    },
    "9188": {
      "fn": "PausableUpgradeable.__Pausable_init_unchained",
      "offset": [
        1224,
        1239
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "9189": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "9191": {
      "op": "NOT"
    },
    "9192": {
      "fn": "PausableUpgradeable.__Pausable_init_unchained",
      "offset": [
        1224,
        1239
      ],
      "op": "AND",
      "path": "2"
    },
    "9193": {
      "fn": "PausableUpgradeable.__Pausable_init_unchained",
      "offset": [
        1224,
        1239
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "9194": {
      "fn": "PausableUpgradeable.__Pausable_init_unchained",
      "offset": [
        1224,
        1239
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "9195": {
      "fn": "PausableUpgradeable.__Pausable_init_unchained",
      "jump": "o",
      "offset": [
        1151,
        1246
      ],
      "op": "JUMP",
      "path": "2"
    },
    "9196": {
      "fn": "Address.functionCall",
      "offset": [
        3573,
        3766
      ],
      "op": "JUMPDEST",
      "path": "15"
    },
    "9197": {
      "fn": "Address.functionCall",
      "offset": [
        3676,
        3688
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x60"
    },
    "9199": {
      "fn": "Address.functionCall",
      "offset": [
        3707,
        3759
      ],
      "op": "PUSH2",
      "path": "15",
      "statement": 93,
      "value": "0x23FB"
    },
    "9202": {
      "fn": "Address.functionCall",
      "offset": [
        3729,
        3735
      ],
      "op": "DUP5",
      "path": "15"
    },
    "9203": {
      "fn": "Address.functionCall",
      "offset": [
        3737,
        3741
      ],
      "op": "DUP5",
      "path": "15"
    },
    "9204": {
      "fn": "Address.functionCall",
      "offset": [
        3743,
        3744
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "9206": {
      "fn": "Address.functionCall",
      "offset": [
        3746,
        3758
      ],
      "op": "DUP6",
      "path": "15"
    },
    "9207": {
      "fn": "Address.functionCall",
      "offset": [
        3707,
        3728
      ],
      "op": "PUSH2",
      "path": "15",
      "value": "0x2403"
    },
    "9210": {
      "fn": "Address.functionCall",
      "jump": "i",
      "offset": [
        3707,
        3759
      ],
      "op": "JUMP",
      "path": "15"
    },
    "9211": {
      "fn": "Address.functionCall",
      "offset": [
        3707,
        3759
      ],
      "op": "JUMPDEST",
      "path": "15"
    },
    "9212": {
      "fn": "Address.functionCall",
      "offset": [
        3700,
        3759
      ],
      "op": "SWAP5",
      "path": "15"
    },
    "9213": {
      "fn": "Address.functionCall",
      "offset": [
        3573,
        3766
      ],
      "op": "SWAP4",
      "path": "15"
    },
    "9214": {
      "op": "POP"
    },
    "9215": {
      "op": "POP"
    },
    "9216": {
      "op": "POP"
    },
    "9217": {
      "op": "POP"
    },
    "9218": {
      "fn": "Address.functionCall",
      "jump": "o",
      "offset": [
        3573,
        3766
      ],
      "op": "JUMP",
      "path": "15"
    },
    "9219": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4600,
        5123
      ],
      "op": "JUMPDEST",
      "path": "15"
    },
    "9220": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4727,
        4739
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x60"
    },
    "9222": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4784,
        4789
      ],
      "op": "DUP3",
      "path": "15",
      "statement": 94
    },
    "9223": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4759,
        4780
      ],
      "op": "SELFBALANCE",
      "path": "15"
    },
    "9224": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4759,
        4789
      ],
      "op": "LT",
      "path": "15"
    },
    "9225": {
      "branch": 130,
      "fn": "Address.functionCallWithValue",
      "offset": [
        4759,
        4789
      ],
      "op": "ISZERO",
      "path": "15"
    },
    "9226": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4751,
        4832
      ],
      "op": "PUSH2",
      "path": "15",
      "value": "0x2464"
    },
    "9229": {
      "branch": 130,
      "fn": "Address.functionCallWithValue",
      "offset": [
        4751,
        4832
      ],
      "op": "JUMPI",
      "path": "15"
    },
    "9230": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4751,
        4832
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "9232": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4751,
        4832
      ],
      "op": "MLOAD",
      "path": "15"
    },
    "9233": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "9237": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "9239": {
      "op": "SHL"
    },
    "9240": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4751,
        4832
      ],
      "op": "DUP2",
      "path": "15"
    },
    "9241": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4751,
        4832
      ],
      "op": "MSTORE",
      "path": "15"
    },
    "9242": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "9244": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4751,
        4832
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x4"
    },
    "9246": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4751,
        4832
      ],
      "op": "DUP3",
      "path": "15"
    },
    "9247": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4751,
        4832
      ],
      "op": "ADD",
      "path": "15"
    },
    "9248": {
      "op": "MSTORE"
    },
    "9249": {
      "op": "PUSH1",
      "value": "0x26"
    },
    "9251": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "9253": {
      "op": "DUP3"
    },
    "9254": {
      "op": "ADD"
    },
    "9255": {
      "op": "MSTORE"
    },
    "9256": {
      "op": "PUSH32",
      "value": "0x416464726573733A20696E73756666696369656E742062616C616E636520666F"
    },
    "9289": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "9291": {
      "op": "DUP3"
    },
    "9292": {
      "op": "ADD"
    },
    "9293": {
      "op": "MSTORE"
    },
    "9294": {
      "op": "PUSH6",
      "value": "0x1C8818D85B1B"
    },
    "9301": {
      "op": "PUSH1",
      "value": "0xD2"
    },
    "9303": {
      "op": "SHL"
    },
    "9304": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "9306": {
      "op": "DUP3"
    },
    "9307": {
      "op": "ADD"
    },
    "9308": {
      "op": "MSTORE"
    },
    "9309": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "9311": {
      "op": "ADD"
    },
    "9312": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4751,
        4832
      ],
      "op": "PUSH2",
      "path": "15",
      "value": "0x57F"
    },
    "9315": {
      "op": "JUMP"
    },
    "9316": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4751,
        4832
      ],
      "op": "JUMPDEST",
      "path": "15"
    },
    "9317": {
      "fn": "Address.isContract",
      "offset": [
        1078,
        1098
      ],
      "op": "DUP5",
      "path": "15"
    },
    "9318": {
      "fn": "Address.isContract",
      "offset": [
        1078,
        1098
      ],
      "op": "EXTCODESIZE",
      "path": "15"
    },
    "9319": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4842,
        4902
      ],
      "op": "PUSH2",
      "path": "15",
      "statement": 95,
      "value": "0x24B2"
    },
    "9322": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4842,
        4902
      ],
      "op": "JUMPI",
      "path": "15"
    },
    "9323": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4842,
        4902
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "9325": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4842,
        4902
      ],
      "op": "MLOAD",
      "path": "15"
    },
    "9326": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "9330": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "9332": {
      "op": "SHL"
    },
    "9333": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4842,
        4902
      ],
      "op": "DUP2",
      "path": "15"
    },
    "9334": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4842,
        4902
      ],
      "op": "MSTORE",
      "path": "15"
    },
    "9335": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "9337": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4842,
        4902
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x4"
    },
    "9339": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4842,
        4902
      ],
      "op": "DUP3",
      "path": "15"
    },
    "9340": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4842,
        4902
      ],
      "op": "ADD",
      "path": "15"
    },
    "9341": {
      "op": "MSTORE"
    },
    "9342": {
      "op": "PUSH1",
      "value": "0x1D"
    },
    "9344": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "9346": {
      "op": "DUP3"
    },
    "9347": {
      "op": "ADD"
    },
    "9348": {
      "op": "MSTORE"
    },
    "9349": {
      "op": "PUSH32",
      "value": "0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000"
    },
    "9382": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "9384": {
      "op": "DUP3"
    },
    "9385": {
      "op": "ADD"
    },
    "9386": {
      "op": "MSTORE"
    },
    "9387": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "9389": {
      "op": "ADD"
    },
    "9390": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4842,
        4902
      ],
      "op": "PUSH2",
      "path": "15",
      "value": "0x57F"
    },
    "9393": {
      "op": "JUMP"
    },
    "9394": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4842,
        4902
      ],
      "op": "JUMPDEST",
      "path": "15"
    },
    "9395": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4973,
        4985
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "9397": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4987,
        5010
      ],
      "op": "DUP1",
      "path": "15"
    },
    "9398": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5020
      ],
      "op": "DUP7",
      "path": "15"
    },
    "9399": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "9401": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "9403": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "9405": {
      "op": "SHL"
    },
    "9406": {
      "op": "SUB"
    },
    "9407": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5025
      ],
      "op": "AND",
      "path": "15"
    },
    "9408": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5034,
        5039
      ],
      "op": "DUP6",
      "path": "15"
    },
    "9409": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5042,
        5046
      ],
      "op": "DUP8",
      "path": "15"
    },
    "9410": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "9412": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "MLOAD",
      "path": "15"
    },
    "9413": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "PUSH2",
      "path": "15",
      "value": "0x24CE"
    },
    "9416": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "SWAP2",
      "path": "15"
    },
    "9417": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "SWAP1",
      "path": "15"
    },
    "9418": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "PUSH2",
      "path": "15",
      "value": "0x2E8F"
    },
    "9421": {
      "fn": "Address.functionCallWithValue",
      "jump": "i",
      "offset": [
        5014,
        5047
      ],
      "op": "JUMP",
      "path": "15"
    },
    "9422": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "JUMPDEST",
      "path": "15"
    },
    "9423": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "9425": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "9427": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "MLOAD",
      "path": "15"
    },
    "9428": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "DUP1",
      "path": "15"
    },
    "9429": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "DUP4",
      "path": "15"
    },
    "9430": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "SUB",
      "path": "15"
    },
    "9431": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "DUP2",
      "path": "15"
    },
    "9432": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "DUP6",
      "path": "15"
    },
    "9433": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "DUP8",
      "path": "15"
    },
    "9434": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "GAS",
      "path": "15"
    },
    "9435": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "CALL",
      "path": "15"
    },
    "9436": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "SWAP3",
      "path": "15"
    },
    "9437": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "POP",
      "path": "15"
    },
    "9438": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "POP",
      "path": "15"
    },
    "9439": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "POP",
      "path": "15"
    },
    "9440": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "RETURNDATASIZE",
      "path": "15"
    },
    "9441": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "DUP1",
      "path": "15"
    },
    "9442": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "9444": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "DUP2",
      "path": "15"
    },
    "9445": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "EQ",
      "path": "15"
    },
    "9446": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "PUSH2",
      "path": "15",
      "value": "0x250B"
    },
    "9449": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "JUMPI",
      "path": "15"
    },
    "9450": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "9452": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "MLOAD",
      "path": "15"
    },
    "9453": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "SWAP2",
      "path": "15"
    },
    "9454": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "POP",
      "path": "15"
    },
    "9455": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x1F"
    },
    "9457": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "NOT",
      "path": "15"
    },
    "9458": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x3F"
    },
    "9460": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "RETURNDATASIZE",
      "path": "15"
    },
    "9461": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "ADD",
      "path": "15"
    },
    "9462": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "AND",
      "path": "15"
    },
    "9463": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "DUP3",
      "path": "15"
    },
    "9464": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "ADD",
      "path": "15"
    },
    "9465": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "9467": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "MSTORE",
      "path": "15"
    },
    "9468": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "RETURNDATASIZE",
      "path": "15"
    },
    "9469": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "DUP3",
      "path": "15"
    },
    "9470": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "MSTORE",
      "path": "15"
    },
    "9471": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "RETURNDATASIZE",
      "path": "15"
    },
    "9472": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "9474": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "9476": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "DUP5",
      "path": "15"
    },
    "9477": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "ADD",
      "path": "15"
    },
    "9478": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "RETURNDATACOPY",
      "path": "15"
    },
    "9479": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "PUSH2",
      "path": "15",
      "value": "0x2510"
    },
    "9482": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "JUMP",
      "path": "15"
    },
    "9483": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "JUMPDEST",
      "path": "15"
    },
    "9484": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x60"
    },
    "9486": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "SWAP2",
      "path": "15"
    },
    "9487": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "POP",
      "path": "15"
    },
    "9488": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "JUMPDEST",
      "path": "15"
    },
    "9489": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5014,
        5047
      ],
      "op": "POP",
      "path": "15"
    },
    "9490": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4972,
        5047
      ],
      "op": "SWAP2",
      "path": "15"
    },
    "9491": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4972,
        5047
      ],
      "op": "POP",
      "path": "15"
    },
    "9492": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4972,
        5047
      ],
      "op": "SWAP2",
      "path": "15"
    },
    "9493": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4972,
        5047
      ],
      "op": "POP",
      "path": "15"
    },
    "9494": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5064,
        5116
      ],
      "op": "PUSH2",
      "path": "15",
      "statement": 96,
      "value": "0x19F8"
    },
    "9497": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5082,
        5089
      ],
      "op": "DUP3",
      "path": "15"
    },
    "9498": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5091,
        5101
      ],
      "op": "DUP3",
      "path": "15"
    },
    "9499": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5103,
        5115
      ],
      "op": "DUP7",
      "path": "15"
    },
    "9500": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7198,
        7210
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x60"
    },
    "9502": {
      "branch": 131,
      "fn": "Address._verifyCallResult",
      "offset": [
        7226,
        7233
      ],
      "op": "DUP4",
      "path": "15"
    },
    "9503": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7222,
        7802
      ],
      "op": "ISZERO",
      "path": "15"
    },
    "9504": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7222,
        7802
      ],
      "op": "PUSH2",
      "path": "15",
      "value": "0x252A"
    },
    "9507": {
      "branch": 131,
      "fn": "Address._verifyCallResult",
      "offset": [
        7222,
        7802
      ],
      "op": "JUMPI",
      "path": "15"
    },
    "9508": {
      "op": "POP"
    },
    "9509": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7256,
        7266
      ],
      "op": "DUP2",
      "path": "15",
      "statement": 97
    },
    "9510": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7249,
        7266
      ],
      "op": "PUSH2",
      "path": "15",
      "value": "0x1124"
    },
    "9513": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7249,
        7266
      ],
      "op": "JUMP",
      "path": "15"
    },
    "9514": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7222,
        7802
      ],
      "op": "JUMPDEST",
      "path": "15"
    },
    "9515": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7367,
        7384
      ],
      "op": "DUP3",
      "path": "15"
    },
    "9516": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7367,
        7384
      ],
      "op": "MLOAD",
      "path": "15"
    },
    "9517": {
      "branch": 132,
      "fn": "Address._verifyCallResult",
      "offset": [
        7367,
        7388
      ],
      "op": "ISZERO",
      "path": "15"
    },
    "9518": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7363,
        7792
      ],
      "op": "PUSH2",
      "path": "15",
      "value": "0x253A"
    },
    "9521": {
      "branch": 132,
      "fn": "Address._verifyCallResult",
      "offset": [
        7363,
        7792
      ],
      "op": "JUMPI",
      "path": "15"
    },
    "9522": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7625,
        7635
      ],
      "op": "DUP3",
      "path": "15"
    },
    "9523": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7619,
        7636
      ],
      "op": "MLOAD",
      "path": "15"
    },
    "9524": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7685,
        7700
      ],
      "op": "DUP1",
      "path": "15"
    },
    "9525": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7672,
        7682
      ],
      "op": "DUP5",
      "path": "15"
    },
    "9526": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7668,
        7670
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x20"
    },
    "9528": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7664,
        7683
      ],
      "op": "ADD",
      "path": "15"
    },
    "9529": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7657,
        7701
      ],
      "op": "REVERT",
      "path": "15"
    },
    "9530": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7363,
        7792
      ],
      "op": "JUMPDEST",
      "path": "15"
    },
    "9531": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7764,
        7776
      ],
      "op": "DUP2",
      "path": "15",
      "statement": 98
    },
    "9532": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7757,
        7777
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x40"
    },
    "9534": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7757,
        7777
      ],
      "op": "MLOAD",
      "path": "15"
    },
    "9535": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "9539": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "9541": {
      "op": "SHL"
    },
    "9542": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7757,
        7777
      ],
      "op": "DUP2",
      "path": "15"
    },
    "9543": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7757,
        7777
      ],
      "op": "MSTORE",
      "path": "15"
    },
    "9544": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7757,
        7777
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x4"
    },
    "9546": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7757,
        7777
      ],
      "op": "ADD",
      "path": "15"
    },
    "9547": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7757,
        7777
      ],
      "op": "PUSH2",
      "path": "15",
      "value": "0x57F"
    },
    "9550": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7757,
        7777
      ],
      "op": "SWAP2",
      "path": "15"
    },
    "9551": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7757,
        7777
      ],
      "op": "SWAP1",
      "path": "15"
    },
    "9552": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7757,
        7777
      ],
      "op": "PUSH2",
      "path": "15",
      "value": "0x2EAB"
    },
    "9555": {
      "fn": "Address._verifyCallResult",
      "jump": "i",
      "offset": [
        7757,
        7777
      ],
      "op": "JUMP",
      "path": "15"
    },
    "9556": {
      "op": "JUMPDEST"
    },
    "9557": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "9559": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "9561": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "9563": {
      "op": "SHL"
    },
    "9564": {
      "op": "SUB"
    },
    "9565": {
      "op": "DUP2"
    },
    "9566": {
      "op": "AND"
    },
    "9567": {
      "op": "DUP2"
    },
    "9568": {
      "op": "EQ"
    },
    "9569": {
      "op": "PUSH2",
      "value": "0x1A9B"
    },
    "9572": {
      "op": "JUMPI"
    },
    "9573": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "9575": {
      "op": "DUP1"
    },
    "9576": {
      "op": "REVERT"
    },
    "9577": {
      "op": "JUMPDEST"
    },
    "9578": {
      "op": "DUP1"
    },
    "9579": {
      "op": "CALLDATALOAD"
    },
    "9580": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "9582": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "9584": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "9586": {
      "op": "SHL"
    },
    "9587": {
      "op": "SUB"
    },
    "9588": {
      "op": "DUP2"
    },
    "9589": {
      "op": "AND"
    },
    "9590": {
      "op": "DUP2"
    },
    "9591": {
      "op": "EQ"
    },
    "9592": {
      "op": "PUSH2",
      "value": "0x20DB"
    },
    "9595": {
      "op": "JUMPI"
    },
    "9596": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "9598": {
      "op": "DUP1"
    },
    "9599": {
      "op": "REVERT"
    },
    "9600": {
      "op": "JUMPDEST"
    },
    "9601": {
      "op": "DUP1"
    },
    "9602": {
      "op": "CALLDATALOAD"
    },
    "9603": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "9605": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "9607": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "9609": {
      "op": "SHL"
    },
    "9610": {
      "op": "SUB"
    },
    "9611": {
      "op": "DUP2"
    },
    "9612": {
      "op": "AND"
    },
    "9613": {
      "op": "DUP2"
    },
    "9614": {
      "op": "EQ"
    },
    "9615": {
      "op": "PUSH2",
      "value": "0x20DB"
    },
    "9618": {
      "op": "JUMPI"
    },
    "9619": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "9621": {
      "op": "DUP1"
    },
    "9622": {
      "op": "REVERT"
    },
    "9623": {
      "op": "JUMPDEST"
    },
    "9624": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "9626": {
      "op": "DUP1"
    },
    "9627": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "9629": {
      "op": "DUP1"
    },
    "9630": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "9632": {
      "op": "DUP1"
    },
    "9633": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "9635": {
      "op": "DUP1"
    },
    "9636": {
      "op": "PUSH2",
      "value": "0x100"
    },
    "9639": {
      "op": "DUP10"
    },
    "9640": {
      "op": "DUP12"
    },
    "9641": {
      "op": "SUB"
    },
    "9642": {
      "op": "SLT"
    },
    "9643": {
      "op": "ISZERO"
    },
    "9644": {
      "op": "PUSH2",
      "value": "0x25B4"
    },
    "9647": {
      "op": "JUMPI"
    },
    "9648": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "9650": {
      "op": "DUP1"
    },
    "9651": {
      "op": "REVERT"
    },
    "9652": {
      "op": "JUMPDEST"
    },
    "9653": {
      "op": "DUP9"
    },
    "9654": {
      "op": "CALLDATALOAD"
    },
    "9655": {
      "op": "PUSH2",
      "value": "0x25BF"
    },
    "9658": {
      "op": "DUP2"
    },
    "9659": {
      "op": "PUSH2",
      "value": "0x2554"
    },
    "9662": {
      "jump": "i",
      "op": "JUMP"
    },
    "9663": {
      "op": "JUMPDEST"
    },
    "9664": {
      "op": "SWAP8"
    },
    "9665": {
      "op": "POP"
    },
    "9666": {
      "op": "PUSH2",
      "value": "0x25CD"
    },
    "9669": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "9671": {
      "op": "DUP11"
    },
    "9672": {
      "op": "ADD"
    },
    "9673": {
      "op": "PUSH2",
      "value": "0x2569"
    },
    "9676": {
      "jump": "i",
      "op": "JUMP"
    },
    "9677": {
      "op": "JUMPDEST"
    },
    "9678": {
      "op": "SWAP7"
    },
    "9679": {
      "op": "POP"
    },
    "9680": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "9682": {
      "op": "DUP10"
    },
    "9683": {
      "op": "ADD"
    },
    "9684": {
      "op": "CALLDATALOAD"
    },
    "9685": {
      "op": "PUSH2",
      "value": "0x25DD"
    },
    "9688": {
      "op": "DUP2"
    },
    "9689": {
      "op": "PUSH2",
      "value": "0x2554"
    },
    "9692": {
      "jump": "i",
      "op": "JUMP"
    },
    "9693": {
      "op": "JUMPDEST"
    },
    "9694": {
      "op": "SWAP6"
    },
    "9695": {
      "op": "POP"
    },
    "9696": {
      "op": "PUSH2",
      "value": "0x25EB"
    },
    "9699": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "9701": {
      "op": "DUP11"
    },
    "9702": {
      "op": "ADD"
    },
    "9703": {
      "op": "PUSH2",
      "value": "0x2569"
    },
    "9706": {
      "jump": "i",
      "op": "JUMP"
    },
    "9707": {
      "op": "JUMPDEST"
    },
    "9708": {
      "op": "SWAP5"
    },
    "9709": {
      "op": "POP"
    },
    "9710": {
      "op": "PUSH2",
      "value": "0x25F9"
    },
    "9713": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "9715": {
      "op": "DUP11"
    },
    "9716": {
      "op": "ADD"
    },
    "9717": {
      "op": "PUSH2",
      "value": "0x2580"
    },
    "9720": {
      "jump": "i",
      "op": "JUMP"
    },
    "9721": {
      "op": "JUMPDEST"
    },
    "9722": {
      "op": "SWAP4"
    },
    "9723": {
      "op": "POP"
    },
    "9724": {
      "op": "PUSH2",
      "value": "0x2607"
    },
    "9727": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "9729": {
      "op": "DUP11"
    },
    "9730": {
      "op": "ADD"
    },
    "9731": {
      "op": "PUSH2",
      "value": "0x2580"
    },
    "9734": {
      "jump": "i",
      "op": "JUMP"
    },
    "9735": {
      "op": "JUMPDEST"
    },
    "9736": {
      "op": "SWAP3"
    },
    "9737": {
      "op": "POP"
    },
    "9738": {
      "op": "PUSH2",
      "value": "0x2615"
    },
    "9741": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "9743": {
      "op": "DUP11"
    },
    "9744": {
      "op": "ADD"
    },
    "9745": {
      "op": "PUSH2",
      "value": "0x2580"
    },
    "9748": {
      "jump": "i",
      "op": "JUMP"
    },
    "9749": {
      "op": "JUMPDEST"
    },
    "9750": {
      "op": "SWAP2"
    },
    "9751": {
      "op": "POP"
    },
    "9752": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "9754": {
      "op": "DUP10"
    },
    "9755": {
      "op": "ADD"
    },
    "9756": {
      "op": "CALLDATALOAD"
    },
    "9757": {
      "op": "SWAP1"
    },
    "9758": {
      "op": "POP"
    },
    "9759": {
      "op": "SWAP3"
    },
    "9760": {
      "op": "SWAP6"
    },
    "9761": {
      "op": "SWAP9"
    },
    "9762": {
      "op": "POP"
    },
    "9763": {
      "op": "SWAP3"
    },
    "9764": {
      "op": "SWAP6"
    },
    "9765": {
      "op": "SWAP9"
    },
    "9766": {
      "op": "SWAP1"
    },
    "9767": {
      "op": "SWAP4"
    },
    "9768": {
      "op": "SWAP7"
    },
    "9769": {
      "op": "POP"
    },
    "9770": {
      "jump": "o",
      "op": "JUMP"
    },
    "9771": {
      "op": "JUMPDEST"
    },
    "9772": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "9774": {
      "op": "DUP1"
    },
    "9775": {
      "op": "DUP4"
    },
    "9776": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "9778": {
      "op": "DUP5"
    },
    "9779": {
      "op": "ADD"
    },
    "9780": {
      "op": "SLT"
    },
    "9781": {
      "op": "PUSH2",
      "value": "0x263D"
    },
    "9784": {
      "op": "JUMPI"
    },
    "9785": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "9787": {
      "op": "DUP1"
    },
    "9788": {
      "op": "REVERT"
    },
    "9789": {
      "op": "JUMPDEST"
    },
    "9790": {
      "op": "POP"
    },
    "9791": {
      "op": "DUP2"
    },
    "9792": {
      "op": "CALLDATALOAD"
    },
    "9793": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "9795": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "9797": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "9799": {
      "op": "SHL"
    },
    "9800": {
      "op": "SUB"
    },
    "9801": {
      "op": "DUP2"
    },
    "9802": {
      "op": "GT"
    },
    "9803": {
      "op": "ISZERO"
    },
    "9804": {
      "op": "PUSH2",
      "value": "0x2654"
    },
    "9807": {
      "op": "JUMPI"
    },
    "9808": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "9810": {
      "op": "DUP1"
    },
    "9811": {
      "op": "REVERT"
    },
    "9812": {
      "op": "JUMPDEST"
    },
    "9813": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "9815": {
      "op": "DUP4"
    },
    "9816": {
      "op": "ADD"
    },
    "9817": {
      "op": "SWAP2"
    },
    "9818": {
      "op": "POP"
    },
    "9819": {
      "op": "DUP4"
    },
    "9820": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "9822": {
      "op": "DUP3"
    },
    "9823": {
      "op": "PUSH1",
      "value": "0x5"
    },
    "9825": {
      "op": "SHL"
    },
    "9826": {
      "op": "DUP6"
    },
    "9827": {
      "op": "ADD"
    },
    "9828": {
      "op": "ADD"
    },
    "9829": {
      "op": "GT"
    },
    "9830": {
      "op": "ISZERO"
    },
    "9831": {
      "op": "PUSH2",
      "value": "0x266F"
    },
    "9834": {
      "op": "JUMPI"
    },
    "9835": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "9837": {
      "op": "DUP1"
    },
    "9838": {
      "op": "REVERT"
    },
    "9839": {
      "op": "JUMPDEST"
    },
    "9840": {
      "op": "SWAP3"
    },
    "9841": {
      "op": "POP"
    },
    "9842": {
      "op": "SWAP3"
    },
    "9843": {
      "op": "SWAP1"
    },
    "9844": {
      "op": "POP"
    },
    "9845": {
      "jump": "o",
      "op": "JUMP"
    },
    "9846": {
      "op": "JUMPDEST"
    },
    "9847": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "9849": {
      "op": "DUP1"
    },
    "9850": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "9852": {
      "op": "DUP1"
    },
    "9853": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "9855": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "9857": {
      "op": "DUP7"
    },
    "9858": {
      "op": "DUP9"
    },
    "9859": {
      "op": "SUB"
    },
    "9860": {
      "op": "SLT"
    },
    "9861": {
      "op": "ISZERO"
    },
    "9862": {
      "op": "PUSH2",
      "value": "0x268E"
    },
    "9865": {
      "op": "JUMPI"
    },
    "9866": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "9868": {
      "op": "DUP1"
    },
    "9869": {
      "op": "REVERT"
    },
    "9870": {
      "op": "JUMPDEST"
    },
    "9871": {
      "op": "DUP6"
    },
    "9872": {
      "op": "CALLDATALOAD"
    },
    "9873": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "9875": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "9877": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "9879": {
      "op": "SHL"
    },
    "9880": {
      "op": "SUB"
    },
    "9881": {
      "op": "DUP1"
    },
    "9882": {
      "op": "DUP3"
    },
    "9883": {
      "op": "GT"
    },
    "9884": {
      "op": "ISZERO"
    },
    "9885": {
      "op": "PUSH2",
      "value": "0x26A5"
    },
    "9888": {
      "op": "JUMPI"
    },
    "9889": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "9891": {
      "op": "DUP1"
    },
    "9892": {
      "op": "REVERT"
    },
    "9893": {
      "op": "JUMPDEST"
    },
    "9894": {
      "op": "PUSH2",
      "value": "0x26B1"
    },
    "9897": {
      "op": "DUP10"
    },
    "9898": {
      "op": "DUP4"
    },
    "9899": {
      "op": "DUP11"
    },
    "9900": {
      "op": "ADD"
    },
    "9901": {
      "op": "PUSH2",
      "value": "0x262B"
    },
    "9904": {
      "jump": "i",
      "op": "JUMP"
    },
    "9905": {
      "op": "JUMPDEST"
    },
    "9906": {
      "op": "SWAP1"
    },
    "9907": {
      "op": "SWAP8"
    },
    "9908": {
      "op": "POP"
    },
    "9909": {
      "op": "SWAP6"
    },
    "9910": {
      "op": "POP"
    },
    "9911": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "9913": {
      "op": "DUP9"
    },
    "9914": {
      "op": "ADD"
    },
    "9915": {
      "op": "CALLDATALOAD"
    },
    "9916": {
      "op": "SWAP2"
    },
    "9917": {
      "op": "POP"
    },
    "9918": {
      "op": "DUP1"
    },
    "9919": {
      "op": "DUP3"
    },
    "9920": {
      "op": "GT"
    },
    "9921": {
      "op": "ISZERO"
    },
    "9922": {
      "op": "PUSH2",
      "value": "0x26CA"
    },
    "9925": {
      "op": "JUMPI"
    },
    "9926": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "9928": {
      "op": "DUP1"
    },
    "9929": {
      "op": "REVERT"
    },
    "9930": {
      "op": "JUMPDEST"
    },
    "9931": {
      "op": "POP"
    },
    "9932": {
      "op": "PUSH2",
      "value": "0x26D7"
    },
    "9935": {
      "op": "DUP9"
    },
    "9936": {
      "op": "DUP3"
    },
    "9937": {
      "op": "DUP10"
    },
    "9938": {
      "op": "ADD"
    },
    "9939": {
      "op": "PUSH2",
      "value": "0x262B"
    },
    "9942": {
      "jump": "i",
      "op": "JUMP"
    },
    "9943": {
      "op": "JUMPDEST"
    },
    "9944": {
      "op": "SWAP1"
    },
    "9945": {
      "op": "SWAP5"
    },
    "9946": {
      "op": "POP"
    },
    "9947": {
      "op": "SWAP3"
    },
    "9948": {
      "op": "POP"
    },
    "9949": {
      "op": "POP"
    },
    "9950": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "9952": {
      "op": "DUP7"
    },
    "9953": {
      "op": "ADD"
    },
    "9954": {
      "op": "CALLDATALOAD"
    },
    "9955": {
      "op": "PUSH2",
      "value": "0x26EB"
    },
    "9958": {
      "op": "DUP2"
    },
    "9959": {
      "op": "PUSH2",
      "value": "0x2554"
    },
    "9962": {
      "jump": "i",
      "op": "JUMP"
    },
    "9963": {
      "op": "JUMPDEST"
    },
    "9964": {
      "op": "DUP1"
    },
    "9965": {
      "op": "SWAP2"
    },
    "9966": {
      "op": "POP"
    },
    "9967": {
      "op": "POP"
    },
    "9968": {
      "op": "SWAP3"
    },
    "9969": {
      "op": "SWAP6"
    },
    "9970": {
      "op": "POP"
    },
    "9971": {
      "op": "SWAP3"
    },
    "9972": {
      "op": "SWAP6"
    },
    "9973": {
      "op": "SWAP1"
    },
    "9974": {
      "op": "SWAP4"
    },
    "9975": {
      "op": "POP"
    },
    "9976": {
      "jump": "o",
      "op": "JUMP"
    },
    "9977": {
      "op": "JUMPDEST"
    },
    "9978": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "9980": {
      "op": "DUP1"
    },
    "9981": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "9983": {
      "op": "DUP4"
    },
    "9984": {
      "op": "DUP6"
    },
    "9985": {
      "op": "SUB"
    },
    "9986": {
      "op": "SLT"
    },
    "9987": {
      "op": "ISZERO"
    },
    "9988": {
      "op": "PUSH2",
      "value": "0x270C"
    },
    "9991": {
      "op": "JUMPI"
    },
    "9992": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "9994": {
      "op": "DUP1"
    },
    "9995": {
      "op": "REVERT"
    },
    "9996": {
      "op": "JUMPDEST"
    },
    "9997": {
      "op": "DUP3"
    },
    "9998": {
      "op": "CALLDATALOAD"
    },
    "9999": {
      "op": "PUSH2",
      "value": "0x2717"
    },
    "10002": {
      "op": "DUP2"
    },
    "10003": {
      "op": "PUSH2",
      "value": "0x2554"
    },
    "10006": {
      "jump": "i",
      "op": "JUMP"
    },
    "10007": {
      "op": "JUMPDEST"
    },
    "10008": {
      "op": "SWAP2"
    },
    "10009": {
      "op": "POP"
    },
    "10010": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "10012": {
      "op": "DUP4"
    },
    "10013": {
      "op": "ADD"
    },
    "10014": {
      "op": "CALLDATALOAD"
    },
    "10015": {
      "op": "PUSH2",
      "value": "0x2727"
    },
    "10018": {
      "op": "DUP2"
    },
    "10019": {
      "op": "PUSH2",
      "value": "0x2554"
    },
    "10022": {
      "jump": "i",
      "op": "JUMP"
    },
    "10023": {
      "op": "JUMPDEST"
    },
    "10024": {
      "op": "DUP1"
    },
    "10025": {
      "op": "SWAP2"
    },
    "10026": {
      "op": "POP"
    },
    "10027": {
      "op": "POP"
    },
    "10028": {
      "op": "SWAP3"
    },
    "10029": {
      "op": "POP"
    },
    "10030": {
      "op": "SWAP3"
    },
    "10031": {
      "op": "SWAP1"
    },
    "10032": {
      "op": "POP"
    },
    "10033": {
      "jump": "o",
      "op": "JUMP"
    },
    "10034": {
      "op": "JUMPDEST"
    },
    "10035": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10037": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "10039": {
      "op": "DUP3"
    },
    "10040": {
      "op": "DUP5"
    },
    "10041": {
      "op": "SUB"
    },
    "10042": {
      "op": "SLT"
    },
    "10043": {
      "op": "ISZERO"
    },
    "10044": {
      "op": "PUSH2",
      "value": "0x2744"
    },
    "10047": {
      "op": "JUMPI"
    },
    "10048": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10050": {
      "op": "DUP1"
    },
    "10051": {
      "op": "REVERT"
    },
    "10052": {
      "op": "JUMPDEST"
    },
    "10053": {
      "op": "DUP2"
    },
    "10054": {
      "op": "CALLDATALOAD"
    },
    "10055": {
      "op": "PUSH2",
      "value": "0x1124"
    },
    "10058": {
      "op": "DUP2"
    },
    "10059": {
      "op": "PUSH2",
      "value": "0x2554"
    },
    "10062": {
      "jump": "i",
      "op": "JUMP"
    },
    "10063": {
      "op": "JUMPDEST"
    },
    "10064": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10066": {
      "op": "DUP1"
    },
    "10067": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10069": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "10071": {
      "op": "DUP5"
    },
    "10072": {
      "op": "DUP7"
    },
    "10073": {
      "op": "SUB"
    },
    "10074": {
      "op": "SLT"
    },
    "10075": {
      "op": "ISZERO"
    },
    "10076": {
      "op": "PUSH2",
      "value": "0x2764"
    },
    "10079": {
      "op": "JUMPI"
    },
    "10080": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10082": {
      "op": "DUP1"
    },
    "10083": {
      "op": "REVERT"
    },
    "10084": {
      "op": "JUMPDEST"
    },
    "10085": {
      "op": "DUP4"
    },
    "10086": {
      "op": "CALLDATALOAD"
    },
    "10087": {
      "op": "PUSH2",
      "value": "0x276F"
    },
    "10090": {
      "op": "DUP2"
    },
    "10091": {
      "op": "PUSH2",
      "value": "0x2554"
    },
    "10094": {
      "jump": "i",
      "op": "JUMP"
    },
    "10095": {
      "op": "JUMPDEST"
    },
    "10096": {
      "op": "SWAP3"
    },
    "10097": {
      "op": "POP"
    },
    "10098": {
      "op": "PUSH2",
      "value": "0x277D"
    },
    "10101": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "10103": {
      "op": "DUP6"
    },
    "10104": {
      "op": "ADD"
    },
    "10105": {
      "op": "PUSH2",
      "value": "0x2569"
    },
    "10108": {
      "jump": "i",
      "op": "JUMP"
    },
    "10109": {
      "op": "JUMPDEST"
    },
    "10110": {
      "op": "SWAP2"
    },
    "10111": {
      "op": "POP"
    },
    "10112": {
      "op": "PUSH2",
      "value": "0x278B"
    },
    "10115": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "10117": {
      "op": "DUP6"
    },
    "10118": {
      "op": "ADD"
    },
    "10119": {
      "op": "PUSH2",
      "value": "0x2580"
    },
    "10122": {
      "jump": "i",
      "op": "JUMP"
    },
    "10123": {
      "op": "JUMPDEST"
    },
    "10124": {
      "op": "SWAP1"
    },
    "10125": {
      "op": "POP"
    },
    "10126": {
      "op": "SWAP3"
    },
    "10127": {
      "op": "POP"
    },
    "10128": {
      "op": "SWAP3"
    },
    "10129": {
      "op": "POP"
    },
    "10130": {
      "op": "SWAP3"
    },
    "10131": {
      "jump": "o",
      "op": "JUMP"
    },
    "10132": {
      "op": "JUMPDEST"
    },
    "10133": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10135": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "10137": {
      "op": "DUP3"
    },
    "10138": {
      "op": "DUP5"
    },
    "10139": {
      "op": "SUB"
    },
    "10140": {
      "op": "SLT"
    },
    "10141": {
      "op": "ISZERO"
    },
    "10142": {
      "op": "PUSH2",
      "value": "0x27A6"
    },
    "10145": {
      "op": "JUMPI"
    },
    "10146": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10148": {
      "op": "DUP1"
    },
    "10149": {
      "op": "REVERT"
    },
    "10150": {
      "op": "JUMPDEST"
    },
    "10151": {
      "op": "POP"
    },
    "10152": {
      "op": "CALLDATALOAD"
    },
    "10153": {
      "op": "SWAP2"
    },
    "10154": {
      "op": "SWAP1"
    },
    "10155": {
      "op": "POP"
    },
    "10156": {
      "jump": "o",
      "op": "JUMP"
    },
    "10157": {
      "op": "JUMPDEST"
    },
    "10158": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10160": {
      "op": "DUP1"
    },
    "10161": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10163": {
      "op": "DUP1"
    },
    "10164": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10166": {
      "op": "DUP1"
    },
    "10167": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "10169": {
      "op": "DUP8"
    },
    "10170": {
      "op": "DUP10"
    },
    "10171": {
      "op": "SUB"
    },
    "10172": {
      "op": "SLT"
    },
    "10173": {
      "op": "ISZERO"
    },
    "10174": {
      "op": "PUSH2",
      "value": "0x27C6"
    },
    "10177": {
      "op": "JUMPI"
    },
    "10178": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10180": {
      "op": "DUP1"
    },
    "10181": {
      "op": "REVERT"
    },
    "10182": {
      "op": "JUMPDEST"
    },
    "10183": {
      "op": "DUP7"
    },
    "10184": {
      "op": "CALLDATALOAD"
    },
    "10185": {
      "op": "PUSH2",
      "value": "0x27D1"
    },
    "10188": {
      "op": "DUP2"
    },
    "10189": {
      "op": "PUSH2",
      "value": "0x2554"
    },
    "10192": {
      "jump": "i",
      "op": "JUMP"
    },
    "10193": {
      "op": "JUMPDEST"
    },
    "10194": {
      "op": "SWAP6"
    },
    "10195": {
      "op": "POP"
    },
    "10196": {
      "op": "PUSH2",
      "value": "0x27DF"
    },
    "10199": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "10201": {
      "op": "DUP9"
    },
    "10202": {
      "op": "ADD"
    },
    "10203": {
      "op": "PUSH2",
      "value": "0x2569"
    },
    "10206": {
      "jump": "i",
      "op": "JUMP"
    },
    "10207": {
      "op": "JUMPDEST"
    },
    "10208": {
      "op": "SWAP5"
    },
    "10209": {
      "op": "POP"
    },
    "10210": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "10212": {
      "op": "DUP8"
    },
    "10213": {
      "op": "ADD"
    },
    "10214": {
      "op": "CALLDATALOAD"
    },
    "10215": {
      "op": "PUSH2",
      "value": "0x27EF"
    },
    "10218": {
      "op": "DUP2"
    },
    "10219": {
      "op": "PUSH2",
      "value": "0x2554"
    },
    "10222": {
      "jump": "i",
      "op": "JUMP"
    },
    "10223": {
      "op": "JUMPDEST"
    },
    "10224": {
      "op": "SWAP4"
    },
    "10225": {
      "op": "POP"
    },
    "10226": {
      "op": "PUSH2",
      "value": "0x27FD"
    },
    "10229": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "10231": {
      "op": "DUP9"
    },
    "10232": {
      "op": "ADD"
    },
    "10233": {
      "op": "PUSH2",
      "value": "0x2569"
    },
    "10236": {
      "jump": "i",
      "op": "JUMP"
    },
    "10237": {
      "op": "JUMPDEST"
    },
    "10238": {
      "op": "SWAP3"
    },
    "10239": {
      "op": "POP"
    },
    "10240": {
      "op": "PUSH2",
      "value": "0x280B"
    },
    "10243": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "10245": {
      "op": "DUP9"
    },
    "10246": {
      "op": "ADD"
    },
    "10247": {
      "op": "PUSH2",
      "value": "0x2580"
    },
    "10250": {
      "jump": "i",
      "op": "JUMP"
    },
    "10251": {
      "op": "JUMPDEST"
    },
    "10252": {
      "op": "SWAP2"
    },
    "10253": {
      "op": "POP"
    },
    "10254": {
      "op": "PUSH2",
      "value": "0x2819"
    },
    "10257": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "10259": {
      "op": "DUP9"
    },
    "10260": {
      "op": "ADD"
    },
    "10261": {
      "op": "PUSH2",
      "value": "0x2580"
    },
    "10264": {
      "jump": "i",
      "op": "JUMP"
    },
    "10265": {
      "op": "JUMPDEST"
    },
    "10266": {
      "op": "SWAP1"
    },
    "10267": {
      "op": "POP"
    },
    "10268": {
      "op": "SWAP3"
    },
    "10269": {
      "op": "SWAP6"
    },
    "10270": {
      "op": "POP"
    },
    "10271": {
      "op": "SWAP3"
    },
    "10272": {
      "op": "SWAP6"
    },
    "10273": {
      "op": "POP"
    },
    "10274": {
      "op": "SWAP3"
    },
    "10275": {
      "op": "SWAP6"
    },
    "10276": {
      "jump": "o",
      "op": "JUMP"
    },
    "10277": {
      "op": "JUMPDEST"
    },
    "10278": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "10283": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "10285": {
      "op": "SHL"
    },
    "10286": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10288": {
      "op": "MSTORE"
    },
    "10289": {
      "op": "PUSH1",
      "value": "0x41"
    },
    "10291": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "10293": {
      "op": "MSTORE"
    },
    "10294": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "10296": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10298": {
      "op": "REVERT"
    },
    "10299": {
      "op": "JUMPDEST"
    },
    "10300": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "10302": {
      "op": "MLOAD"
    },
    "10303": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "10305": {
      "op": "DUP2"
    },
    "10306": {
      "op": "ADD"
    },
    "10307": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "10309": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "10311": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "10313": {
      "op": "SHL"
    },
    "10314": {
      "op": "SUB"
    },
    "10315": {
      "op": "DUP2"
    },
    "10316": {
      "op": "GT"
    },
    "10317": {
      "op": "DUP3"
    },
    "10318": {
      "op": "DUP3"
    },
    "10319": {
      "op": "LT"
    },
    "10320": {
      "op": "OR"
    },
    "10321": {
      "op": "ISZERO"
    },
    "10322": {
      "op": "PUSH2",
      "value": "0x285D"
    },
    "10325": {
      "op": "JUMPI"
    },
    "10326": {
      "op": "PUSH2",
      "value": "0x285D"
    },
    "10329": {
      "op": "PUSH2",
      "value": "0x2825"
    },
    "10332": {
      "jump": "i",
      "op": "JUMP"
    },
    "10333": {
      "op": "JUMPDEST"
    },
    "10334": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "10336": {
      "op": "MSTORE"
    },
    "10337": {
      "op": "SWAP1"
    },
    "10338": {
      "jump": "o",
      "op": "JUMP"
    },
    "10339": {
      "op": "JUMPDEST"
    },
    "10340": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "10342": {
      "op": "MLOAD"
    },
    "10343": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "10345": {
      "op": "DUP3"
    },
    "10346": {
      "op": "ADD"
    },
    "10347": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "10349": {
      "op": "NOT"
    },
    "10350": {
      "op": "AND"
    },
    "10351": {
      "op": "DUP2"
    },
    "10352": {
      "op": "ADD"
    },
    "10353": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "10355": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "10357": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "10359": {
      "op": "SHL"
    },
    "10360": {
      "op": "SUB"
    },
    "10361": {
      "op": "DUP2"
    },
    "10362": {
      "op": "GT"
    },
    "10363": {
      "op": "DUP3"
    },
    "10364": {
      "op": "DUP3"
    },
    "10365": {
      "op": "LT"
    },
    "10366": {
      "op": "OR"
    },
    "10367": {
      "op": "ISZERO"
    },
    "10368": {
      "op": "PUSH2",
      "value": "0x288B"
    },
    "10371": {
      "op": "JUMPI"
    },
    "10372": {
      "op": "PUSH2",
      "value": "0x288B"
    },
    "10375": {
      "op": "PUSH2",
      "value": "0x2825"
    },
    "10378": {
      "jump": "i",
      "op": "JUMP"
    },
    "10379": {
      "op": "JUMPDEST"
    },
    "10380": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "10382": {
      "op": "MSTORE"
    },
    "10383": {
      "op": "SWAP2"
    },
    "10384": {
      "op": "SWAP1"
    },
    "10385": {
      "op": "POP"
    },
    "10386": {
      "jump": "o",
      "op": "JUMP"
    },
    "10387": {
      "op": "JUMPDEST"
    },
    "10388": {
      "op": "DUP1"
    },
    "10389": {
      "op": "ISZERO"
    },
    "10390": {
      "op": "ISZERO"
    },
    "10391": {
      "op": "DUP2"
    },
    "10392": {
      "op": "EQ"
    },
    "10393": {
      "op": "PUSH2",
      "value": "0x1A9B"
    },
    "10396": {
      "op": "JUMPI"
    },
    "10397": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10399": {
      "op": "DUP1"
    },
    "10400": {
      "op": "REVERT"
    },
    "10401": {
      "op": "JUMPDEST"
    },
    "10402": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10404": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "10406": {
      "op": "DUP1"
    },
    "10407": {
      "op": "DUP4"
    },
    "10408": {
      "op": "DUP6"
    },
    "10409": {
      "op": "SUB"
    },
    "10410": {
      "op": "SLT"
    },
    "10411": {
      "op": "ISZERO"
    },
    "10412": {
      "op": "PUSH2",
      "value": "0x28B4"
    },
    "10415": {
      "op": "JUMPI"
    },
    "10416": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10418": {
      "op": "DUP1"
    },
    "10419": {
      "op": "REVERT"
    },
    "10420": {
      "op": "JUMPDEST"
    },
    "10421": {
      "op": "DUP3"
    },
    "10422": {
      "op": "CALLDATALOAD"
    },
    "10423": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "10425": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "10427": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "10429": {
      "op": "SHL"
    },
    "10430": {
      "op": "SUB"
    },
    "10431": {
      "op": "DUP1"
    },
    "10432": {
      "op": "DUP3"
    },
    "10433": {
      "op": "GT"
    },
    "10434": {
      "op": "ISZERO"
    },
    "10435": {
      "op": "PUSH2",
      "value": "0x28CB"
    },
    "10438": {
      "op": "JUMPI"
    },
    "10439": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10441": {
      "op": "DUP1"
    },
    "10442": {
      "op": "REVERT"
    },
    "10443": {
      "op": "JUMPDEST"
    },
    "10444": {
      "op": "DUP2"
    },
    "10445": {
      "op": "DUP6"
    },
    "10446": {
      "op": "ADD"
    },
    "10447": {
      "op": "SWAP2"
    },
    "10448": {
      "op": "POP"
    },
    "10449": {
      "op": "DUP6"
    },
    "10450": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "10452": {
      "op": "DUP4"
    },
    "10453": {
      "op": "ADD"
    },
    "10454": {
      "op": "SLT"
    },
    "10455": {
      "op": "PUSH2",
      "value": "0x28DF"
    },
    "10458": {
      "op": "JUMPI"
    },
    "10459": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10461": {
      "op": "DUP1"
    },
    "10462": {
      "op": "REVERT"
    },
    "10463": {
      "op": "JUMPDEST"
    },
    "10464": {
      "op": "DUP2"
    },
    "10465": {
      "op": "CALLDATALOAD"
    },
    "10466": {
      "op": "DUP2"
    },
    "10467": {
      "op": "DUP2"
    },
    "10468": {
      "op": "GT"
    },
    "10469": {
      "op": "ISZERO"
    },
    "10470": {
      "op": "PUSH2",
      "value": "0x28F1"
    },
    "10473": {
      "op": "JUMPI"
    },
    "10474": {
      "op": "PUSH2",
      "value": "0x28F1"
    },
    "10477": {
      "op": "PUSH2",
      "value": "0x2825"
    },
    "10480": {
      "jump": "i",
      "op": "JUMP"
    },
    "10481": {
      "op": "JUMPDEST"
    },
    "10482": {
      "op": "PUSH2",
      "value": "0x28FF"
    },
    "10485": {
      "op": "DUP5"
    },
    "10486": {
      "op": "DUP3"
    },
    "10487": {
      "op": "PUSH1",
      "value": "0x5"
    },
    "10489": {
      "op": "SHL"
    },
    "10490": {
      "op": "ADD"
    },
    "10491": {
      "op": "PUSH2",
      "value": "0x2863"
    },
    "10494": {
      "jump": "i",
      "op": "JUMP"
    },
    "10495": {
      "op": "JUMPDEST"
    },
    "10496": {
      "op": "DUP2"
    },
    "10497": {
      "op": "DUP2"
    },
    "10498": {
      "op": "MSTORE"
    },
    "10499": {
      "op": "DUP5"
    },
    "10500": {
      "op": "DUP2"
    },
    "10501": {
      "op": "ADD"
    },
    "10502": {
      "op": "SWAP3"
    },
    "10503": {
      "op": "POP"
    },
    "10504": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "10506": {
      "op": "SWAP2"
    },
    "10507": {
      "op": "DUP3"
    },
    "10508": {
      "op": "MUL"
    },
    "10509": {
      "op": "DUP5"
    },
    "10510": {
      "op": "ADD"
    },
    "10511": {
      "op": "DUP6"
    },
    "10512": {
      "op": "ADD"
    },
    "10513": {
      "op": "SWAP2"
    },
    "10514": {
      "op": "DUP9"
    },
    "10515": {
      "op": "DUP4"
    },
    "10516": {
      "op": "GT"
    },
    "10517": {
      "op": "ISZERO"
    },
    "10518": {
      "op": "PUSH2",
      "value": "0x291E"
    },
    "10521": {
      "op": "JUMPI"
    },
    "10522": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10524": {
      "op": "DUP1"
    },
    "10525": {
      "op": "REVERT"
    },
    "10526": {
      "op": "JUMPDEST"
    },
    "10527": {
      "op": "SWAP4"
    },
    "10528": {
      "op": "DUP6"
    },
    "10529": {
      "op": "ADD"
    },
    "10530": {
      "op": "SWAP4"
    },
    "10531": {
      "op": "JUMPDEST"
    },
    "10532": {
      "op": "DUP3"
    },
    "10533": {
      "op": "DUP6"
    },
    "10534": {
      "op": "LT"
    },
    "10535": {
      "op": "ISZERO"
    },
    "10536": {
      "op": "PUSH2",
      "value": "0x2997"
    },
    "10539": {
      "op": "JUMPI"
    },
    "10540": {
      "op": "DUP1"
    },
    "10541": {
      "op": "DUP6"
    },
    "10542": {
      "op": "DUP11"
    },
    "10543": {
      "op": "SUB"
    },
    "10544": {
      "op": "SLT"
    },
    "10545": {
      "op": "ISZERO"
    },
    "10546": {
      "op": "PUSH2",
      "value": "0x293B"
    },
    "10549": {
      "op": "JUMPI"
    },
    "10550": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10552": {
      "op": "DUP1"
    },
    "10553": {
      "op": "DUP2"
    },
    "10554": {
      "op": "REVERT"
    },
    "10555": {
      "op": "JUMPDEST"
    },
    "10556": {
      "op": "PUSH2",
      "value": "0x2943"
    },
    "10559": {
      "op": "PUSH2",
      "value": "0x283B"
    },
    "10562": {
      "jump": "i",
      "op": "JUMP"
    },
    "10563": {
      "op": "JUMPDEST"
    },
    "10564": {
      "op": "DUP6"
    },
    "10565": {
      "op": "CALLDATALOAD"
    },
    "10566": {
      "op": "PUSH2",
      "value": "0x294E"
    },
    "10569": {
      "op": "DUP2"
    },
    "10570": {
      "op": "PUSH2",
      "value": "0x2554"
    },
    "10573": {
      "jump": "i",
      "op": "JUMP"
    },
    "10574": {
      "op": "JUMPDEST"
    },
    "10575": {
      "op": "DUP2"
    },
    "10576": {
      "op": "MSTORE"
    },
    "10577": {
      "op": "DUP6"
    },
    "10578": {
      "op": "DUP8"
    },
    "10579": {
      "op": "ADD"
    },
    "10580": {
      "op": "CALLDATALOAD"
    },
    "10581": {
      "op": "PUSH2",
      "value": "0x295D"
    },
    "10584": {
      "op": "DUP2"
    },
    "10585": {
      "op": "PUSH2",
      "value": "0x2554"
    },
    "10588": {
      "jump": "i",
      "op": "JUMP"
    },
    "10589": {
      "op": "JUMPDEST"
    },
    "10590": {
      "op": "DUP2"
    },
    "10591": {
      "op": "DUP9"
    },
    "10592": {
      "op": "ADD"
    },
    "10593": {
      "op": "MSTORE"
    },
    "10594": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "10596": {
      "op": "DUP7"
    },
    "10597": {
      "op": "DUP2"
    },
    "10598": {
      "op": "ADD"
    },
    "10599": {
      "op": "CALLDATALOAD"
    },
    "10600": {
      "op": "PUSH2",
      "value": "0x2970"
    },
    "10603": {
      "op": "DUP2"
    },
    "10604": {
      "op": "PUSH2",
      "value": "0x2893"
    },
    "10607": {
      "jump": "i",
      "op": "JUMP"
    },
    "10608": {
      "op": "JUMPDEST"
    },
    "10609": {
      "op": "SWAP1"
    },
    "10610": {
      "op": "DUP3"
    },
    "10611": {
      "op": "ADD"
    },
    "10612": {
      "op": "MSTORE"
    },
    "10613": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "10615": {
      "op": "DUP7"
    },
    "10616": {
      "op": "DUP2"
    },
    "10617": {
      "op": "ADD"
    },
    "10618": {
      "op": "CALLDATALOAD"
    },
    "10619": {
      "op": "SWAP1"
    },
    "10620": {
      "op": "DUP3"
    },
    "10621": {
      "op": "ADD"
    },
    "10622": {
      "op": "MSTORE"
    },
    "10623": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "10625": {
      "op": "DUP1"
    },
    "10626": {
      "op": "DUP8"
    },
    "10627": {
      "op": "ADD"
    },
    "10628": {
      "op": "CALLDATALOAD"
    },
    "10629": {
      "op": "SWAP1"
    },
    "10630": {
      "op": "DUP3"
    },
    "10631": {
      "op": "ADD"
    },
    "10632": {
      "op": "MSTORE"
    },
    "10633": {
      "op": "DUP5"
    },
    "10634": {
      "op": "MSTORE"
    },
    "10635": {
      "op": "SWAP4"
    },
    "10636": {
      "op": "DUP5"
    },
    "10637": {
      "op": "ADD"
    },
    "10638": {
      "op": "SWAP4"
    },
    "10639": {
      "op": "SWAP3"
    },
    "10640": {
      "op": "DUP6"
    },
    "10641": {
      "op": "ADD"
    },
    "10642": {
      "op": "SWAP3"
    },
    "10643": {
      "op": "PUSH2",
      "value": "0x2923"
    },
    "10646": {
      "op": "JUMP"
    },
    "10647": {
      "op": "JUMPDEST"
    },
    "10648": {
      "op": "POP"
    },
    "10649": {
      "op": "SWAP8"
    },
    "10650": {
      "op": "SWAP7"
    },
    "10651": {
      "op": "POP"
    },
    "10652": {
      "op": "POP"
    },
    "10653": {
      "op": "POP"
    },
    "10654": {
      "op": "POP"
    },
    "10655": {
      "op": "POP"
    },
    "10656": {
      "op": "POP"
    },
    "10657": {
      "op": "POP"
    },
    "10658": {
      "jump": "o",
      "op": "JUMP"
    },
    "10659": {
      "op": "JUMPDEST"
    },
    "10660": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "10662": {
      "op": "DUP1"
    },
    "10663": {
      "op": "DUP3"
    },
    "10664": {
      "op": "MSTORE"
    },
    "10665": {
      "op": "PUSH1",
      "value": "0x10"
    },
    "10667": {
      "op": "SWAP1"
    },
    "10668": {
      "op": "DUP3"
    },
    "10669": {
      "op": "ADD"
    },
    "10670": {
      "op": "MSTORE"
    },
    "10671": {
      "op": "PUSH16",
      "value": "0x14185D5CD8589B194E881C185D5CD959"
    },
    "10688": {
      "op": "PUSH1",
      "value": "0x82"
    },
    "10690": {
      "op": "SHL"
    },
    "10691": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "10693": {
      "op": "DUP3"
    },
    "10694": {
      "op": "ADD"
    },
    "10695": {
      "op": "MSTORE"
    },
    "10696": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "10698": {
      "op": "ADD"
    },
    "10699": {
      "op": "SWAP1"
    },
    "10700": {
      "jump": "o",
      "op": "JUMP"
    },
    "10701": {
      "op": "JUMPDEST"
    },
    "10702": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10704": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "10706": {
      "op": "DUP3"
    },
    "10707": {
      "op": "DUP5"
    },
    "10708": {
      "op": "SUB"
    },
    "10709": {
      "op": "SLT"
    },
    "10710": {
      "op": "ISZERO"
    },
    "10711": {
      "op": "PUSH2",
      "value": "0x29DF"
    },
    "10714": {
      "op": "JUMPI"
    },
    "10715": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10717": {
      "op": "DUP1"
    },
    "10718": {
      "op": "REVERT"
    },
    "10719": {
      "op": "JUMPDEST"
    },
    "10720": {
      "op": "DUP2"
    },
    "10721": {
      "op": "MLOAD"
    },
    "10722": {
      "op": "PUSH2",
      "value": "0x1124"
    },
    "10725": {
      "op": "DUP2"
    },
    "10726": {
      "op": "PUSH2",
      "value": "0x2554"
    },
    "10729": {
      "jump": "i",
      "op": "JUMP"
    },
    "10730": {
      "op": "JUMPDEST"
    },
    "10731": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "10733": {
      "op": "DUP1"
    },
    "10734": {
      "op": "DUP3"
    },
    "10735": {
      "op": "MSTORE"
    },
    "10736": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "10738": {
      "op": "SWAP1"
    },
    "10739": {
      "op": "DUP3"
    },
    "10740": {
      "op": "ADD"
    },
    "10741": {
      "op": "MSTORE"
    },
    "10742": {
      "op": "PUSH32",
      "value": "0x526166666C6573206D7573742068617665206174206C65617374203220746963"
    },
    "10775": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "10777": {
      "op": "DUP3"
    },
    "10778": {
      "op": "ADD"
    },
    "10779": {
      "op": "MSTORE"
    },
    "10780": {
      "op": "PUSH4",
      "value": "0x6B657473"
    },
    "10785": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "10787": {
      "op": "SHL"
    },
    "10788": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "10790": {
      "op": "DUP3"
    },
    "10791": {
      "op": "ADD"
    },
    "10792": {
      "op": "MSTORE"
    },
    "10793": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "10795": {
      "op": "ADD"
    },
    "10796": {
      "op": "SWAP1"
    },
    "10797": {
      "jump": "o",
      "op": "JUMP"
    },
    "10798": {
      "op": "JUMPDEST"
    },
    "10799": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "10801": {
      "op": "DUP1"
    },
    "10802": {
      "op": "DUP3"
    },
    "10803": {
      "op": "MSTORE"
    },
    "10804": {
      "op": "PUSH1",
      "value": "0x2E"
    },
    "10806": {
      "op": "SWAP1"
    },
    "10807": {
      "op": "DUP3"
    },
    "10808": {
      "op": "ADD"
    },
    "10809": {
      "op": "MSTORE"
    },
    "10810": {
      "op": "PUSH32",
      "value": "0x5F6D696E696D756D5469636B657473536F6C642073686F756C64203C3D205F6E"
    },
    "10843": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "10845": {
      "op": "DUP3"
    },
    "10846": {
      "op": "ADD"
    },
    "10847": {
      "op": "MSTORE"
    },
    "10848": {
      "op": "PUSH14",
      "value": "0x756D6265724F665469636B657473"
    },
    "10863": {
      "op": "PUSH1",
      "value": "0x90"
    },
    "10865": {
      "op": "SHL"
    },
    "10866": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "10868": {
      "op": "DUP3"
    },
    "10869": {
      "op": "ADD"
    },
    "10870": {
      "op": "MSTORE"
    },
    "10871": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "10873": {
      "op": "ADD"
    },
    "10874": {
      "op": "SWAP1"
    },
    "10875": {
      "jump": "o",
      "op": "JUMP"
    },
    "10876": {
      "op": "JUMPDEST"
    },
    "10877": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "10882": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "10884": {
      "op": "SHL"
    },
    "10885": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10887": {
      "op": "MSTORE"
    },
    "10888": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "10890": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "10892": {
      "op": "MSTORE"
    },
    "10893": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "10895": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10897": {
      "op": "REVERT"
    },
    "10898": {
      "op": "JUMPDEST"
    },
    "10899": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10901": {
      "op": "DUP3"
    },
    "10902": {
      "op": "NOT"
    },
    "10903": {
      "op": "DUP3"
    },
    "10904": {
      "op": "GT"
    },
    "10905": {
      "op": "ISZERO"
    },
    "10906": {
      "op": "PUSH2",
      "value": "0x2AA5"
    },
    "10909": {
      "op": "JUMPI"
    },
    "10910": {
      "op": "PUSH2",
      "value": "0x2AA5"
    },
    "10913": {
      "op": "PUSH2",
      "value": "0x2A7C"
    },
    "10916": {
      "jump": "i",
      "op": "JUMP"
    },
    "10917": {
      "op": "JUMPDEST"
    },
    "10918": {
      "op": "POP"
    },
    "10919": {
      "op": "ADD"
    },
    "10920": {
      "op": "SWAP1"
    },
    "10921": {
      "jump": "o",
      "op": "JUMP"
    },
    "10922": {
      "op": "JUMPDEST"
    },
    "10923": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "10925": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "10927": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "10929": {
      "op": "SHL"
    },
    "10930": {
      "op": "SUB"
    },
    "10931": {
      "op": "DUP13"
    },
    "10932": {
      "op": "DUP2"
    },
    "10933": {
      "op": "AND"
    },
    "10934": {
      "op": "DUP3"
    },
    "10935": {
      "op": "MSTORE"
    },
    "10936": {
      "op": "DUP12"
    },
    "10937": {
      "op": "AND"
    },
    "10938": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "10940": {
      "op": "DUP3"
    },
    "10941": {
      "op": "ADD"
    },
    "10942": {
      "op": "MSTORE"
    },
    "10943": {
      "op": "PUSH2",
      "value": "0x160"
    },
    "10946": {
      "op": "DUP2"
    },
    "10947": {
      "op": "ADD"
    },
    "10948": {
      "op": "PUSH1",
      "value": "0x2"
    },
    "10950": {
      "op": "DUP12"
    },
    "10951": {
      "op": "LT"
    },
    "10952": {
      "op": "PUSH2",
      "value": "0x2AE1"
    },
    "10955": {
      "op": "JUMPI"
    },
    "10956": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "10961": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "10963": {
      "op": "SHL"
    },
    "10964": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10966": {
      "op": "MSTORE"
    },
    "10967": {
      "op": "PUSH1",
      "value": "0x21"
    },
    "10969": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "10971": {
      "op": "MSTORE"
    },
    "10972": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "10974": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "10976": {
      "op": "REVERT"
    },
    "10977": {
      "op": "JUMPDEST"
    },
    "10978": {
      "op": "DUP11"
    },
    "10979": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "10981": {
      "op": "DUP4"
    },
    "10982": {
      "op": "ADD"
    },
    "10983": {
      "op": "MSTORE"
    },
    "10984": {
      "op": "PUSH2",
      "value": "0x2AFC"
    },
    "10987": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "10989": {
      "op": "DUP4"
    },
    "10990": {
      "op": "ADD"
    },
    "10991": {
      "op": "DUP12"
    },
    "10992": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "10994": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "10996": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "10998": {
      "op": "SHL"
    },
    "10999": {
      "op": "SUB"
    },
    "11000": {
      "op": "AND"
    },
    "11001": {
      "op": "SWAP1"
    },
    "11002": {
      "op": "MSTORE"
    },
    "11003": {
      "op": "JUMP"
    },
    "11004": {
      "op": "JUMPDEST"
    },
    "11005": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "11007": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "11009": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "11011": {
      "op": "SHL"
    },
    "11012": {
      "op": "SUB"
    },
    "11013": {
      "op": "DUP10"
    },
    "11014": {
      "op": "AND"
    },
    "11015": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "11017": {
      "op": "DUP4"
    },
    "11018": {
      "op": "ADD"
    },
    "11019": {
      "op": "MSTORE"
    },
    "11020": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "11022": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "11024": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "11026": {
      "op": "SHL"
    },
    "11027": {
      "op": "SUB"
    },
    "11028": {
      "op": "DUP9"
    },
    "11029": {
      "op": "AND"
    },
    "11030": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "11032": {
      "op": "DUP4"
    },
    "11033": {
      "op": "ADD"
    },
    "11034": {
      "op": "MSTORE"
    },
    "11035": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "11037": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "11039": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "11041": {
      "op": "SHL"
    },
    "11042": {
      "op": "SUB"
    },
    "11043": {
      "op": "DUP8"
    },
    "11044": {
      "op": "AND"
    },
    "11045": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "11047": {
      "op": "DUP4"
    },
    "11048": {
      "op": "ADD"
    },
    "11049": {
      "op": "MSTORE"
    },
    "11050": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "11052": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "11054": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "11056": {
      "op": "SHL"
    },
    "11057": {
      "op": "SUB"
    },
    "11058": {
      "op": "DUP7"
    },
    "11059": {
      "op": "AND"
    },
    "11060": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "11062": {
      "op": "DUP4"
    },
    "11063": {
      "op": "ADD"
    },
    "11064": {
      "op": "MSTORE"
    },
    "11065": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "11067": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "11069": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "11071": {
      "op": "SHL"
    },
    "11072": {
      "op": "SUB"
    },
    "11073": {
      "op": "DUP6"
    },
    "11074": {
      "op": "AND"
    },
    "11075": {
      "op": "PUSH2",
      "value": "0x100"
    },
    "11078": {
      "op": "DUP4"
    },
    "11079": {
      "op": "ADD"
    },
    "11080": {
      "op": "MSTORE"
    },
    "11081": {
      "op": "PUSH2",
      "value": "0x120"
    },
    "11084": {
      "op": "DUP3"
    },
    "11085": {
      "op": "ADD"
    },
    "11086": {
      "op": "SWAP4"
    },
    "11087": {
      "op": "SWAP1"
    },
    "11088": {
      "op": "SWAP4"
    },
    "11089": {
      "op": "MSTORE"
    },
    "11090": {
      "op": "PUSH2",
      "value": "0x140"
    },
    "11093": {
      "op": "ADD"
    },
    "11094": {
      "op": "MSTORE"
    },
    "11095": {
      "op": "SWAP10"
    },
    "11096": {
      "op": "SWAP9"
    },
    "11097": {
      "op": "POP"
    },
    "11098": {
      "op": "POP"
    },
    "11099": {
      "op": "POP"
    },
    "11100": {
      "op": "POP"
    },
    "11101": {
      "op": "POP"
    },
    "11102": {
      "op": "POP"
    },
    "11103": {
      "op": "POP"
    },
    "11104": {
      "op": "POP"
    },
    "11105": {
      "op": "POP"
    },
    "11106": {
      "jump": "o",
      "op": "JUMP"
    },
    "11107": {
      "op": "JUMPDEST"
    },
    "11108": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "11113": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "11115": {
      "op": "SHL"
    },
    "11116": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "11118": {
      "op": "MSTORE"
    },
    "11119": {
      "op": "PUSH1",
      "value": "0x32"
    },
    "11121": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "11123": {
      "op": "MSTORE"
    },
    "11124": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "11126": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "11128": {
      "op": "REVERT"
    },
    "11129": {
      "op": "JUMPDEST"
    },
    "11130": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "11132": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "11134": {
      "op": "DUP3"
    },
    "11135": {
      "op": "ADD"
    },
    "11136": {
      "op": "PUSH2",
      "value": "0x2B8B"
    },
    "11139": {
      "op": "JUMPI"
    },
    "11140": {
      "op": "PUSH2",
      "value": "0x2B8B"
    },
    "11143": {
      "op": "PUSH2",
      "value": "0x2A7C"
    },
    "11146": {
      "jump": "i",
      "op": "JUMP"
    },
    "11147": {
      "op": "JUMPDEST"
    },
    "11148": {
      "op": "POP"
    },
    "11149": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "11151": {
      "op": "ADD"
    },
    "11152": {
      "op": "SWAP1"
    },
    "11153": {
      "jump": "o",
      "op": "JUMP"
    },
    "11154": {
      "op": "JUMPDEST"
    },
    "11155": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "11157": {
      "op": "DUP1"
    },
    "11158": {
      "op": "DUP3"
    },
    "11159": {
      "op": "MSTORE"
    },
    "11160": {
      "op": "DUP2"
    },
    "11161": {
      "op": "DUP2"
    },
    "11162": {
      "op": "ADD"
    },
    "11163": {
      "op": "MSTORE"
    },
    "11164": {
      "op": "PUSH32",
      "value": "0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
    },
    "11197": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "11199": {
      "op": "DUP3"
    },
    "11200": {
      "op": "ADD"
    },
    "11201": {
      "op": "MSTORE"
    },
    "11202": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "11204": {
      "op": "ADD"
    },
    "11205": {
      "op": "SWAP1"
    },
    "11206": {
      "jump": "o",
      "op": "JUMP"
    },
    "11207": {
      "op": "JUMPDEST"
    },
    "11208": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "11210": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "11212": {
      "op": "DUP3"
    },
    "11213": {
      "op": "DUP5"
    },
    "11214": {
      "op": "SUB"
    },
    "11215": {
      "op": "SLT"
    },
    "11216": {
      "op": "ISZERO"
    },
    "11217": {
      "op": "PUSH2",
      "value": "0x2BD9"
    },
    "11220": {
      "op": "JUMPI"
    },
    "11221": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "11223": {
      "op": "DUP1"
    },
    "11224": {
      "op": "REVERT"
    },
    "11225": {
      "op": "JUMPDEST"
    },
    "11226": {
      "op": "DUP2"
    },
    "11227": {
      "op": "MLOAD"
    },
    "11228": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "11230": {
      "op": "DUP2"
    },
    "11231": {
      "op": "AND"
    },
    "11232": {
      "op": "DUP2"
    },
    "11233": {
      "op": "EQ"
    },
    "11234": {
      "op": "PUSH2",
      "value": "0x1124"
    },
    "11237": {
      "op": "JUMPI"
    },
    "11238": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "11240": {
      "op": "DUP1"
    },
    "11241": {
      "op": "REVERT"
    },
    "11242": {
      "op": "JUMPDEST"
    },
    "11243": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "11245": {
      "op": "DUP2"
    },
    "11246": {
      "op": "DUP2"
    },
    "11247": {
      "op": "JUMPDEST"
    },
    "11248": {
      "op": "DUP1"
    },
    "11249": {
      "op": "DUP6"
    },
    "11250": {
      "op": "GT"
    },
    "11251": {
      "op": "ISZERO"
    },
    "11252": {
      "op": "PUSH2",
      "value": "0x2C25"
    },
    "11255": {
      "op": "JUMPI"
    },
    "11256": {
      "op": "DUP2"
    },
    "11257": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "11259": {
      "op": "NOT"
    },
    "11260": {
      "op": "DIV"
    },
    "11261": {
      "op": "DUP3"
    },
    "11262": {
      "op": "GT"
    },
    "11263": {
      "op": "ISZERO"
    },
    "11264": {
      "op": "PUSH2",
      "value": "0x2C0B"
    },
    "11267": {
      "op": "JUMPI"
    },
    "11268": {
      "op": "PUSH2",
      "value": "0x2C0B"
    },
    "11271": {
      "op": "PUSH2",
      "value": "0x2A7C"
    },
    "11274": {
      "jump": "i",
      "op": "JUMP"
    },
    "11275": {
      "op": "JUMPDEST"
    },
    "11276": {
      "op": "DUP1"
    },
    "11277": {
      "op": "DUP6"
    },
    "11278": {
      "op": "AND"
    },
    "11279": {
      "op": "ISZERO"
    },
    "11280": {
      "op": "PUSH2",
      "value": "0x2C18"
    },
    "11283": {
      "op": "JUMPI"
    },
    "11284": {
      "op": "SWAP2"
    },
    "11285": {
      "op": "DUP2"
    },
    "11286": {
      "op": "MUL"
    },
    "11287": {
      "op": "SWAP2"
    },
    "11288": {
      "op": "JUMPDEST"
    },
    "11289": {
      "op": "SWAP4"
    },
    "11290": {
      "op": "DUP5"
    },
    "11291": {
      "op": "SHR"
    },
    "11292": {
      "op": "SWAP4"
    },
    "11293": {
      "op": "SWAP1"
    },
    "11294": {
      "op": "DUP1"
    },
    "11295": {
      "op": "MUL"
    },
    "11296": {
      "op": "SWAP1"
    },
    "11297": {
      "op": "PUSH2",
      "value": "0x2BEF"
    },
    "11300": {
      "op": "JUMP"
    },
    "11301": {
      "op": "JUMPDEST"
    },
    "11302": {
      "op": "POP"
    },
    "11303": {
      "op": "SWAP3"
    },
    "11304": {
      "op": "POP"
    },
    "11305": {
      "op": "SWAP3"
    },
    "11306": {
      "op": "SWAP1"
    },
    "11307": {
      "op": "POP"
    },
    "11308": {
      "jump": "o",
      "op": "JUMP"
    },
    "11309": {
      "op": "JUMPDEST"
    },
    "11310": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "11312": {
      "op": "DUP3"
    },
    "11313": {
      "op": "PUSH2",
      "value": "0x2C3C"
    },
    "11316": {
      "op": "JUMPI"
    },
    "11317": {
      "op": "POP"
    },
    "11318": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "11320": {
      "op": "PUSH2",
      "value": "0x2CCA"
    },
    "11323": {
      "op": "JUMP"
    },
    "11324": {
      "op": "JUMPDEST"
    },
    "11325": {
      "op": "DUP2"
    },
    "11326": {
      "op": "PUSH2",
      "value": "0x2C49"
    },
    "11329": {
      "op": "JUMPI"
    },
    "11330": {
      "op": "POP"
    },
    "11331": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "11333": {
      "op": "PUSH2",
      "value": "0x2CCA"
    },
    "11336": {
      "op": "JUMP"
    },
    "11337": {
      "op": "JUMPDEST"
    },
    "11338": {
      "op": "DUP2"
    },
    "11339": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "11341": {
      "op": "DUP2"
    },
    "11342": {
      "op": "EQ"
    },
    "11343": {
      "op": "PUSH2",
      "value": "0x2C5F"
    },
    "11346": {
      "op": "JUMPI"
    },
    "11347": {
      "op": "PUSH1",
      "value": "0x2"
    },
    "11349": {
      "op": "DUP2"
    },
    "11350": {
      "op": "EQ"
    },
    "11351": {
      "op": "PUSH2",
      "value": "0x2C69"
    },
    "11354": {
      "op": "JUMPI"
    },
    "11355": {
      "op": "PUSH2",
      "value": "0x2C85"
    },
    "11358": {
      "op": "JUMP"
    },
    "11359": {
      "op": "JUMPDEST"
    },
    "11360": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "11362": {
      "op": "SWAP2"
    },
    "11363": {
      "op": "POP"
    },
    "11364": {
      "op": "POP"
    },
    "11365": {
      "op": "PUSH2",
      "value": "0x2CCA"
    },
    "11368": {
      "op": "JUMP"
    },
    "11369": {
      "op": "JUMPDEST"
    },
    "11370": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "11372": {
      "op": "DUP5"
    },
    "11373": {
      "op": "GT"
    },
    "11374": {
      "op": "ISZERO"
    },
    "11375": {
      "op": "PUSH2",
      "value": "0x2C7A"
    },
    "11378": {
      "op": "JUMPI"
    },
    "11379": {
      "op": "PUSH2",
      "value": "0x2C7A"
    },
    "11382": {
      "op": "PUSH2",
      "value": "0x2A7C"
    },
    "11385": {
      "jump": "i",
      "op": "JUMP"
    },
    "11386": {
      "op": "JUMPDEST"
    },
    "11387": {
      "op": "POP"
    },
    "11388": {
      "op": "POP"
    },
    "11389": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "11391": {
      "op": "DUP3"
    },
    "11392": {
      "op": "SHL"
    },
    "11393": {
      "op": "PUSH2",
      "value": "0x2CCA"
    },
    "11396": {
      "op": "JUMP"
    },
    "11397": {
      "op": "JUMPDEST"
    },
    "11398": {
      "op": "POP"
    },
    "11399": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "11401": {
      "op": "DUP4"
    },
    "11402": {
      "op": "LT"
    },
    "11403": {
      "op": "PUSH2",
      "value": "0x133"
    },
    "11406": {
      "op": "DUP4"
    },
    "11407": {
      "op": "LT"
    },
    "11408": {
      "op": "AND"
    },
    "11409": {
      "op": "PUSH1",
      "value": "0x4E"
    },
    "11411": {
      "op": "DUP5"
    },
    "11412": {
      "op": "LT"
    },
    "11413": {
      "op": "PUSH1",
      "value": "0xB"
    },
    "11415": {
      "op": "DUP5"
    },
    "11416": {
      "op": "LT"
    },
    "11417": {
      "op": "AND"
    },
    "11418": {
      "op": "OR"
    },
    "11419": {
      "op": "ISZERO"
    },
    "11420": {
      "op": "PUSH2",
      "value": "0x2CA8"
    },
    "11423": {
      "op": "JUMPI"
    },
    "11424": {
      "op": "POP"
    },
    "11425": {
      "op": "DUP2"
    },
    "11426": {
      "op": "DUP2"
    },
    "11427": {
      "op": "EXP"
    },
    "11428": {
      "op": "PUSH2",
      "value": "0x2CCA"
    },
    "11431": {
      "op": "JUMP"
    },
    "11432": {
      "op": "JUMPDEST"
    },
    "11433": {
      "op": "PUSH2",
      "value": "0x2CB2"
    },
    "11436": {
      "op": "DUP4"
    },
    "11437": {
      "op": "DUP4"
    },
    "11438": {
      "op": "PUSH2",
      "value": "0x2BEA"
    },
    "11441": {
      "jump": "i",
      "op": "JUMP"
    },
    "11442": {
      "op": "JUMPDEST"
    },
    "11443": {
      "op": "DUP1"
    },
    "11444": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "11446": {
      "op": "NOT"
    },
    "11447": {
      "op": "DIV"
    },
    "11448": {
      "op": "DUP3"
    },
    "11449": {
      "op": "GT"
    },
    "11450": {
      "op": "ISZERO"
    },
    "11451": {
      "op": "PUSH2",
      "value": "0x2CC6"
    },
    "11454": {
      "op": "JUMPI"
    },
    "11455": {
      "op": "PUSH2",
      "value": "0x2CC6"
    },
    "11458": {
      "op": "PUSH2",
      "value": "0x2A7C"
    },
    "11461": {
      "jump": "i",
      "op": "JUMP"
    },
    "11462": {
      "op": "JUMPDEST"
    },
    "11463": {
      "op": "MUL"
    },
    "11464": {
      "op": "SWAP1"
    },
    "11465": {
      "op": "POP"
    },
    "11466": {
      "op": "JUMPDEST"
    },
    "11467": {
      "op": "SWAP3"
    },
    "11468": {
      "op": "SWAP2"
    },
    "11469": {
      "op": "POP"
    },
    "11470": {
      "op": "POP"
    },
    "11471": {
      "jump": "o",
      "op": "JUMP"
    },
    "11472": {
      "op": "JUMPDEST"
    },
    "11473": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "11475": {
      "op": "PUSH2",
      "value": "0x1124"
    },
    "11478": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "11480": {
      "op": "DUP5"
    },
    "11481": {
      "op": "AND"
    },
    "11482": {
      "op": "DUP4"
    },
    "11483": {
      "op": "PUSH2",
      "value": "0x2C2D"
    },
    "11486": {
      "jump": "i",
      "op": "JUMP"
    },
    "11487": {
      "op": "JUMPDEST"
    },
    "11488": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "11490": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "11492": {
      "op": "DUP3"
    },
    "11493": {
      "op": "DUP5"
    },
    "11494": {
      "op": "SUB"
    },
    "11495": {
      "op": "SLT"
    },
    "11496": {
      "op": "ISZERO"
    },
    "11497": {
      "op": "PUSH2",
      "value": "0x2CF1"
    },
    "11500": {
      "op": "JUMPI"
    },
    "11501": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "11503": {
      "op": "DUP1"
    },
    "11504": {
      "op": "REVERT"
    },
    "11505": {
      "op": "JUMPDEST"
    },
    "11506": {
      "op": "POP"
    },
    "11507": {
      "op": "MLOAD"
    },
    "11508": {
      "op": "SWAP2"
    },
    "11509": {
      "op": "SWAP1"
    },
    "11510": {
      "op": "POP"
    },
    "11511": {
      "jump": "o",
      "op": "JUMP"
    },
    "11512": {
      "op": "JUMPDEST"
    },
    "11513": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "11515": {
      "op": "DUP2"
    },
    "11516": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "11518": {
      "op": "NOT"
    },
    "11519": {
      "op": "DIV"
    },
    "11520": {
      "op": "DUP4"
    },
    "11521": {
      "op": "GT"
    },
    "11522": {
      "op": "DUP3"
    },
    "11523": {
      "op": "ISZERO"
    },
    "11524": {
      "op": "ISZERO"
    },
    "11525": {
      "op": "AND"
    },
    "11526": {
      "op": "ISZERO"
    },
    "11527": {
      "op": "PUSH2",
      "value": "0x2D12"
    },
    "11530": {
      "op": "JUMPI"
    },
    "11531": {
      "op": "PUSH2",
      "value": "0x2D12"
    },
    "11534": {
      "op": "PUSH2",
      "value": "0x2A7C"
    },
    "11537": {
      "jump": "i",
      "op": "JUMP"
    },
    "11538": {
      "op": "JUMPDEST"
    },
    "11539": {
      "op": "POP"
    },
    "11540": {
      "op": "MUL"
    },
    "11541": {
      "op": "SWAP1"
    },
    "11542": {
      "jump": "o",
      "op": "JUMP"
    },
    "11543": {
      "op": "JUMPDEST"
    },
    "11544": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "11549": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "11551": {
      "op": "SHL"
    },
    "11552": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "11554": {
      "op": "MSTORE"
    },
    "11555": {
      "op": "PUSH1",
      "value": "0x12"
    },
    "11557": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "11559": {
      "op": "MSTORE"
    },
    "11560": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "11562": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "11564": {
      "op": "REVERT"
    },
    "11565": {
      "op": "JUMPDEST"
    },
    "11566": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "11568": {
      "op": "DUP3"
    },
    "11569": {
      "op": "PUSH2",
      "value": "0x2D3C"
    },
    "11572": {
      "op": "JUMPI"
    },
    "11573": {
      "op": "PUSH2",
      "value": "0x2D3C"
    },
    "11576": {
      "op": "PUSH2",
      "value": "0x2D17"
    },
    "11579": {
      "jump": "i",
      "op": "JUMP"
    },
    "11580": {
      "op": "JUMPDEST"
    },
    "11581": {
      "op": "POP"
    },
    "11582": {
      "op": "DIV"
    },
    "11583": {
      "op": "SWAP1"
    },
    "11584": {
      "jump": "o",
      "op": "JUMP"
    },
    "11585": {
      "op": "JUMPDEST"
    },
    "11586": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "11588": {
      "op": "DUP3"
    },
    "11589": {
      "op": "DUP3"
    },
    "11590": {
      "op": "LT"
    },
    "11591": {
      "op": "ISZERO"
    },
    "11592": {
      "op": "PUSH2",
      "value": "0x2D53"
    },
    "11595": {
      "op": "JUMPI"
    },
    "11596": {
      "op": "PUSH2",
      "value": "0x2D53"
    },
    "11599": {
      "op": "PUSH2",
      "value": "0x2A7C"
    },
    "11602": {
      "jump": "i",
      "op": "JUMP"
    },
    "11603": {
      "op": "JUMPDEST"
    },
    "11604": {
      "op": "POP"
    },
    "11605": {
      "op": "SUB"
    },
    "11606": {
      "op": "SWAP1"
    },
    "11607": {
      "jump": "o",
      "op": "JUMP"
    },
    "11608": {
      "op": "JUMPDEST"
    },
    "11609": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "11611": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "11613": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "11615": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "11617": {
      "op": "SHL"
    },
    "11618": {
      "op": "SUB"
    },
    "11619": {
      "op": "DUP1"
    },
    "11620": {
      "op": "DUP4"
    },
    "11621": {
      "op": "AND"
    },
    "11622": {
      "op": "DUP2"
    },
    "11623": {
      "op": "DUP6"
    },
    "11624": {
      "op": "AND"
    },
    "11625": {
      "op": "DUP2"
    },
    "11626": {
      "op": "DUP4"
    },
    "11627": {
      "op": "DIV"
    },
    "11628": {
      "op": "DUP2"
    },
    "11629": {
      "op": "GT"
    },
    "11630": {
      "op": "DUP3"
    },
    "11631": {
      "op": "ISZERO"
    },
    "11632": {
      "op": "ISZERO"
    },
    "11633": {
      "op": "AND"
    },
    "11634": {
      "op": "ISZERO"
    },
    "11635": {
      "op": "PUSH2",
      "value": "0x2D7E"
    },
    "11638": {
      "op": "JUMPI"
    },
    "11639": {
      "op": "PUSH2",
      "value": "0x2D7E"
    },
    "11642": {
      "op": "PUSH2",
      "value": "0x2A7C"
    },
    "11645": {
      "jump": "i",
      "op": "JUMP"
    },
    "11646": {
      "op": "JUMPDEST"
    },
    "11647": {
      "op": "MUL"
    },
    "11648": {
      "op": "SWAP5"
    },
    "11649": {
      "op": "SWAP4"
    },
    "11650": {
      "op": "POP"
    },
    "11651": {
      "op": "POP"
    },
    "11652": {
      "op": "POP"
    },
    "11653": {
      "op": "POP"
    },
    "11654": {
      "jump": "o",
      "op": "JUMP"
    },
    "11655": {
      "op": "JUMPDEST"
    },
    "11656": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "11658": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "11660": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "11662": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "11664": {
      "op": "SHL"
    },
    "11665": {
      "op": "SUB"
    },
    "11666": {
      "op": "DUP1"
    },
    "11667": {
      "op": "DUP5"
    },
    "11668": {
      "op": "AND"
    },
    "11669": {
      "op": "DUP1"
    },
    "11670": {
      "op": "PUSH2",
      "value": "0x2DA1"
    },
    "11673": {
      "op": "JUMPI"
    },
    "11674": {
      "op": "PUSH2",
      "value": "0x2DA1"
    },
    "11677": {
      "op": "PUSH2",
      "value": "0x2D17"
    },
    "11680": {
      "jump": "i",
      "op": "JUMP"
    },
    "11681": {
      "op": "JUMPDEST"
    },
    "11682": {
      "op": "SWAP3"
    },
    "11683": {
      "op": "AND"
    },
    "11684": {
      "op": "SWAP2"
    },
    "11685": {
      "op": "SWAP1"
    },
    "11686": {
      "op": "SWAP2"
    },
    "11687": {
      "op": "DIV"
    },
    "11688": {
      "op": "SWAP3"
    },
    "11689": {
      "op": "SWAP2"
    },
    "11690": {
      "op": "POP"
    },
    "11691": {
      "op": "POP"
    },
    "11692": {
      "jump": "o",
      "op": "JUMP"
    },
    "11693": {
      "op": "JUMPDEST"
    },
    "11694": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "11696": {
      "op": "DUP1"
    },
    "11697": {
      "op": "DUP3"
    },
    "11698": {
      "op": "MSTORE"
    },
    "11699": {
      "op": "PUSH1",
      "value": "0x2E"
    },
    "11701": {
      "op": "SWAP1"
    },
    "11702": {
      "op": "DUP3"
    },
    "11703": {
      "op": "ADD"
    },
    "11704": {
      "op": "MSTORE"
    },
    "11705": {
      "op": "PUSH32",
      "value": "0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561"
    },
    "11738": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "11740": {
      "op": "DUP3"
    },
    "11741": {
      "op": "ADD"
    },
    "11742": {
      "op": "MSTORE"
    },
    "11743": {
      "op": "PUSH14",
      "value": "0x191E481A5B9A5D1A585B1A5E9959"
    },
    "11758": {
      "op": "PUSH1",
      "value": "0x92"
    },
    "11760": {
      "op": "SHL"
    },
    "11761": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "11763": {
      "op": "DUP3"
    },
    "11764": {
      "op": "ADD"
    },
    "11765": {
      "op": "MSTORE"
    },
    "11766": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "11768": {
      "op": "ADD"
    },
    "11769": {
      "op": "SWAP1"
    },
    "11770": {
      "jump": "o",
      "op": "JUMP"
    },
    "11771": {
      "op": "JUMPDEST"
    },
    "11772": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "11774": {
      "op": "DUP1"
    },
    "11775": {
      "op": "DUP3"
    },
    "11776": {
      "op": "MSTORE"
    },
    "11777": {
      "op": "PUSH1",
      "value": "0x2B"
    },
    "11779": {
      "op": "SWAP1"
    },
    "11780": {
      "op": "DUP3"
    },
    "11781": {
      "op": "ADD"
    },
    "11782": {
      "op": "MSTORE"
    },
    "11783": {
      "op": "PUSH32",
      "value": "0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069"
    },
    "11816": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "11818": {
      "op": "DUP3"
    },
    "11819": {
      "op": "ADD"
    },
    "11820": {
      "op": "MSTORE"
    },
    "11821": {
      "op": "PUSH11",
      "value": "0x6E697469616C697A696E67"
    },
    "11833": {
      "op": "PUSH1",
      "value": "0xA8"
    },
    "11835": {
      "op": "SHL"
    },
    "11836": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "11838": {
      "op": "DUP3"
    },
    "11839": {
      "op": "ADD"
    },
    "11840": {
      "op": "MSTORE"
    },
    "11841": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "11843": {
      "op": "ADD"
    },
    "11844": {
      "op": "SWAP1"
    },
    "11845": {
      "jump": "o",
      "op": "JUMP"
    },
    "11846": {
      "op": "JUMPDEST"
    },
    "11847": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "11849": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "11851": {
      "op": "DUP3"
    },
    "11852": {
      "op": "DUP5"
    },
    "11853": {
      "op": "SUB"
    },
    "11854": {
      "op": "SLT"
    },
    "11855": {
      "op": "ISZERO"
    },
    "11856": {
      "op": "PUSH2",
      "value": "0x2E58"
    },
    "11859": {
      "op": "JUMPI"
    },
    "11860": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "11862": {
      "op": "DUP1"
    },
    "11863": {
      "op": "REVERT"
    },
    "11864": {
      "op": "JUMPDEST"
    },
    "11865": {
      "op": "DUP2"
    },
    "11866": {
      "op": "MLOAD"
    },
    "11867": {
      "op": "PUSH2",
      "value": "0x1124"
    },
    "11870": {
      "op": "DUP2"
    },
    "11871": {
      "op": "PUSH2",
      "value": "0x2893"
    },
    "11874": {
      "jump": "i",
      "op": "JUMP"
    },
    "11875": {
      "op": "JUMPDEST"
    },
    "11876": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "11878": {
      "op": "JUMPDEST"
    },
    "11879": {
      "op": "DUP4"
    },
    "11880": {
      "op": "DUP2"
    },
    "11881": {
      "op": "LT"
    },
    "11882": {
      "op": "ISZERO"
    },
    "11883": {
      "op": "PUSH2",
      "value": "0x2E7E"
    },
    "11886": {
      "op": "JUMPI"
    },
    "11887": {
      "op": "DUP2"
    },
    "11888": {
      "op": "DUP2"
    },
    "11889": {
      "op": "ADD"
    },
    "11890": {
      "op": "MLOAD"
    },
    "11891": {
      "op": "DUP4"
    },
    "11892": {
      "op": "DUP3"
    },
    "11893": {
      "op": "ADD"
    },
    "11894": {
      "op": "MSTORE"
    },
    "11895": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "11897": {
      "op": "ADD"
    },
    "11898": {
      "op": "PUSH2",
      "value": "0x2E66"
    },
    "11901": {
      "op": "JUMP"
    },
    "11902": {
      "op": "JUMPDEST"
    },
    "11903": {
      "op": "DUP4"
    },
    "11904": {
      "op": "DUP2"
    },
    "11905": {
      "op": "GT"
    },
    "11906": {
      "op": "ISZERO"
    },
    "11907": {
      "op": "PUSH2",
      "value": "0x1FEA"
    },
    "11910": {
      "op": "JUMPI"
    },
    "11911": {
      "op": "POP"
    },
    "11912": {
      "op": "POP"
    },
    "11913": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "11915": {
      "op": "SWAP2"
    },
    "11916": {
      "op": "ADD"
    },
    "11917": {
      "op": "MSTORE"
    },
    "11918": {
      "jump": "o",
      "op": "JUMP"
    },
    "11919": {
      "op": "JUMPDEST"
    },
    "11920": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "11922": {
      "op": "DUP3"
    },
    "11923": {
      "op": "MLOAD"
    },
    "11924": {
      "op": "PUSH2",
      "value": "0x2EA1"
    },
    "11927": {
      "op": "DUP2"
    },
    "11928": {
      "op": "DUP5"
    },
    "11929": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "11931": {
      "op": "DUP8"
    },
    "11932": {
      "op": "ADD"
    },
    "11933": {
      "op": "PUSH2",
      "value": "0x2E63"
    },
    "11936": {
      "jump": "i",
      "op": "JUMP"
    },
    "11937": {
      "op": "JUMPDEST"
    },
    "11938": {
      "op": "SWAP2"
    },
    "11939": {
      "op": "SWAP1"
    },
    "11940": {
      "op": "SWAP2"
    },
    "11941": {
      "op": "ADD"
    },
    "11942": {
      "op": "SWAP3"
    },
    "11943": {
      "op": "SWAP2"
    },
    "11944": {
      "op": "POP"
    },
    "11945": {
      "op": "POP"
    },
    "11946": {
      "jump": "o",
      "op": "JUMP"
    },
    "11947": {
      "op": "JUMPDEST"
    },
    "11948": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "11950": {
      "op": "DUP2"
    },
    "11951": {
      "op": "MSTORE"
    },
    "11952": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "11954": {
      "op": "DUP3"
    },
    "11955": {
      "op": "MLOAD"
    },
    "11956": {
      "op": "DUP1"
    },
    "11957": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "11959": {
      "op": "DUP5"
    },
    "11960": {
      "op": "ADD"
    },
    "11961": {
      "op": "MSTORE"
    },
    "11962": {
      "op": "PUSH2",
      "value": "0x2ECA"
    },
    "11965": {
      "op": "DUP2"
    },
    "11966": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "11968": {
      "op": "DUP6"
    },
    "11969": {
      "op": "ADD"
    },
    "11970": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "11972": {
      "op": "DUP8"
    },
    "11973": {
      "op": "ADD"
    },
    "11974": {
      "op": "PUSH2",
      "value": "0x2E63"
    },
    "11977": {
      "jump": "i",
      "op": "JUMP"
    },
    "11978": {
      "op": "JUMPDEST"
    },
    "11979": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "11981": {
      "op": "ADD"
    },
    "11982": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "11984": {
      "op": "NOT"
    },
    "11985": {
      "op": "AND"
    },
    "11986": {
      "op": "SWAP2"
    },
    "11987": {
      "op": "SWAP1"
    },
    "11988": {
      "op": "SWAP2"
    },
    "11989": {
      "op": "ADD"
    },
    "11990": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "11992": {
      "op": "ADD"
    },
    "11993": {
      "op": "SWAP3"
    },
    "11994": {
      "op": "SWAP2"
    },
    "11995": {
      "op": "POP"
    },
    "11996": {
      "op": "POP"
    },
    "11997": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "f8a8492ca331d29065e0f0b11c16fa4ecf9f516b",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.14;\n\n/**\n\n\u2588\u2584\u2584\u2584\u2584 \u2588\u2588   \u2584\u2588\u2588\u2588\u2588  \u2584\u2588\u2588\u2588\u2588  \u2588     \u2584\u2588\u2588\u2588\u2584   \u2584\u2588\u2588\u2588\u2588  \u2584\u2588 \n\u2588  \u2584\u2580 \u2588 \u2588  \u2588\u2580   \u2580 \u2588\u2580   \u2580 \u2588     \u2588\u2580   \u2580  \u2588\u2580   \u2580 \u2588\u2588 \n\u2588\u2580\u2580\u258c  \u2588\u2584\u2584\u2588 \u2588\u2580\u2580    \u2588\u2580\u2580    \u2588     \u2588\u2588\u2584\u2584    \u2588\u2580\u2580    \u2588\u2588 \n\u2588  \u2588  \u2588  \u2588 \u2588      \u2588      \u2588\u2588\u2588\u2584  \u2588\u2584   \u2584\u2580 \u2588      \u2590\u2588 \n  \u2588      \u2588  \u2588      \u2588         \u2580 \u2580\u2588\u2588\u2588\u2580    \u2588      \u2590 \n \u2580      \u2588    \u2580      \u2580                    \u2580       \n       \u2580                                         \n\n Written by: UnT4x3d\n\n RaffleSea\u00a9 2022\n \n */\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {IWETH} from \"../interfaces/IWETH.sol\";\n\ninterface ICurrencyPriceFeed {\n    function getUsdPriceOfToken(address token_) external view returns (uint256);\n}\n\ninterface IERC20Extented is IERC20 {\n    function decimals() external view returns (uint8);\n}\n\ncontract MockMainnetEscrow is Initializable, OwnableUpgradeable, PausableUpgradeable {\n    using SafeERC20 for IERC20;\n\n    enum RaffleType {\n        ERC721,\n        ERC20\n    }\n\n    struct CallbackInfo {\n        // Address that will receive the payment\n        address receiver;\n        // Contract that will be called to do the transfer for the payment. address(0) = Ether\n        address assetContract;\n        // Is this contract an ERC721? Otherwise it is an ERC20\n        bool isERC721;\n        // Amount/NftID to send to the receiver\n        uint256 amountOrNftIdToReceiver;\n        // If >0 our fees mapping should be increased\n        uint256 increaseTotalAmountClaimable;\n    }\n\n    // ERC20 address => isWhitelisted?\n    mapping(address => bool) public whitelistedCurrencies;\n\n    IWETH private constant WETH = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n    uint256 public OPENING_FEE; // ~$60 per RaffleCreated\n\n    // 5% FAIR_RAFFLE_FEE\n    uint256 public constant FAIR_RAFFLE_FEE_NUMERATOR = 500;\n    uint256 public constant FAIR_RAFFLE_FEE_DENOMINATOR = 10000;\n    /**\n        Token address => Amount that owners of the contract can claim as fee rewards\n        address(0) = Ether\n     */\n    mapping(address => uint256) public totalAmountClaimable;\n\n    // EOA that will relay the data from Polygon with the results of the raffle\n    address public relayer;\n    // Contract to retrieve from Chainlink Price Feeds the price of different tokens in USD\n    ICurrencyPriceFeed public currencyPriceFeed;\n\n    // Address of Token in Polygon => Address of token in mainnet used to get the price\n    mapping(address => address) public polygonTokenToMainnetAddress;\n    // If this is false the CurrencyPriceFeeds contract will not be used\n    bool public priceFeedsEnabled;\n    // NOTE: Reserved for future upgrades\n    uint256[20] private __gap;\n\n    event RaffleCreated(\n        address assetRaffled,\n        address raffleOwner,\n        RaffleType raffleType,\n        uint128 nftIdOrAmount, \n        address paymentcurrency, \n        uint128 pricePerTicket, \n        uint64 numberOfTotalTickets, \n        uint64 minimumTicketsSold, \n        uint64 endTimestamp, \n        bytes32 merkleRoot,\n        uint256 fairRaffleFee\n    );\n    event ERC20CurrencyAdded(address currency);\n    event ERC20CurrencyRemoved(address currency);\n    event CallbackReceived(\n        address receiver,\n        address assetContract,\n        bool isERC721,\n        uint256 amountOrNftIdToReceiver,\n        uint256 increaseTotalAmountClaimable\n    );\n    event RelayerUpdated(address oldRelayerAddress, address newRelayerAddress);\n    event PriceFeedUpdated(address oldPriceFeedAddress, address newPriceFeedAddress);\n    event OpeningFeeUpdated(uint256 oldOpeningFee, uint256 newOpeningFee);\n\n    function initialize(address _relayer, address _priceFeedContract) public initializer {\n        __Ownable_init();\n        __Pausable_init();\n\n        relayer = _relayer;\n        currencyPriceFeed = ICurrencyPriceFeed(_priceFeedContract);\n        priceFeedsEnabled = true;\n        // WETH address in Polygon\n        whitelistedCurrencies[0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619] = true;\n        // WETH Polygon => WETH Mainnet\n        polygonTokenToMainnetAddress[0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619] = address(WETH);\n        OPENING_FEE = 0.03 ether;\n    }\n\n    modifier onlyRelayer {\n        require(msg.sender == relayer, \"OnlyRelayer\");\n        _;\n    }\n\n    /**\n     * @notice  Allows users to create a raffle of an ERC721 asset\n     * @param   _nftCollection Address of the NFT to raffle\n     * @param   _nftId NFTid of the _nftCollection\n     * @param   _currencyInPolygon Polygon ERC20 token address used to buy tickets. address(0) should be put here if the currency will be MATIC\n     * @param   _pricePerTicket Price per ticket. It can be zero in case of an \"airdrop\"\n     * @param   _numberOfTickets Number of tickets that will be sold as maximum in the raffle\n     * @param   _minimumTicketsSold Number of tickets that should be sold in order to be a success raffle. If this minimum amount is not\n        reached the owner of the raffle will be able to cancel the raffle, returning the users their payment plus a little collateral to cover\n        for the gas fees. If this amount is reached, normal flow will be followed.\n     * @param   _durationInSeconds Duration in seconds of the raffle\n     * @param   _merkleRoot Used so only whitelisted users can buy raffle tickets\n     */\n    function createERC721Raffle(address _nftCollection, uint128 _nftId, address _currencyInPolygon, uint128 _pricePerTicket, uint64 _numberOfTickets, uint64 _minimumTicketsSold, uint64 _durationInSeconds, bytes32 _merkleRoot) external payable whenNotPaused {\n        require(msg.sender == IERC721(_nftCollection).ownerOf(_nftId), \"You do not own this NFT\");\n        require(whitelistedCurrencies[_currencyInPolygon], \"This currency is not whitelisted\");\n        require(_numberOfTickets > 1, \"Raffles must have at least 2 tickets\");\n        require(_minimumTicketsSold <= _numberOfTickets, \"_minimumTicketsSold should <= _numberOfTickets\");\n        require(_durationInSeconds >= 43200, \"Minimum duration is 12 hours\");\n\n        // TOTAL FEES: OPENING_FEE + FAIR_RAFFLE_FEE (5% for all the ERC721 Raffles)\n        uint256 FAIR_RAFFLE_FEE = fairRaffleFeeERC721(_currencyInPolygon, _pricePerTicket, _minimumTicketsSold);\n\n        require(msg.value == (OPENING_FEE + FAIR_RAFFLE_FEE), \"Incorrect fees sent\");\n        totalAmountClaimable[address(0)] += OPENING_FEE;\n\n        // Transfering the NFT into our contract\n        IERC721(_nftCollection).transferFrom(msg.sender, address(this), _nftId);\n        require(address(this) == IERC721(_nftCollection).ownerOf(_nftId), \"Transfer failed\");\n\n        emit RaffleCreated(\n            _nftCollection,\n            msg.sender,\n            RaffleType.ERC721,\n            _nftId, \n            _currencyInPolygon, \n            _pricePerTicket, \n            _numberOfTickets, \n            _minimumTicketsSold, \n            uint64(block.timestamp + _durationInSeconds), \n            _merkleRoot,\n            FAIR_RAFFLE_FEE\n        );\n    }\n\n    /**\n        * @notice  Allows users to create a raffle of an ERC20 asset\n        * @param   _tokenAddress Address of the token amount to raffle\n        * @param   _amount Quantity of tokens to be raffled\n        * @param   _currencyInPolygon Polygon ERC20 token address used to buy tickets. address(0) should be put here if the currency will be MATIC\n        * @param   _pricePerTicket Price per ticket. It can be zero in case of an \"airdrop\"\n        * @param   _numberOfTickets Number of tickets that will be sold as maximum in the raffle\n        * @param   _minimumTicketsSold Number of tickets that should be sold in order to be a success raffle. If this minimum amount is not\n        reached the owner of the raffle will be able to cancel the raffle, returning the users their payment plus a little collateral to cover\n        for the gas fees. If this amount is reached, normal flow will be followed\n        * @param   _durationInSeconds Duration in seconds of the raffle\n        * @param   _merkleRoot Used so only whitelisted users can buy raffle tickets\n    */\n    function createERC20Raffle(address _tokenAddress, uint128 _amount, address _currencyInPolygon, uint128 _pricePerTicket, uint64 _numberOfTickets, uint64 _minimumTicketsSold, uint64 _durationInSeconds, bytes32 _merkleRoot) external payable whenNotPaused {\n        require(whitelistedCurrencies[_currencyInPolygon], \"This currency is not whitelisted\");\n        require(_numberOfTickets > 1, \"Raffles must have at least 2 tickets\");\n        require(_minimumTicketsSold <= _numberOfTickets, \"_minimumTicketsSold should <= _numberOfTickets\");\n        require(_durationInSeconds >= 43200, \"Minimum duration is 12 hours\");\n        \n        uint256 FAIR_RAFFLE_FEE = fairRaffleFeeERC20( _tokenAddress, _amount, _currencyInPolygon, _pricePerTicket, _numberOfTickets, _minimumTicketsSold);\n\n        if (_tokenAddress == address(0)) {\n            require(msg.value == _amount + OPENING_FEE, \"Incorrect fee sent\");\n        } else {\n            require(msg.value == OPENING_FEE, \"Incorrect OPENING_FEE sent\");\n            uint256 balanceBefore = IERC20(_tokenAddress).balanceOf(address(this));\n            // Transfer tokens to the contract\n            IERC20(_tokenAddress).safeTransferFrom(msg.sender, address(this), _amount);\n            uint256 balanceAfter = IERC20(_tokenAddress).balanceOf(address(this));\n            require(_amount == balanceAfter - balanceBefore, \"ERC20 token transfer failed\");\n        }\n\n        totalAmountClaimable[address(0)] += OPENING_FEE;\n        emit RaffleCreated(\n            _tokenAddress,\n            msg.sender,\n            RaffleType.ERC20,\n            _amount, \n            _currencyInPolygon, \n            _pricePerTicket, \n            _numberOfTickets, \n            _minimumTicketsSold, \n            uint64(block.timestamp + _durationInSeconds), \n            _merkleRoot,\n            FAIR_RAFFLE_FEE\n        );\n    }\n\n    /**\n     * @notice  Relayer will call this function to send updates from Polygon\n     */\n    function polygonCallback(CallbackInfo[] memory callbackArr) external {\n        uint256 len = callbackArr.length;\n        for (uint256 i; i < len; ++i){\n            if(callbackArr[i].isERC721){\n                if(callbackArr[i].receiver != address(0)){\n                    IERC721(callbackArr[i].assetContract).transferFrom(address(this), callbackArr[i].receiver, callbackArr[i].amountOrNftIdToReceiver);\n                }\n            }\n            else{\n                if(callbackArr[i].receiver != address(0)){\n                    if(callbackArr[i].assetContract == address(0)){\n                        _handleEtherTransfer(callbackArr[i].receiver, callbackArr[i].amountOrNftIdToReceiver);\n                    }\n                    else {\n                        IERC20(callbackArr[i].assetContract).safeTransfer(callbackArr[i].receiver, callbackArr[i].amountOrNftIdToReceiver);\n                    }\n                }\n            }\n            if(callbackArr[i].increaseTotalAmountClaimable > 0){\n                totalAmountClaimable[callbackArr[i].assetContract] += callbackArr[i].increaseTotalAmountClaimable;\n            }\n            emit CallbackReceived(\n                callbackArr[i].receiver,\n                callbackArr[i].assetContract,\n                callbackArr[i].isERC721,\n                callbackArr[i].amountOrNftIdToReceiver,\n                callbackArr[i].increaseTotalAmountClaimable\n            );\n        }\n    }\n\n    /**\n     *  Function to handle Ether transfers\n     */\n    function _handleEtherTransfer(address _dest, uint256 _amount) internal {\n        // Handle ETH payment\n        require(address(this).balance >= _amount, \"_handleEtherTransfer insolvent\");\n        uint256 gas =  gasleft();\n        (bool success, ) = _dest.call{value: _amount, gas: gas}(\"\");\n        // If the ETH transfer fails (sigh), wrap the ETH and try send it as WETH.\n        if (!success) {\n            WETH.deposit{value: _amount}();\n            IERC20(address(WETH)).safeTransfer(_dest, _amount);\n        }\n    }\n\n    /** ############################################################################################\n     *              ONLYOWNER FUNCTIONS\n     *  ############################################################################################\n     */\n\n    /**\n     * @notice  Used to pause/unpause the smart contract by the owner\n     */\n    function togglePause() external {\n        if (!paused()) _pause();\n        else _unpause();\n    }\n\n    /**\n     * @notice  Used to set a new relayer account\n     */\n    function setRelayer(address _relayer) external {\n        emit RelayerUpdated(relayer, _relayer);\n        relayer = _relayer;\n    }\n\n    /**\n     * @notice  Used to set a new CurrencyPriceFeed contract\n     */\n    function setPriceFeed(address _currencyPriceFeed) external {\n        emit PriceFeedUpdated(address(currencyPriceFeed), _currencyPriceFeed);\n        currencyPriceFeed = ICurrencyPriceFeed(_currencyPriceFeed);\n    }\n\n    /**\n     * @notice  Used to enable/disable CurrencyPriceFeeds contract\n     */\n    function togglePriceFeed() external onlyOwner {\n        priceFeedsEnabled = !priceFeedsEnabled;\n    }\n\n    /**\n     * @notice  Used to set a new OPENING_FEE\n     */\n    function setOpeningFee(uint256 _openingFee) external {\n        emit OpeningFeeUpdated(OPENING_FEE, _openingFee);\n        OPENING_FEE = _openingFee;\n    }\n\n    /**\n     * @notice  Used to whitelist a new ERC20 token to be used as a payment currency\n    * @param   _ERC20TokenAddressPolygon Address of the token in Polygon\n    * @param   _ERC20TokenAddressMainnet Address of the token in Mainnet\n     */\n    function whitelistCurrency(address _ERC20TokenAddressPolygon, address _ERC20TokenAddressMainnet) external {\n        require(!whitelistedCurrencies[_ERC20TokenAddressPolygon], \"Token is already whitelisted\");\n        whitelistedCurrencies[_ERC20TokenAddressPolygon] = true;\n        polygonTokenToMainnetAddress[_ERC20TokenAddressPolygon] = _ERC20TokenAddressMainnet;\n        emit ERC20CurrencyAdded(_ERC20TokenAddressPolygon);\n    }\n\n    /**\n     * @notice  Used to blacklist a ERC20 token so it can not be used any longer as a payment currency\n     */\n    function blacklistCurrency(address _ERC20TokenAddressPolygon) external {\n        require(whitelistedCurrencies[_ERC20TokenAddressPolygon], \"Token is not whitelisted\");\n        whitelistedCurrencies[_ERC20TokenAddressPolygon] = false;\n        emit ERC20CurrencyRemoved(_ERC20TokenAddressPolygon);\n    }\n\n    /**\n     * @notice  Used by the contract owners to claim the fees accrued\n     * @param   _tokenAddress List of tokens to withdraw the fees\n     * @param   _amounts List of amounts that will be withdrawn\n     * @param   _receiver Address that will receive the fees\n     */\n    function withdrawFees(address[] calldata _tokenAddress, uint256[] calldata _amounts, address _receiver) external {\n        uint256 len = _tokenAddress.length;\n        require(len == _amounts.length, \"Array lengths do not match\");\n        uint256 amount;\n        address tokenAddress;\n        for (uint256 i; i < len; ++i) {\n            tokenAddress = _tokenAddress[i];\n            amount = _amounts[i];\n            require(amount <= totalAmountClaimable[tokenAddress], \"Amount too high\");\n            if(tokenAddress == address(0)){\n                _handleEtherTransfer(_receiver, amount);\n            }\n            else{\n                IERC20(tokenAddress).safeTransfer(_receiver, amount);\n            }\n            // No overflow here as => require(amount <= totalAmountClaimable[tokenAddress])\n            unchecked {\n                totalAmountClaimable[tokenAddress] -= amount;\n            }\n        }\n    }\n\n    /** ############################################################################################\n     *                 VIEW FUNCTIONS\n     *  ############################################################################################\n     */\n\n    function isCurrencyWhitelisted(address _erc20Token) external view returns(bool) {\n        return whitelistedCurrencies[_erc20Token];\n    }\n\n    function fairRaffleFeeERC20(address _tokenAddress, uint128 _amount, address _currencyInPolygon, uint128 _pricePerTicket, uint64 _numberOfTickets, uint64 _minimumTicketsSold) public view returns(uint256) {\n        uint256 FAIR_RAFFLE_FEE;\n        if (!priceFeedsEnabled){\n            FAIR_RAFFLE_FEE = (_minimumTicketsSold * _pricePerTicket * FAIR_RAFFLE_FEE_NUMERATOR) / FAIR_RAFFLE_FEE_DENOMINATOR;\n        }\n        else{\n            uint256 totalRaffleValueInUsd;\n            if (_tokenAddress == address(0)){\n                _tokenAddress = address(WETH);\n                totalRaffleValueInUsd = (currencyPriceFeed.getUsdPriceOfToken(_tokenAddress) * _amount) / (10 ** 18); // As Ether has 18 decimals\n            }\n            else{\n                totalRaffleValueInUsd = (currencyPriceFeed.getUsdPriceOfToken(_tokenAddress) * _amount) / (10 ** IERC20Extented(_tokenAddress).decimals());\n            }\n            uint256 totalValueAllTicketsInUsd = (currencyPriceFeed.getUsdPriceOfToken(polygonTokenToMainnetAddress[_currencyInPolygon]) * _numberOfTickets * _pricePerTicket) / (10 ** IERC20Extented(polygonTokenToMainnetAddress[_currencyInPolygon]).decimals());\n            uint256 ratio = (totalValueAllTicketsInUsd * 10000) / totalRaffleValueInUsd;\n        \n            // If the Raffle is fair, FAIR_RAFFLE_FEE = 0\n            if (ratio <= 10000){\n                FAIR_RAFFLE_FEE = 0;\n            }\n            else if ((ratio > 10000) && (ratio <= 11000)) {\n                // 5%\n                FAIR_RAFFLE_FEE = (_minimumTicketsSold * _pricePerTicket * 500) / 10000;\n            }\n            else if ((ratio > 11000) && (ratio <= 12500)) {\n                // 10%\n                FAIR_RAFFLE_FEE = (_minimumTicketsSold * _pricePerTicket * 1000) / 10000;\n            }\n            else if (ratio > 12500) {\n                // 20%\n                FAIR_RAFFLE_FEE = (_minimumTicketsSold * _pricePerTicket * 2000) / 10000;\n            }\n        }\n        return FAIR_RAFFLE_FEE;\n    }\n\n    function fairRaffleFeeERC721(address _currencyInPolygon, uint128 _pricePerTicket, uint64 _minimumTicketsSold) public view returns(uint256) {\n        uint256 totalRaffledTicketsValueInUsd = (currencyPriceFeed.getUsdPriceOfToken(polygonTokenToMainnetAddress[_currencyInPolygon]) * _pricePerTicket * _minimumTicketsSold) / (10 ** IERC20Extented(polygonTokenToMainnetAddress[_currencyInPolygon]).decimals());\n        uint256 FAIR_RAFFLE_FEE_IN_USD = (totalRaffledTicketsValueInUsd * FAIR_RAFFLE_FEE_NUMERATOR) / FAIR_RAFFLE_FEE_DENOMINATOR;\n        uint256 FAIR_RAFFLE_FEE = (FAIR_RAFFLE_FEE_IN_USD * 1e18) / currencyPriceFeed.getUsdPriceOfToken(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n        return FAIR_RAFFLE_FEE;\n    }\n}",
  "sourceMap": "1273:17996:36:-:0;;;;;;;;;;;;;;;;;;;",
  "sourcePath": "contracts/mocks/MockMainnetEscrowNoAccessControl.sol",
  "type": "contract"
}